// Package dao contains the types for schema 'mj'.
package dao

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Chat represents a row from 'mj.chat'.
type Chat struct {
	IndexID  int32     `json:"index_id"`  // index_id
	SendID   int32     `json:"send_id"`   // send_id
	RoomID   int32     `json:"room_id"`   // room_id
	MsgType  int32     `json:"msg_type"`  // msg_type
	MessID   int32     `json:"mess_id"`   // mess_id
	MsgText  string    `json:"msg_text"`  // msg_text
	SendTime time.Time `json:"send_time"` // send_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Chat exists in the database.
func (c *Chat) Exists() bool {
	return c._exists
}

// Deleted provides information if the Chat has been deleted from the database.
func (c *Chat) Deleted() bool {
	return c._deleted
}

// Insert inserts the Chat to the database.
func (c *Chat) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO mj.chat (` +
		`send_id, room_id, msg_type, mess_id, msg_text, send_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.SendID, c.RoomID, c.MsgType, c.MessID, c.MsgText, c.SendTime)
	res, err := db.Exec(sqlstr, c.SendID, c.RoomID, c.MsgType, c.MessID, c.MsgText, c.SendTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	c.IndexID = int32(id)
	c._exists = true

	return nil
}

// Update updates the Chat in the database.
func (c *Chat) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mj.chat SET ` +
		`send_id = ?, room_id = ?, msg_type = ?, mess_id = ?, msg_text = ?, send_time = ?` +
		` WHERE index_id = ?`

	// run query
	XOLog(sqlstr, c.SendID, c.RoomID, c.MsgType, c.MessID, c.MsgText, c.SendTime, c.IndexID)
	_, err = db.Exec(sqlstr, c.SendID, c.RoomID, c.MsgType, c.MessID, c.MsgText, c.SendTime, c.IndexID)
	return err
}

// Save saves the Chat to the database.
func (c *Chat) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Delete deletes the Chat from the database.
func (c *Chat) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mj.chat WHERE index_id = ?`

	// run query
	XOLog(sqlstr, c.IndexID)
	_, err = db.Exec(sqlstr, c.IndexID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// ChatByIndexID retrieves a row from 'mj.chat' as a Chat.
//
// Generated from index 'chat_index_id_pkey'.
func ChatByIndexID(db XODB, indexID int32) (*Chat, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, send_id, room_id, msg_type, mess_id, msg_text, send_time ` +
		`FROM mj.chat ` +
		`WHERE index_id = ?`

	// run query
	XOLog(sqlstr, indexID)
	c := Chat{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, indexID).Scan(&c.IndexID, &c.SendID, &c.RoomID, &c.MsgType, &c.MessID, &c.MsgText, &c.SendTime)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// ChatsByRoomID retrieves a row from 'mj.chat' as a Chat.
//
// Generated from index 'idx_room_id'.
func ChatsByRoomID(db XODB, roomID int32) ([]*Chat, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, send_id, room_id, msg_type, mess_id, msg_text, send_time ` +
		`FROM mj.chat ` +
		`WHERE room_id = ?`

	// run query
	XOLog(sqlstr, roomID)
	q, err := db.Query(sqlstr, roomID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Chat{}
	for q.Next() {
		c := Chat{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.IndexID, &c.SendID, &c.RoomID, &c.MsgType, &c.MessID, &c.MsgText, &c.SendTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// ChatsBySendID retrieves a row from 'mj.chat' as a Chat.
//
// Generated from index 'idx_send_id'.
func ChatsBySendID(db XODB, sendID int32) ([]*Chat, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, send_id, room_id, msg_type, mess_id, msg_text, send_time ` +
		`FROM mj.chat ` +
		`WHERE send_id = ?`

	// run query
	XOLog(sqlstr, sendID)
	q, err := db.Query(sqlstr, sendID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Chat{}
	for q.Next() {
		c := Chat{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.IndexID, &c.SendID, &c.RoomID, &c.MsgType, &c.MessID, &c.MsgText, &c.SendTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// ChatsBySendTime retrieves a row from 'mj.chat' as a Chat.
//
// Generated from index 'idx_send_time'.
func ChatsBySendTime(db XODB, sendTime time.Time) ([]*Chat, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, send_id, room_id, msg_type, mess_id, msg_text, send_time ` +
		`FROM mj.chat ` +
		`WHERE send_time = ?`

	// run query
	XOLog(sqlstr, sendTime)
	q, err := db.Query(sqlstr, sendTime)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Chat{}
	for q.Next() {
		c := Chat{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.IndexID, &c.SendID, &c.RoomID, &c.MsgType, &c.MessID, &c.MsgText, &c.SendTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}
