// Package dao contains the types for schema 'mj'.
package dao

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// AgAuth represents a row from 'mj.ag_auth'.
type AgAuth struct {
	IndexID    int32     `json:"index_id"`    // index_id
	AgUpperID  int32     `json:"ag_upper_id"` // ag_upper_id
	AgID       int32     `json:"ag_id"`       // ag_id
	AgLevel    int32     `json:"ag_level"`    // ag_level
	CreateTime time.Time `json:"create_time"` // create_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AgAuth exists in the database.
func (aa *AgAuth) Exists() bool {
	return aa._exists
}

// Deleted provides information if the AgAuth has been deleted from the database.
func (aa *AgAuth) Deleted() bool {
	return aa._deleted
}

// Insert inserts the AgAuth to the database.
func (aa *AgAuth) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if aa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO mj.ag_auth (` +
		`ag_upper_id, ag_id, ag_level, create_time` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, aa.AgUpperID, aa.AgID, aa.AgLevel, aa.CreateTime)
	res, err := db.Exec(sqlstr, aa.AgUpperID, aa.AgID, aa.AgLevel, aa.CreateTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	aa.IndexID = int32(id)
	aa._exists = true

	return nil
}

// Update updates the AgAuth in the database.
func (aa *AgAuth) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !aa._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if aa._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mj.ag_auth SET ` +
		`ag_upper_id = ?, ag_id = ?, ag_level = ?, create_time = ?` +
		` WHERE index_id = ?`

	// run query
	XOLog(sqlstr, aa.AgUpperID, aa.AgID, aa.AgLevel, aa.CreateTime, aa.IndexID)
	_, err = db.Exec(sqlstr, aa.AgUpperID, aa.AgID, aa.AgLevel, aa.CreateTime, aa.IndexID)
	return err
}

// Save saves the AgAuth to the database.
func (aa *AgAuth) Save(db XODB) error {
	if aa.Exists() {
		return aa.Update(db)
	}

	return aa.Insert(db)
}

// Delete deletes the AgAuth from the database.
func (aa *AgAuth) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !aa._exists {
		return nil
	}

	// if deleted, bail
	if aa._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mj.ag_auth WHERE index_id = ?`

	// run query
	XOLog(sqlstr, aa.IndexID)
	_, err = db.Exec(sqlstr, aa.IndexID)
	if err != nil {
		return err
	}

	// set deleted
	aa._deleted = true

	return nil
}

// AgAuthByIndexID retrieves a row from 'mj.ag_auth' as a AgAuth.
//
// Generated from index 'ag_auth_index_id_pkey'.
func AgAuthByIndexID(db XODB, indexID int32) (*AgAuth, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, ag_upper_id, ag_id, ag_level, create_time ` +
		`FROM mj.ag_auth ` +
		`WHERE index_id = ?`

	// run query
	XOLog(sqlstr, indexID)
	aa := AgAuth{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, indexID).Scan(&aa.IndexID, &aa.AgUpperID, &aa.AgID, &aa.AgLevel, &aa.CreateTime)
	if err != nil {
		return nil, err
	}

	return &aa, nil
}

// AgAuthsByAgUpperID retrieves a row from 'mj.ag_auth' as a AgAuth.
//
// Generated from index 'idx_ag_upper_id'.
func AgAuthsByAgUpperID(db XODB, agUpperID int32) ([]*AgAuth, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, ag_upper_id, ag_id, ag_level, create_time ` +
		`FROM mj.ag_auth ` +
		`WHERE ag_upper_id = ?`

	// run query
	XOLog(sqlstr, agUpperID)
	q, err := db.Query(sqlstr, agUpperID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AgAuth{}
	for q.Next() {
		aa := AgAuth{
			_exists: true,
		}

		// scan
		err = q.Scan(&aa.IndexID, &aa.AgUpperID, &aa.AgID, &aa.AgLevel, &aa.CreateTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &aa)
	}

	return res, nil
}

// AgAuthByAgUpperIDAgID retrieves a row from 'mj.ag_auth' as a AgAuth.
//
// Generated from index 'uidx_ag_upper_id_ag_id'.
func AgAuthByAgUpperIDAgID(db XODB, agUpperID int32, agID int32) (*AgAuth, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, ag_upper_id, ag_id, ag_level, create_time ` +
		`FROM mj.ag_auth ` +
		`WHERE ag_upper_id = ? AND ag_id = ?`

	// run query
	XOLog(sqlstr, agUpperID, agID)
	aa := AgAuth{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, agUpperID, agID).Scan(&aa.IndexID, &aa.AgUpperID, &aa.AgID, &aa.AgLevel, &aa.CreateTime)
	if err != nil {
		return nil, err
	}

	return &aa, nil
}
