// Package dao contains the types for schema 'mj'.
package dao

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// Module represents a row from 'mj.module'.
type Module struct {
	IndexID int32  `json:"index_id"` // index_id
	Module  string `json:"module"`   // module
	Comment string `json:"comment"`  // comment

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Module exists in the database.
func (m *Module) Exists() bool {
	return m._exists
}

// Deleted provides information if the Module has been deleted from the database.
func (m *Module) Deleted() bool {
	return m._deleted
}

// Insert inserts the Module to the database.
func (m *Module) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO mj.module (` +
		`module, comment` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, m.Module, m.Comment)
	res, err := db.Exec(sqlstr, m.Module, m.Comment)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	m.IndexID = int32(id)
	m._exists = true

	return nil
}

// Update updates the Module in the database.
func (m *Module) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mj.module SET ` +
		`module = ?, comment = ?` +
		` WHERE index_id = ?`

	// run query
	XOLog(sqlstr, m.Module, m.Comment, m.IndexID)
	_, err = db.Exec(sqlstr, m.Module, m.Comment, m.IndexID)
	return err
}

// Save saves the Module to the database.
func (m *Module) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Delete deletes the Module from the database.
func (m *Module) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mj.module WHERE index_id = ?`

	// run query
	XOLog(sqlstr, m.IndexID)
	_, err = db.Exec(sqlstr, m.IndexID)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// ModuleByIndexID retrieves a row from 'mj.module' as a Module.
//
// Generated from index 'module_index_id_pkey'.
func ModuleByIndexID(db XODB, indexID int32) (*Module, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, module, comment ` +
		`FROM mj.module ` +
		`WHERE index_id = ?`

	// run query
	XOLog(sqlstr, indexID)
	m := Module{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, indexID).Scan(&m.IndexID, &m.Module, &m.Comment)
	if err != nil {
		return nil, err
	}

	return &m, nil
}

// ModuleByModule retrieves a row from 'mj.module' as a Module.
//
// Generated from index 'uidx_module'.
func ModuleByModule(db XODB, module string) (*Module, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, module, comment ` +
		`FROM mj.module ` +
		`WHERE module = ?`

	// run query
	XOLog(sqlstr, module)
	m := Module{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, module).Scan(&m.IndexID, &m.Module, &m.Comment)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
