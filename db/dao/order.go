// Package dao contains the types for schema 'mj'.
package dao

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Order represents a row from 'mj.order'.
type Order struct {
	IndexID    int32     `json:"index_id"`    // index_id
	OrderID    string    `json:"order_id"`    // order_id
	TransID    string    `json:"trans_id"`    // trans_id
	PlayerID   int32     `json:"player_id"`   // player_id
	Channel    int32     `json:"channel"`     // channel
	PayType    int32     `json:"pay_type"`    // pay_type
	GemID      int32     `json:"gem_id"`      // gem_id
	WaresID    string    `json:"wares_id"`    // wares_id
	WaresName  string    `json:"wares_name"`  // wares_name
	GoodsCount int32     `json:"goods_count"` // goods_count
	ExtraCount int32     `json:"extra_count"` // extra_count
	Price      int32     `json:"price"`       // price
	Status     int32     `json:"status"`      // status
	AddTime    time.Time `json:"add_time"`    // add_time
	ReviseTime time.Time `json:"revise_time"` // revise_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Order exists in the database.
func (o *Order) Exists() bool {
	return o._exists
}

// Deleted provides information if the Order has been deleted from the database.
func (o *Order) Deleted() bool {
	return o._deleted
}

// Insert inserts the Order to the database.
func (o *Order) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if o._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO mj.order (` +
		`order_id, trans_id, player_id, channel, pay_type, gem_id, wares_id, wares_name, goods_count, extra_count, price, status, add_time, revise_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, o.OrderID, o.TransID, o.PlayerID, o.Channel, o.PayType, o.GemID, o.WaresID, o.WaresName, o.GoodsCount, o.ExtraCount, o.Price, o.Status, o.AddTime, o.ReviseTime)
	res, err := db.Exec(sqlstr, o.OrderID, o.TransID, o.PlayerID, o.Channel, o.PayType, o.GemID, o.WaresID, o.WaresName, o.GoodsCount, o.ExtraCount, o.Price, o.Status, o.AddTime, o.ReviseTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	o.IndexID = int32(id)
	o._exists = true

	return nil
}

// Update updates the Order in the database.
func (o *Order) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if o._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mj.order SET ` +
		`order_id = ?, trans_id = ?, player_id = ?, channel = ?, pay_type = ?, gem_id = ?, wares_id = ?, wares_name = ?, goods_count = ?, extra_count = ?, price = ?, status = ?, add_time = ?, revise_time = ?` +
		` WHERE index_id = ?`

	// run query
	XOLog(sqlstr, o.OrderID, o.TransID, o.PlayerID, o.Channel, o.PayType, o.GemID, o.WaresID, o.WaresName, o.GoodsCount, o.ExtraCount, o.Price, o.Status, o.AddTime, o.ReviseTime, o.IndexID)
	_, err = db.Exec(sqlstr, o.OrderID, o.TransID, o.PlayerID, o.Channel, o.PayType, o.GemID, o.WaresID, o.WaresName, o.GoodsCount, o.ExtraCount, o.Price, o.Status, o.AddTime, o.ReviseTime, o.IndexID)
	return err
}

// Save saves the Order to the database.
func (o *Order) Save(db XODB) error {
	if o.Exists() {
		return o.Update(db)
	}

	return o.Insert(db)
}

// Delete deletes the Order from the database.
func (o *Order) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return nil
	}

	// if deleted, bail
	if o._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mj.order WHERE index_id = ?`

	// run query
	XOLog(sqlstr, o.IndexID)
	_, err = db.Exec(sqlstr, o.IndexID)
	if err != nil {
		return err
	}

	// set deleted
	o._deleted = true

	return nil
}

// OrdersByAddTime retrieves a row from 'mj.order' as a Order.
//
// Generated from index 'idx_add_time'.
func OrdersByAddTime(db XODB, addTime time.Time) ([]*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, order_id, trans_id, player_id, channel, pay_type, gem_id, wares_id, wares_name, goods_count, extra_count, price, status, add_time, revise_time ` +
		`FROM mj.order ` +
		`WHERE add_time = ?`

	// run query
	XOLog(sqlstr, addTime)
	q, err := db.Query(sqlstr, addTime)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Order{}
	for q.Next() {
		o := Order{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.IndexID, &o.OrderID, &o.TransID, &o.PlayerID, &o.Channel, &o.PayType, &o.GemID, &o.WaresID, &o.WaresName, &o.GoodsCount, &o.ExtraCount, &o.Price, &o.Status, &o.AddTime, &o.ReviseTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OrdersByChannel retrieves a row from 'mj.order' as a Order.
//
// Generated from index 'idx_channel'.
func OrdersByChannel(db XODB, channel int32) ([]*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, order_id, trans_id, player_id, channel, pay_type, gem_id, wares_id, wares_name, goods_count, extra_count, price, status, add_time, revise_time ` +
		`FROM mj.order ` +
		`WHERE channel = ?`

	// run query
	XOLog(sqlstr, channel)
	q, err := db.Query(sqlstr, channel)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Order{}
	for q.Next() {
		o := Order{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.IndexID, &o.OrderID, &o.TransID, &o.PlayerID, &o.Channel, &o.PayType, &o.GemID, &o.WaresID, &o.WaresName, &o.GoodsCount, &o.ExtraCount, &o.Price, &o.Status, &o.AddTime, &o.ReviseTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OrderByOrderID retrieves a row from 'mj.order' as a Order.
//
// Generated from index 'idx_order_id'.
func OrderByOrderID(db XODB, orderID string) (*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, order_id, trans_id, player_id, channel, pay_type, gem_id, wares_id, wares_name, goods_count, extra_count, price, status, add_time, revise_time ` +
		`FROM mj.order ` +
		`WHERE order_id = ?`

	// run query
	XOLog(sqlstr, orderID)
	o := Order{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, orderID).Scan(&o.IndexID, &o.OrderID, &o.TransID, &o.PlayerID, &o.Channel, &o.PayType, &o.GemID, &o.WaresID, &o.WaresName, &o.GoodsCount, &o.ExtraCount, &o.Price, &o.Status, &o.AddTime, &o.ReviseTime)
	if err != nil {
		return nil, err
	}

	return &o, nil
}

// OrdersByPlayerID retrieves a row from 'mj.order' as a Order.
//
// Generated from index 'idx_player_id'.
func OrdersByPlayerID(db XODB, playerID int32) ([]*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, order_id, trans_id, player_id, channel, pay_type, gem_id, wares_id, wares_name, goods_count, extra_count, price, status, add_time, revise_time ` +
		`FROM mj.order ` +
		`WHERE player_id = ?`

	// run query
	XOLog(sqlstr, playerID)
	q, err := db.Query(sqlstr, playerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Order{}
	for q.Next() {
		o := Order{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.IndexID, &o.OrderID, &o.TransID, &o.PlayerID, &o.Channel, &o.PayType, &o.GemID, &o.WaresID, &o.WaresName, &o.GoodsCount, &o.ExtraCount, &o.Price, &o.Status, &o.AddTime, &o.ReviseTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OrdersByReviseTime retrieves a row from 'mj.order' as a Order.
//
// Generated from index 'idx_revise_time'.
func OrdersByReviseTime(db XODB, reviseTime time.Time) ([]*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, order_id, trans_id, player_id, channel, pay_type, gem_id, wares_id, wares_name, goods_count, extra_count, price, status, add_time, revise_time ` +
		`FROM mj.order ` +
		`WHERE revise_time = ?`

	// run query
	XOLog(sqlstr, reviseTime)
	q, err := db.Query(sqlstr, reviseTime)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Order{}
	for q.Next() {
		o := Order{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.IndexID, &o.OrderID, &o.TransID, &o.PlayerID, &o.Channel, &o.PayType, &o.GemID, &o.WaresID, &o.WaresName, &o.GoodsCount, &o.ExtraCount, &o.Price, &o.Status, &o.AddTime, &o.ReviseTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OrdersByTransID retrieves a row from 'mj.order' as a Order.
//
// Generated from index 'idx_trans_id'.
func OrdersByTransID(db XODB, transID string) ([]*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, order_id, trans_id, player_id, channel, pay_type, gem_id, wares_id, wares_name, goods_count, extra_count, price, status, add_time, revise_time ` +
		`FROM mj.order ` +
		`WHERE trans_id = ?`

	// run query
	XOLog(sqlstr, transID)
	q, err := db.Query(sqlstr, transID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Order{}
	for q.Next() {
		o := Order{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.IndexID, &o.OrderID, &o.TransID, &o.PlayerID, &o.Channel, &o.PayType, &o.GemID, &o.WaresID, &o.WaresName, &o.GoodsCount, &o.ExtraCount, &o.Price, &o.Status, &o.AddTime, &o.ReviseTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OrderByIndexID retrieves a row from 'mj.order' as a Order.
//
// Generated from index 'order_index_id_pkey'.
func OrderByIndexID(db XODB, indexID int32) (*Order, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, order_id, trans_id, player_id, channel, pay_type, gem_id, wares_id, wares_name, goods_count, extra_count, price, status, add_time, revise_time ` +
		`FROM mj.order ` +
		`WHERE index_id = ?`

	// run query
	XOLog(sqlstr, indexID)
	o := Order{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, indexID).Scan(&o.IndexID, &o.OrderID, &o.TransID, &o.PlayerID, &o.Channel, &o.PayType, &o.GemID, &o.WaresID, &o.WaresName, &o.GoodsCount, &o.ExtraCount, &o.Price, &o.Status, &o.AddTime, &o.ReviseTime)
	if err != nil {
		return nil, err
	}

	return &o, nil
}
