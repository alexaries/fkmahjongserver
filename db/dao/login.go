// Package dao contains the types for schema 'mj'.
package dao

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Login represents a row from 'mj.login'.
type Login struct {
	IndexID      int32     `json:"index_id"`      // index_id
	PlayerID     int32     `json:"player_id"`     // player_id
	LoginChannel int32     `json:"login_channel"` // login_channel
	LoginVersion int32     `json:"login_version"` // login_version
	LoginType    int32     `json:"login_type"`    // login_type
	LoginIP      string    `json:"login_ip"`      // login_ip
	LoginTime    time.Time `json:"login_time"`    // login_time
	LoginMachine string    `json:"login_machine"` // login_machine

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Login exists in the database.
func (l *Login) Exists() bool {
	return l._exists
}

// Deleted provides information if the Login has been deleted from the database.
func (l *Login) Deleted() bool {
	return l._deleted
}

// Insert inserts the Login to the database.
func (l *Login) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO mj.login (` +
		`player_id, login_channel, login_version, login_type, login_ip, login_time, login_machine` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, l.PlayerID, l.LoginChannel, l.LoginVersion, l.LoginType, l.LoginIP, l.LoginTime, l.LoginMachine)
	res, err := db.Exec(sqlstr, l.PlayerID, l.LoginChannel, l.LoginVersion, l.LoginType, l.LoginIP, l.LoginTime, l.LoginMachine)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	l.IndexID = int32(id)
	l._exists = true

	return nil
}

// Update updates the Login in the database.
func (l *Login) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if l._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mj.login SET ` +
		`player_id = ?, login_channel = ?, login_version = ?, login_type = ?, login_ip = ?, login_time = ?, login_machine = ?` +
		` WHERE index_id = ?`

	// run query
	XOLog(sqlstr, l.PlayerID, l.LoginChannel, l.LoginVersion, l.LoginType, l.LoginIP, l.LoginTime, l.LoginMachine, l.IndexID)
	_, err = db.Exec(sqlstr, l.PlayerID, l.LoginChannel, l.LoginVersion, l.LoginType, l.LoginIP, l.LoginTime, l.LoginMachine, l.IndexID)
	return err
}

// Save saves the Login to the database.
func (l *Login) Save(db XODB) error {
	if l.Exists() {
		return l.Update(db)
	}

	return l.Insert(db)
}

// Delete deletes the Login from the database.
func (l *Login) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return nil
	}

	// if deleted, bail
	if l._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mj.login WHERE index_id = ?`

	// run query
	XOLog(sqlstr, l.IndexID)
	_, err = db.Exec(sqlstr, l.IndexID)
	if err != nil {
		return err
	}

	// set deleted
	l._deleted = true

	return nil
}

// LoginsByLoginChannel retrieves a row from 'mj.login' as a Login.
//
// Generated from index 'idx_login_channel'.
func LoginsByLoginChannel(db XODB, loginChannel int32) ([]*Login, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, login_channel, login_version, login_type, login_ip, login_time, login_machine ` +
		`FROM mj.login ` +
		`WHERE login_channel = ?`

	// run query
	XOLog(sqlstr, loginChannel)
	q, err := db.Query(sqlstr, loginChannel)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Login{}
	for q.Next() {
		l := Login{
			_exists: true,
		}

		// scan
		err = q.Scan(&l.IndexID, &l.PlayerID, &l.LoginChannel, &l.LoginVersion, &l.LoginType, &l.LoginIP, &l.LoginTime, &l.LoginMachine)
		if err != nil {
			return nil, err
		}

		res = append(res, &l)
	}

	return res, nil
}

// LoginsByLoginChannelLoginVersion retrieves a row from 'mj.login' as a Login.
//
// Generated from index 'idx_login_channel_login_version'.
func LoginsByLoginChannelLoginVersion(db XODB, loginChannel int32, loginVersion int32) ([]*Login, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, login_channel, login_version, login_type, login_ip, login_time, login_machine ` +
		`FROM mj.login ` +
		`WHERE login_channel = ? AND login_version = ?`

	// run query
	XOLog(sqlstr, loginChannel, loginVersion)
	q, err := db.Query(sqlstr, loginChannel, loginVersion)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Login{}
	for q.Next() {
		l := Login{
			_exists: true,
		}

		// scan
		err = q.Scan(&l.IndexID, &l.PlayerID, &l.LoginChannel, &l.LoginVersion, &l.LoginType, &l.LoginIP, &l.LoginTime, &l.LoginMachine)
		if err != nil {
			return nil, err
		}

		res = append(res, &l)
	}

	return res, nil
}

// LoginsByLoginTime retrieves a row from 'mj.login' as a Login.
//
// Generated from index 'idx_login_time'.
func LoginsByLoginTime(db XODB, loginTime time.Time) ([]*Login, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, login_channel, login_version, login_type, login_ip, login_time, login_machine ` +
		`FROM mj.login ` +
		`WHERE login_time = ?`

	// run query
	XOLog(sqlstr, loginTime)
	q, err := db.Query(sqlstr, loginTime)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Login{}
	for q.Next() {
		l := Login{
			_exists: true,
		}

		// scan
		err = q.Scan(&l.IndexID, &l.PlayerID, &l.LoginChannel, &l.LoginVersion, &l.LoginType, &l.LoginIP, &l.LoginTime, &l.LoginMachine)
		if err != nil {
			return nil, err
		}

		res = append(res, &l)
	}

	return res, nil
}

// LoginsByPlayerID retrieves a row from 'mj.login' as a Login.
//
// Generated from index 'idx_player_id'.
func LoginsByPlayerID(db XODB, playerID int32) ([]*Login, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, login_channel, login_version, login_type, login_ip, login_time, login_machine ` +
		`FROM mj.login ` +
		`WHERE player_id = ?`

	// run query
	XOLog(sqlstr, playerID)
	q, err := db.Query(sqlstr, playerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Login{}
	for q.Next() {
		l := Login{
			_exists: true,
		}

		// scan
		err = q.Scan(&l.IndexID, &l.PlayerID, &l.LoginChannel, &l.LoginVersion, &l.LoginType, &l.LoginIP, &l.LoginTime, &l.LoginMachine)
		if err != nil {
			return nil, err
		}

		res = append(res, &l)
	}

	return res, nil
}

// LoginByIndexID retrieves a row from 'mj.login' as a Login.
//
// Generated from index 'login_index_id_pkey'.
func LoginByIndexID(db XODB, indexID int32) (*Login, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, login_channel, login_version, login_type, login_ip, login_time, login_machine ` +
		`FROM mj.login ` +
		`WHERE index_id = ?`

	// run query
	XOLog(sqlstr, indexID)
	l := Login{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, indexID).Scan(&l.IndexID, &l.PlayerID, &l.LoginChannel, &l.LoginVersion, &l.LoginType, &l.LoginIP, &l.LoginTime, &l.LoginMachine)
	if err != nil {
		return nil, err
	}

	return &l, nil
}
