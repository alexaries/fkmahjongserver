// Package dao contains the types for schema 'mj'.
package dao

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Register represents a row from 'mj.register'.
type Register struct {
	IndexID         int32     `json:"index_id"`         // index_id
	PlayerID        int32     `json:"player_id"`        // player_id
	RegisterChannel int32     `json:"register_channel"` // register_channel
	RegisterVersion int32     `json:"register_version"` // register_version
	RegisterType    int32     `json:"register_type"`    // register_type
	RegisterIP      string    `json:"register_ip"`      // register_ip
	RegisterTime    time.Time `json:"register_time"`    // register_time
	RegisterMachine string    `json:"register_machine"` // register_machine

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Register exists in the database.
func (r *Register) Exists() bool {
	return r._exists
}

// Deleted provides information if the Register has been deleted from the database.
func (r *Register) Deleted() bool {
	return r._deleted
}

// Insert inserts the Register to the database.
func (r *Register) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO mj.register (` +
		`player_id, register_channel, register_version, register_type, register_ip, register_time, register_machine` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, r.PlayerID, r.RegisterChannel, r.RegisterVersion, r.RegisterType, r.RegisterIP, r.RegisterTime, r.RegisterMachine)
	res, err := db.Exec(sqlstr, r.PlayerID, r.RegisterChannel, r.RegisterVersion, r.RegisterType, r.RegisterIP, r.RegisterTime, r.RegisterMachine)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	r.IndexID = int32(id)
	r._exists = true

	return nil
}

// Update updates the Register in the database.
func (r *Register) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mj.register SET ` +
		`player_id = ?, register_channel = ?, register_version = ?, register_type = ?, register_ip = ?, register_time = ?, register_machine = ?` +
		` WHERE index_id = ?`

	// run query
	XOLog(sqlstr, r.PlayerID, r.RegisterChannel, r.RegisterVersion, r.RegisterType, r.RegisterIP, r.RegisterTime, r.RegisterMachine, r.IndexID)
	_, err = db.Exec(sqlstr, r.PlayerID, r.RegisterChannel, r.RegisterVersion, r.RegisterType, r.RegisterIP, r.RegisterTime, r.RegisterMachine, r.IndexID)
	return err
}

// Save saves the Register to the database.
func (r *Register) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Delete deletes the Register from the database.
func (r *Register) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mj.register WHERE index_id = ?`

	// run query
	XOLog(sqlstr, r.IndexID)
	_, err = db.Exec(sqlstr, r.IndexID)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// RegistersByPlayerID retrieves a row from 'mj.register' as a Register.
//
// Generated from index 'idx_player_id'.
func RegistersByPlayerID(db XODB, playerID int32) ([]*Register, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, register_channel, register_version, register_type, register_ip, register_time, register_machine ` +
		`FROM mj.register ` +
		`WHERE player_id = ?`

	// run query
	XOLog(sqlstr, playerID)
	q, err := db.Query(sqlstr, playerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Register{}
	for q.Next() {
		r := Register{
			_exists: true,
		}

		// scan
		err = q.Scan(&r.IndexID, &r.PlayerID, &r.RegisterChannel, &r.RegisterVersion, &r.RegisterType, &r.RegisterIP, &r.RegisterTime, &r.RegisterMachine)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}

// RegistersByRegisterChannel retrieves a row from 'mj.register' as a Register.
//
// Generated from index 'idx_register_channel'.
func RegistersByRegisterChannel(db XODB, registerChannel int32) ([]*Register, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, register_channel, register_version, register_type, register_ip, register_time, register_machine ` +
		`FROM mj.register ` +
		`WHERE register_channel = ?`

	// run query
	XOLog(sqlstr, registerChannel)
	q, err := db.Query(sqlstr, registerChannel)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Register{}
	for q.Next() {
		r := Register{
			_exists: true,
		}

		// scan
		err = q.Scan(&r.IndexID, &r.PlayerID, &r.RegisterChannel, &r.RegisterVersion, &r.RegisterType, &r.RegisterIP, &r.RegisterTime, &r.RegisterMachine)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}

// RegistersByRegisterChannelRegisterVersion retrieves a row from 'mj.register' as a Register.
//
// Generated from index 'idx_register_channel_register_version'.
func RegistersByRegisterChannelRegisterVersion(db XODB, registerChannel int32, registerVersion int32) ([]*Register, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, register_channel, register_version, register_type, register_ip, register_time, register_machine ` +
		`FROM mj.register ` +
		`WHERE register_channel = ? AND register_version = ?`

	// run query
	XOLog(sqlstr, registerChannel, registerVersion)
	q, err := db.Query(sqlstr, registerChannel, registerVersion)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Register{}
	for q.Next() {
		r := Register{
			_exists: true,
		}

		// scan
		err = q.Scan(&r.IndexID, &r.PlayerID, &r.RegisterChannel, &r.RegisterVersion, &r.RegisterType, &r.RegisterIP, &r.RegisterTime, &r.RegisterMachine)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}

// RegistersByRegisterTime retrieves a row from 'mj.register' as a Register.
//
// Generated from index 'idx_register_time'.
func RegistersByRegisterTime(db XODB, registerTime time.Time) ([]*Register, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, register_channel, register_version, register_type, register_ip, register_time, register_machine ` +
		`FROM mj.register ` +
		`WHERE register_time = ?`

	// run query
	XOLog(sqlstr, registerTime)
	q, err := db.Query(sqlstr, registerTime)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Register{}
	for q.Next() {
		r := Register{
			_exists: true,
		}

		// scan
		err = q.Scan(&r.IndexID, &r.PlayerID, &r.RegisterChannel, &r.RegisterVersion, &r.RegisterType, &r.RegisterIP, &r.RegisterTime, &r.RegisterMachine)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}

// RegisterByIndexID retrieves a row from 'mj.register' as a Register.
//
// Generated from index 'register_index_id_pkey'.
func RegisterByIndexID(db XODB, indexID int32) (*Register, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, register_channel, register_version, register_type, register_ip, register_time, register_machine ` +
		`FROM mj.register ` +
		`WHERE index_id = ?`

	// run query
	XOLog(sqlstr, indexID)
	r := Register{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, indexID).Scan(&r.IndexID, &r.PlayerID, &r.RegisterChannel, &r.RegisterVersion, &r.RegisterType, &r.RegisterIP, &r.RegisterTime, &r.RegisterMachine)
	if err != nil {
		return nil, err
	}

	return &r, nil
}
