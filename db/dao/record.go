// Package dao contains the types for schema 'mj'.
package dao

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Record represents a row from 'mj.record'.
type Record struct {
	RecordID   int32     `json:"record_id"`   // record_id
	CreateID   int32     `json:"create_id"`   // create_id
	CreateTime time.Time `json:"create_time"` // create_time
	RoomID     int32     `json:"room_id"`     // room_id
	MjType     int32     `json:"mj_type"`     // mj_type
	TotalRound int32     `json:"total_round"` // total_round
	StartTime  time.Time `json:"start_time"`  // start_time
	CurRound   int32     `json:"cur_round"`   // cur_round
	EastID     int32     `json:"east_id"`     // east_id
	SouthID    int32     `json:"south_id"`    // south_id
	WestID     int32     `json:"west_id"`     // west_id
	NorthID    int32     `json:"north_id"`    // north_id
	EastScore  int32     `json:"east_score"`  // east_score
	SouthScore int32     `json:"south_score"` // south_score
	WestScore  int32     `json:"west_score"`  // west_score
	NorthScore int32     `json:"north_score"` // north_score

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Record exists in the database.
func (r *Record) Exists() bool {
	return r._exists
}

// Deleted provides information if the Record has been deleted from the database.
func (r *Record) Deleted() bool {
	return r._deleted
}

// Insert inserts the Record to the database.
func (r *Record) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO mj.record (` +
		`create_id, create_time, room_id, mj_type, total_round, start_time, cur_round, east_id, south_id, west_id, north_id, east_score, south_score, west_score, north_score` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, r.CreateID, r.CreateTime, r.RoomID, r.MjType, r.TotalRound, r.StartTime, r.CurRound, r.EastID, r.SouthID, r.WestID, r.NorthID, r.EastScore, r.SouthScore, r.WestScore, r.NorthScore)
	res, err := db.Exec(sqlstr, r.CreateID, r.CreateTime, r.RoomID, r.MjType, r.TotalRound, r.StartTime, r.CurRound, r.EastID, r.SouthID, r.WestID, r.NorthID, r.EastScore, r.SouthScore, r.WestScore, r.NorthScore)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	r.RecordID = int32(id)
	r._exists = true

	return nil
}

// Update updates the Record in the database.
func (r *Record) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mj.record SET ` +
		`create_id = ?, create_time = ?, room_id = ?, mj_type = ?, total_round = ?, start_time = ?, cur_round = ?, east_id = ?, south_id = ?, west_id = ?, north_id = ?, east_score = ?, south_score = ?, west_score = ?, north_score = ?` +
		` WHERE record_id = ?`

	// run query
	XOLog(sqlstr, r.CreateID, r.CreateTime, r.RoomID, r.MjType, r.TotalRound, r.StartTime, r.CurRound, r.EastID, r.SouthID, r.WestID, r.NorthID, r.EastScore, r.SouthScore, r.WestScore, r.NorthScore, r.RecordID)
	_, err = db.Exec(sqlstr, r.CreateID, r.CreateTime, r.RoomID, r.MjType, r.TotalRound, r.StartTime, r.CurRound, r.EastID, r.SouthID, r.WestID, r.NorthID, r.EastScore, r.SouthScore, r.WestScore, r.NorthScore, r.RecordID)
	return err
}

// Save saves the Record to the database.
func (r *Record) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Delete deletes the Record from the database.
func (r *Record) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mj.record WHERE record_id = ?`

	// run query
	XOLog(sqlstr, r.RecordID)
	_, err = db.Exec(sqlstr, r.RecordID)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// RecordsByCreateID retrieves a row from 'mj.record' as a Record.
//
// Generated from index 'idx_create_id'.
func RecordsByCreateID(db XODB, createID int32) ([]*Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`record_id, create_id, create_time, room_id, mj_type, total_round, start_time, cur_round, east_id, south_id, west_id, north_id, east_score, south_score, west_score, north_score ` +
		`FROM mj.record ` +
		`WHERE create_id = ?`

	// run query
	XOLog(sqlstr, createID)
	q, err := db.Query(sqlstr, createID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Record{}
	for q.Next() {
		r := Record{
			_exists: true,
		}

		// scan
		err = q.Scan(&r.RecordID, &r.CreateID, &r.CreateTime, &r.RoomID, &r.MjType, &r.TotalRound, &r.StartTime, &r.CurRound, &r.EastID, &r.SouthID, &r.WestID, &r.NorthID, &r.EastScore, &r.SouthScore, &r.WestScore, &r.NorthScore)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}

// RecordsByCreateIDCreateTime retrieves a row from 'mj.record' as a Record.
//
// Generated from index 'idx_create_id_create_time'.
func RecordsByCreateIDCreateTime(db XODB, createID int32, createTime time.Time) ([]*Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`record_id, create_id, create_time, room_id, mj_type, total_round, start_time, cur_round, east_id, south_id, west_id, north_id, east_score, south_score, west_score, north_score ` +
		`FROM mj.record ` +
		`WHERE create_id = ? AND create_time = ?`

	// run query
	XOLog(sqlstr, createID, createTime)
	q, err := db.Query(sqlstr, createID, createTime)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Record{}
	for q.Next() {
		r := Record{
			_exists: true,
		}

		// scan
		err = q.Scan(&r.RecordID, &r.CreateID, &r.CreateTime, &r.RoomID, &r.MjType, &r.TotalRound, &r.StartTime, &r.CurRound, &r.EastID, &r.SouthID, &r.WestID, &r.NorthID, &r.EastScore, &r.SouthScore, &r.WestScore, &r.NorthScore)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}

// RecordsByCreateTime retrieves a row from 'mj.record' as a Record.
//
// Generated from index 'idx_create_time'.
func RecordsByCreateTime(db XODB, createTime time.Time) ([]*Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`record_id, create_id, create_time, room_id, mj_type, total_round, start_time, cur_round, east_id, south_id, west_id, north_id, east_score, south_score, west_score, north_score ` +
		`FROM mj.record ` +
		`WHERE create_time = ?`

	// run query
	XOLog(sqlstr, createTime)
	q, err := db.Query(sqlstr, createTime)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Record{}
	for q.Next() {
		r := Record{
			_exists: true,
		}

		// scan
		err = q.Scan(&r.RecordID, &r.CreateID, &r.CreateTime, &r.RoomID, &r.MjType, &r.TotalRound, &r.StartTime, &r.CurRound, &r.EastID, &r.SouthID, &r.WestID, &r.NorthID, &r.EastScore, &r.SouthScore, &r.WestScore, &r.NorthScore)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}

// RecordByRecordID retrieves a row from 'mj.record' as a Record.
//
// Generated from index 'record_record_id_pkey'.
func RecordByRecordID(db XODB, recordID int32) (*Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`record_id, create_id, create_time, room_id, mj_type, total_round, start_time, cur_round, east_id, south_id, west_id, north_id, east_score, south_score, west_score, north_score ` +
		`FROM mj.record ` +
		`WHERE record_id = ?`

	// run query
	XOLog(sqlstr, recordID)
	r := Record{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, recordID).Scan(&r.RecordID, &r.CreateID, &r.CreateTime, &r.RoomID, &r.MjType, &r.TotalRound, &r.StartTime, &r.CurRound, &r.EastID, &r.SouthID, &r.WestID, &r.NorthID, &r.EastScore, &r.SouthScore, &r.WestScore, &r.NorthScore)
	if err != nil {
		return nil, err
	}

	return &r, nil
}
