// Package dao contains the types for schema 'mj'.
package dao

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// Permission represents a row from 'mj.permission'.
type Permission struct {
	IndexID     int32  `json:"index_id"`     // index_id
	PmsnType    string `json:"pmsn_type"`    // pmsn_type
	PmsnContent string `json:"pmsn_content"` // pmsn_content
	Comment     string `json:"comment"`      // comment

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Permission exists in the database.
func (p *Permission) Exists() bool {
	return p._exists
}

// Deleted provides information if the Permission has been deleted from the database.
func (p *Permission) Deleted() bool {
	return p._deleted
}

// Insert inserts the Permission to the database.
func (p *Permission) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO mj.permission (` +
		`pmsn_type, pmsn_content, comment` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.PmsnType, p.PmsnContent, p.Comment)
	res, err := db.Exec(sqlstr, p.PmsnType, p.PmsnContent, p.Comment)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.IndexID = int32(id)
	p._exists = true

	return nil
}

// Update updates the Permission in the database.
func (p *Permission) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mj.permission SET ` +
		`pmsn_type = ?, pmsn_content = ?, comment = ?` +
		` WHERE index_id = ?`

	// run query
	XOLog(sqlstr, p.PmsnType, p.PmsnContent, p.Comment, p.IndexID)
	_, err = db.Exec(sqlstr, p.PmsnType, p.PmsnContent, p.Comment, p.IndexID)
	return err
}

// Save saves the Permission to the database.
func (p *Permission) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Delete deletes the Permission from the database.
func (p *Permission) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mj.permission WHERE index_id = ?`

	// run query
	XOLog(sqlstr, p.IndexID)
	_, err = db.Exec(sqlstr, p.IndexID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PermissionsByPmsnType retrieves a row from 'mj.permission' as a Permission.
//
// Generated from index 'idx_pmsn_types'.
func PermissionsByPmsnType(db XODB, pmsnType string) ([]*Permission, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, pmsn_type, pmsn_content, comment ` +
		`FROM mj.permission ` +
		`WHERE pmsn_type = ?`

	// run query
	XOLog(sqlstr, pmsnType)
	q, err := db.Query(sqlstr, pmsnType)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Permission{}
	for q.Next() {
		p := Permission{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.IndexID, &p.PmsnType, &p.PmsnContent, &p.Comment)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PermissionByIndexID retrieves a row from 'mj.permission' as a Permission.
//
// Generated from index 'permission_index_id_pkey'.
func PermissionByIndexID(db XODB, indexID int32) (*Permission, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, pmsn_type, pmsn_content, comment ` +
		`FROM mj.permission ` +
		`WHERE index_id = ?`

	// run query
	XOLog(sqlstr, indexID)
	p := Permission{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, indexID).Scan(&p.IndexID, &p.PmsnType, &p.PmsnContent, &p.Comment)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// PermissionByPmsnTypePmsnContent retrieves a row from 'mj.permission' as a Permission.
//
// Generated from index 'uidx_pmsn_type_content'.
func PermissionByPmsnTypePmsnContent(db XODB, pmsnType string, pmsnContent string) (*Permission, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, pmsn_type, pmsn_content, comment ` +
		`FROM mj.permission ` +
		`WHERE pmsn_type = ? AND pmsn_content = ?`

	// run query
	XOLog(sqlstr, pmsnType, pmsnContent)
	p := Permission{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, pmsnType, pmsnContent).Scan(&p.IndexID, &p.PmsnType, &p.PmsnContent, &p.Comment)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
