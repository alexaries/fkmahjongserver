// Package dao contains the types for schema 'mj'.
package dao

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Feedback represents a row from 'mj.feedback'.
type Feedback struct {
	IndexID    int32     `json:"index_id"`    // index_id
	PlayerID   int32     `json:"player_id"`   // player_id
	Channel    int32     `json:"channel"`     // channel
	Version    int32     `json:"version"`     // version
	ImgURL     string    `json:"img_url"`     // img_url
	Text       string    `json:"text"`        // text
	Status     int32     `json:"status"`      // status
	AddTime    time.Time `json:"add_time"`    // add_time
	ReviseTime time.Time `json:"revise_time"` // revise_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Feedback exists in the database.
func (f *Feedback) Exists() bool {
	return f._exists
}

// Deleted provides information if the Feedback has been deleted from the database.
func (f *Feedback) Deleted() bool {
	return f._deleted
}

// Insert inserts the Feedback to the database.
func (f *Feedback) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO mj.feedback (` +
		`player_id, channel, version, img_url, text, status, add_time, revise_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, f.PlayerID, f.Channel, f.Version, f.ImgURL, f.Text, f.Status, f.AddTime, f.ReviseTime)
	res, err := db.Exec(sqlstr, f.PlayerID, f.Channel, f.Version, f.ImgURL, f.Text, f.Status, f.AddTime, f.ReviseTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	f.IndexID = int32(id)
	f._exists = true

	return nil
}

// Update updates the Feedback in the database.
func (f *Feedback) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if f._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mj.feedback SET ` +
		`player_id = ?, channel = ?, version = ?, img_url = ?, text = ?, status = ?, add_time = ?, revise_time = ?` +
		` WHERE index_id = ?`

	// run query
	XOLog(sqlstr, f.PlayerID, f.Channel, f.Version, f.ImgURL, f.Text, f.Status, f.AddTime, f.ReviseTime, f.IndexID)
	_, err = db.Exec(sqlstr, f.PlayerID, f.Channel, f.Version, f.ImgURL, f.Text, f.Status, f.AddTime, f.ReviseTime, f.IndexID)
	return err
}

// Save saves the Feedback to the database.
func (f *Feedback) Save(db XODB) error {
	if f.Exists() {
		return f.Update(db)
	}

	return f.Insert(db)
}

// Delete deletes the Feedback from the database.
func (f *Feedback) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return nil
	}

	// if deleted, bail
	if f._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mj.feedback WHERE index_id = ?`

	// run query
	XOLog(sqlstr, f.IndexID)
	_, err = db.Exec(sqlstr, f.IndexID)
	if err != nil {
		return err
	}

	// set deleted
	f._deleted = true

	return nil
}

// FeedbackByIndexID retrieves a row from 'mj.feedback' as a Feedback.
//
// Generated from index 'feedback_index_id_pkey'.
func FeedbackByIndexID(db XODB, indexID int32) (*Feedback, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, channel, version, img_url, text, status, add_time, revise_time ` +
		`FROM mj.feedback ` +
		`WHERE index_id = ?`

	// run query
	XOLog(sqlstr, indexID)
	f := Feedback{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, indexID).Scan(&f.IndexID, &f.PlayerID, &f.Channel, &f.Version, &f.ImgURL, &f.Text, &f.Status, &f.AddTime, &f.ReviseTime)
	if err != nil {
		return nil, err
	}

	return &f, nil
}

// FeedbacksByAddTime retrieves a row from 'mj.feedback' as a Feedback.
//
// Generated from index 'idx_add_time'.
func FeedbacksByAddTime(db XODB, addTime time.Time) ([]*Feedback, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, channel, version, img_url, text, status, add_time, revise_time ` +
		`FROM mj.feedback ` +
		`WHERE add_time = ?`

	// run query
	XOLog(sqlstr, addTime)
	q, err := db.Query(sqlstr, addTime)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Feedback{}
	for q.Next() {
		f := Feedback{
			_exists: true,
		}

		// scan
		err = q.Scan(&f.IndexID, &f.PlayerID, &f.Channel, &f.Version, &f.ImgURL, &f.Text, &f.Status, &f.AddTime, &f.ReviseTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &f)
	}

	return res, nil
}

// FeedbacksByChannel retrieves a row from 'mj.feedback' as a Feedback.
//
// Generated from index 'idx_channel'.
func FeedbacksByChannel(db XODB, channel int32) ([]*Feedback, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, channel, version, img_url, text, status, add_time, revise_time ` +
		`FROM mj.feedback ` +
		`WHERE channel = ?`

	// run query
	XOLog(sqlstr, channel)
	q, err := db.Query(sqlstr, channel)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Feedback{}
	for q.Next() {
		f := Feedback{
			_exists: true,
		}

		// scan
		err = q.Scan(&f.IndexID, &f.PlayerID, &f.Channel, &f.Version, &f.ImgURL, &f.Text, &f.Status, &f.AddTime, &f.ReviseTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &f)
	}

	return res, nil
}

// FeedbacksByChannelVersion retrieves a row from 'mj.feedback' as a Feedback.
//
// Generated from index 'idx_channel_version'.
func FeedbacksByChannelVersion(db XODB, channel int32, version int32) ([]*Feedback, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, channel, version, img_url, text, status, add_time, revise_time ` +
		`FROM mj.feedback ` +
		`WHERE channel = ? AND version = ?`

	// run query
	XOLog(sqlstr, channel, version)
	q, err := db.Query(sqlstr, channel, version)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Feedback{}
	for q.Next() {
		f := Feedback{
			_exists: true,
		}

		// scan
		err = q.Scan(&f.IndexID, &f.PlayerID, &f.Channel, &f.Version, &f.ImgURL, &f.Text, &f.Status, &f.AddTime, &f.ReviseTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &f)
	}

	return res, nil
}

// FeedbacksByPlayerID retrieves a row from 'mj.feedback' as a Feedback.
//
// Generated from index 'idx_player_id'.
func FeedbacksByPlayerID(db XODB, playerID int32) ([]*Feedback, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, channel, version, img_url, text, status, add_time, revise_time ` +
		`FROM mj.feedback ` +
		`WHERE player_id = ?`

	// run query
	XOLog(sqlstr, playerID)
	q, err := db.Query(sqlstr, playerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Feedback{}
	for q.Next() {
		f := Feedback{
			_exists: true,
		}

		// scan
		err = q.Scan(&f.IndexID, &f.PlayerID, &f.Channel, &f.Version, &f.ImgURL, &f.Text, &f.Status, &f.AddTime, &f.ReviseTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &f)
	}

	return res, nil
}

// FeedbacksByReviseTime retrieves a row from 'mj.feedback' as a Feedback.
//
// Generated from index 'idx_revise_time'.
func FeedbacksByReviseTime(db XODB, reviseTime time.Time) ([]*Feedback, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, channel, version, img_url, text, status, add_time, revise_time ` +
		`FROM mj.feedback ` +
		`WHERE revise_time = ?`

	// run query
	XOLog(sqlstr, reviseTime)
	q, err := db.Query(sqlstr, reviseTime)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Feedback{}
	for q.Next() {
		f := Feedback{
			_exists: true,
		}

		// scan
		err = q.Scan(&f.IndexID, &f.PlayerID, &f.Channel, &f.Version, &f.ImgURL, &f.Text, &f.Status, &f.AddTime, &f.ReviseTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &f)
	}

	return res, nil
}

// FeedbacksByStatus retrieves a row from 'mj.feedback' as a Feedback.
//
// Generated from index 'idx_status'.
func FeedbacksByStatus(db XODB, status int32) ([]*Feedback, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, player_id, channel, version, img_url, text, status, add_time, revise_time ` +
		`FROM mj.feedback ` +
		`WHERE status = ?`

	// run query
	XOLog(sqlstr, status)
	q, err := db.Query(sqlstr, status)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Feedback{}
	for q.Next() {
		f := Feedback{
			_exists: true,
		}

		// scan
		err = q.Scan(&f.IndexID, &f.PlayerID, &f.Channel, &f.Version, &f.ImgURL, &f.Text, &f.Status, &f.AddTime, &f.ReviseTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &f)
	}

	return res, nil
}
