// Package dao contains the types for schema 'mj'.
package dao

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// Account represents a row from 'mj.account'.
type Account struct {
	IndexID  int32  `json:"index_id"` // index_id
	Email    string `json:"email"`    // email
	Password string `json:"password"` // password
	Role     string `json:"role"`     // role

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Account exists in the database.
func (a *Account) Exists() bool {
	return a._exists
}

// Deleted provides information if the Account has been deleted from the database.
func (a *Account) Deleted() bool {
	return a._deleted
}

// Insert inserts the Account to the database.
func (a *Account) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO mj.account (` +
		`email, password, role` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, a.Email, a.Password, a.Role)
	res, err := db.Exec(sqlstr, a.Email, a.Password, a.Role)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	a.IndexID = int32(id)
	a._exists = true

	return nil
}

// Update updates the Account in the database.
func (a *Account) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mj.account SET ` +
		`email = ?, password = ?, role = ?` +
		` WHERE index_id = ?`

	// run query
	XOLog(sqlstr, a.Email, a.Password, a.Role, a.IndexID)
	_, err = db.Exec(sqlstr, a.Email, a.Password, a.Role, a.IndexID)
	return err
}

// Save saves the Account to the database.
func (a *Account) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Delete deletes the Account from the database.
func (a *Account) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mj.account WHERE index_id = ?`

	// run query
	XOLog(sqlstr, a.IndexID)
	_, err = db.Exec(sqlstr, a.IndexID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// AccountByIndexID retrieves a row from 'mj.account' as a Account.
//
// Generated from index 'account_index_id_pkey'.
func AccountByIndexID(db XODB, indexID int32) (*Account, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, email, password, role ` +
		`FROM mj.account ` +
		`WHERE index_id = ?`

	// run query
	XOLog(sqlstr, indexID)
	a := Account{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, indexID).Scan(&a.IndexID, &a.Email, &a.Password, &a.Role)
	if err != nil {
		return nil, err
	}

	return &a, nil
}

// AccountByEmail retrieves a row from 'mj.account' as a Account.
//
// Generated from index 'uidx_email'.
func AccountByEmail(db XODB, email string) (*Account, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, email, password, role ` +
		`FROM mj.account ` +
		`WHERE email = ?`

	// run query
	XOLog(sqlstr, email)
	a := Account{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&a.IndexID, &a.Email, &a.Password, &a.Role)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
