// Package dao contains the types for schema 'mj'.
package dao

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// Cost represents a row from 'mj.cost'.
type Cost struct {
	IndexID int32  `json:"index_id"` // index_id
	MjType  int32  `json:"mj_type"`  // mj_type
	MjDesc  string `json:"mj_desc"`  // mj_desc
	Rounds  int32  `json:"rounds"`   // rounds
	Cards   int32  `json:"cards"`    // cards
	Coins   int32  `json:"coins"`    // coins

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Cost exists in the database.
func (c *Cost) Exists() bool {
	return c._exists
}

// Deleted provides information if the Cost has been deleted from the database.
func (c *Cost) Deleted() bool {
	return c._deleted
}

// Insert inserts the Cost to the database.
func (c *Cost) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO mj.cost (` +
		`mj_type, mj_desc, rounds, cards, coins` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.MjType, c.MjDesc, c.Rounds, c.Cards, c.Coins)
	res, err := db.Exec(sqlstr, c.MjType, c.MjDesc, c.Rounds, c.Cards, c.Coins)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	c.IndexID = int32(id)
	c._exists = true

	return nil
}

// Update updates the Cost in the database.
func (c *Cost) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mj.cost SET ` +
		`mj_type = ?, mj_desc = ?, rounds = ?, cards = ?, coins = ?` +
		` WHERE index_id = ?`

	// run query
	XOLog(sqlstr, c.MjType, c.MjDesc, c.Rounds, c.Cards, c.Coins, c.IndexID)
	_, err = db.Exec(sqlstr, c.MjType, c.MjDesc, c.Rounds, c.Cards, c.Coins, c.IndexID)
	return err
}

// Save saves the Cost to the database.
func (c *Cost) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Delete deletes the Cost from the database.
func (c *Cost) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mj.cost WHERE index_id = ?`

	// run query
	XOLog(sqlstr, c.IndexID)
	_, err = db.Exec(sqlstr, c.IndexID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CostByIndexID retrieves a row from 'mj.cost' as a Cost.
//
// Generated from index 'cost_index_id_pkey'.
func CostByIndexID(db XODB, indexID int32) (*Cost, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, mj_type, mj_desc, rounds, cards, coins ` +
		`FROM mj.cost ` +
		`WHERE index_id = ?`

	// run query
	XOLog(sqlstr, indexID)
	c := Cost{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, indexID).Scan(&c.IndexID, &c.MjType, &c.MjDesc, &c.Rounds, &c.Cards, &c.Coins)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// CostsByMjType retrieves a row from 'mj.cost' as a Cost.
//
// Generated from index 'idx_mj_type'.
func CostsByMjType(db XODB, mjType int32) ([]*Cost, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, mj_type, mj_desc, rounds, cards, coins ` +
		`FROM mj.cost ` +
		`WHERE mj_type = ?`

	// run query
	XOLog(sqlstr, mjType)
	q, err := db.Query(sqlstr, mjType)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Cost{}
	for q.Next() {
		c := Cost{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.IndexID, &c.MjType, &c.MjDesc, &c.Rounds, &c.Cards, &c.Coins)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// CostByMjTypeRounds retrieves a row from 'mj.cost' as a Cost.
//
// Generated from index 'uidx_mj_type_rounds'.
func CostByMjTypeRounds(db XODB, mjType int32, rounds int32) (*Cost, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, mj_type, mj_desc, rounds, cards, coins ` +
		`FROM mj.cost ` +
		`WHERE mj_type = ? AND rounds = ?`

	// run query
	XOLog(sqlstr, mjType, rounds)
	c := Cost{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, mjType, rounds).Scan(&c.IndexID, &c.MjType, &c.MjDesc, &c.Rounds, &c.Cards, &c.Coins)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
