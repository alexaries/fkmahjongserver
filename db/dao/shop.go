// Package dao contains the types for schema 'mj'.
package dao

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// Shop represents a row from 'mj.shop'.
type Shop struct {
	IndexID    int32  `json:"index_id"`    // index_id
	Channel    int32  `json:"channel"`     // channel
	PayType    int32  `json:"pay_type"`    // pay_type
	GemID      int32  `json:"gem_id"`      // gem_id
	WaresID    string `json:"wares_id"`    // wares_id
	WaresName  string `json:"wares_name"`  // wares_name
	GoodsCount int32  `json:"goods_count"` // goods_count
	ExtraCount int32  `json:"extra_count"` // extra_count
	Price      int32  `json:"price"`       // price
	IconURL    string `json:"icon_url"`    // icon_url

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Shop exists in the database.
func (s *Shop) Exists() bool {
	return s._exists
}

// Deleted provides information if the Shop has been deleted from the database.
func (s *Shop) Deleted() bool {
	return s._deleted
}

// Insert inserts the Shop to the database.
func (s *Shop) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO mj.shop (` +
		`channel, pay_type, gem_id, wares_id, wares_name, goods_count, extra_count, price, icon_url` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.Channel, s.PayType, s.GemID, s.WaresID, s.WaresName, s.GoodsCount, s.ExtraCount, s.Price, s.IconURL)
	res, err := db.Exec(sqlstr, s.Channel, s.PayType, s.GemID, s.WaresID, s.WaresName, s.GoodsCount, s.ExtraCount, s.Price, s.IconURL)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.IndexID = int32(id)
	s._exists = true

	return nil
}

// Update updates the Shop in the database.
func (s *Shop) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mj.shop SET ` +
		`channel = ?, pay_type = ?, gem_id = ?, wares_id = ?, wares_name = ?, goods_count = ?, extra_count = ?, price = ?, icon_url = ?` +
		` WHERE index_id = ?`

	// run query
	XOLog(sqlstr, s.Channel, s.PayType, s.GemID, s.WaresID, s.WaresName, s.GoodsCount, s.ExtraCount, s.Price, s.IconURL, s.IndexID)
	_, err = db.Exec(sqlstr, s.Channel, s.PayType, s.GemID, s.WaresID, s.WaresName, s.GoodsCount, s.ExtraCount, s.Price, s.IconURL, s.IndexID)
	return err
}

// Save saves the Shop to the database.
func (s *Shop) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Delete deletes the Shop from the database.
func (s *Shop) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mj.shop WHERE index_id = ?`

	// run query
	XOLog(sqlstr, s.IndexID)
	_, err = db.Exec(sqlstr, s.IndexID)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// ShopsByChannel retrieves a row from 'mj.shop' as a Shop.
//
// Generated from index 'idx_channel'.
func ShopsByChannel(db XODB, channel int32) ([]*Shop, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, channel, pay_type, gem_id, wares_id, wares_name, goods_count, extra_count, price, icon_url ` +
		`FROM mj.shop ` +
		`WHERE channel = ?`

	// run query
	XOLog(sqlstr, channel)
	q, err := db.Query(sqlstr, channel)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Shop{}
	for q.Next() {
		s := Shop{
			_exists: true,
		}

		// scan
		err = q.Scan(&s.IndexID, &s.Channel, &s.PayType, &s.GemID, &s.WaresID, &s.WaresName, &s.GoodsCount, &s.ExtraCount, &s.Price, &s.IconURL)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}

// ShopByIndexID retrieves a row from 'mj.shop' as a Shop.
//
// Generated from index 'shop_index_id_pkey'.
func ShopByIndexID(db XODB, indexID int32) (*Shop, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, channel, pay_type, gem_id, wares_id, wares_name, goods_count, extra_count, price, icon_url ` +
		`FROM mj.shop ` +
		`WHERE index_id = ?`

	// run query
	XOLog(sqlstr, indexID)
	s := Shop{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, indexID).Scan(&s.IndexID, &s.Channel, &s.PayType, &s.GemID, &s.WaresID, &s.WaresName, &s.GoodsCount, &s.ExtraCount, &s.Price, &s.IconURL)
	if err != nil {
		return nil, err
	}

	return &s, nil
}

// ShopsByChannelGemID retrieves a row from 'mj.shop' as a Shop.
//
// Generated from index 'uidx_channel_gem_id'.
func ShopsByChannelGemID(db XODB, channel int32, gemID int32) ([]*Shop, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, channel, pay_type, gem_id, wares_id, wares_name, goods_count, extra_count, price, icon_url ` +
		`FROM mj.shop ` +
		`WHERE channel = ? AND gem_id = ?`

	// run query
	XOLog(sqlstr, channel, gemID)
	q, err := db.Query(sqlstr, channel, gemID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Shop{}
	for q.Next() {
		s := Shop{
			_exists: true,
		}

		// scan
		err = q.Scan(&s.IndexID, &s.Channel, &s.PayType, &s.GemID, &s.WaresID, &s.WaresName, &s.GoodsCount, &s.ExtraCount, &s.Price, &s.IconURL)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}

// ShopByChannelWaresID retrieves a row from 'mj.shop' as a Shop.
//
// Generated from index 'uidx_channel_wares_id'.
func ShopByChannelWaresID(db XODB, channel int32, waresID string) (*Shop, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, channel, pay_type, gem_id, wares_id, wares_name, goods_count, extra_count, price, icon_url ` +
		`FROM mj.shop ` +
		`WHERE channel = ? AND wares_id = ?`

	// run query
	XOLog(sqlstr, channel, waresID)
	s := Shop{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, channel, waresID).Scan(&s.IndexID, &s.Channel, &s.PayType, &s.GemID, &s.WaresID, &s.WaresName, &s.GoodsCount, &s.ExtraCount, &s.Price, &s.IconURL)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
