// Package dao contains the types for schema 'mj'.
package dao

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// AgBill represents a row from 'mj.ag_bill'.
type AgBill struct {
	IndexID         int32     `json:"index_id"`          // index_id
	AgID            int32     `json:"ag_id"`             // ag_id
	LastWeekLeft    int32     `json:"last_week_left"`    // last_week_left
	LastWeekBalance int32     `json:"last_week_balance"` // last_week_balance
	LastWeekDakuan  int32     `json:"last_week_dakuan"`  // last_week_dakuan
	LowAgentsAward  int32     `json:"low_agents_award"`  // low_agents_award
	CardsAward      int32     `json:"cards_award"`       // cards_award
	FirstBuyAward   int32     `json:"first_buy_award"`   // first_buy_award
	Hongbao         int32     `json:"hongbao"`           // hongbao
	Delflag         int32     `json:"delflag"`           // delflag
	StartTime       time.Time `json:"start_time"`        // start_time
	EndTime         time.Time `json:"end_time"`          // end_time
	CreateTime      time.Time `json:"create_time"`       // create_time
	UpdateTime      time.Time `json:"update_time"`       // update_time

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AgBill exists in the database.
func (ab *AgBill) Exists() bool {
	return ab._exists
}

// Deleted provides information if the AgBill has been deleted from the database.
func (ab *AgBill) Deleted() bool {
	return ab._deleted
}

// Insert inserts the AgBill to the database.
func (ab *AgBill) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ab._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO mj.ag_bill (` +
		`ag_id, last_week_left, last_week_balance, last_week_dakuan, low_agents_award, cards_award, first_buy_award, hongbao, delflag, start_time, end_time, create_time, update_time` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ab.AgID, ab.LastWeekLeft, ab.LastWeekBalance, ab.LastWeekDakuan, ab.LowAgentsAward, ab.CardsAward, ab.FirstBuyAward, ab.Hongbao, ab.Delflag, ab.StartTime, ab.EndTime, ab.CreateTime, ab.UpdateTime)
	res, err := db.Exec(sqlstr, ab.AgID, ab.LastWeekLeft, ab.LastWeekBalance, ab.LastWeekDakuan, ab.LowAgentsAward, ab.CardsAward, ab.FirstBuyAward, ab.Hongbao, ab.Delflag, ab.StartTime, ab.EndTime, ab.CreateTime, ab.UpdateTime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ab.IndexID = int32(id)
	ab._exists = true

	return nil
}

// Update updates the AgBill in the database.
func (ab *AgBill) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ab._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ab._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mj.ag_bill SET ` +
		`ag_id = ?, last_week_left = ?, last_week_balance = ?, last_week_dakuan = ?, low_agents_award = ?, cards_award = ?, first_buy_award = ?, hongbao = ?, delflag = ?, start_time = ?, end_time = ?, create_time = ?, update_time = ?` +
		` WHERE index_id = ?`

	// run query
	XOLog(sqlstr, ab.AgID, ab.LastWeekLeft, ab.LastWeekBalance, ab.LastWeekDakuan, ab.LowAgentsAward, ab.CardsAward, ab.FirstBuyAward, ab.Hongbao, ab.Delflag, ab.StartTime, ab.EndTime, ab.CreateTime, ab.UpdateTime, ab.IndexID)
	_, err = db.Exec(sqlstr, ab.AgID, ab.LastWeekLeft, ab.LastWeekBalance, ab.LastWeekDakuan, ab.LowAgentsAward, ab.CardsAward, ab.FirstBuyAward, ab.Hongbao, ab.Delflag, ab.StartTime, ab.EndTime, ab.CreateTime, ab.UpdateTime, ab.IndexID)
	return err
}

// Save saves the AgBill to the database.
func (ab *AgBill) Save(db XODB) error {
	if ab.Exists() {
		return ab.Update(db)
	}

	return ab.Insert(db)
}

// Delete deletes the AgBill from the database.
func (ab *AgBill) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ab._exists {
		return nil
	}

	// if deleted, bail
	if ab._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mj.ag_bill WHERE index_id = ?`

	// run query
	XOLog(sqlstr, ab.IndexID)
	_, err = db.Exec(sqlstr, ab.IndexID)
	if err != nil {
		return err
	}

	// set deleted
	ab._deleted = true

	return nil
}

// AgBillByIndexID retrieves a row from 'mj.ag_bill' as a AgBill.
//
// Generated from index 'ag_bill_index_id_pkey'.
func AgBillByIndexID(db XODB, indexID int32) (*AgBill, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, ag_id, last_week_left, last_week_balance, last_week_dakuan, low_agents_award, cards_award, first_buy_award, hongbao, delflag, start_time, end_time, create_time, update_time ` +
		`FROM mj.ag_bill ` +
		`WHERE index_id = ?`

	// run query
	XOLog(sqlstr, indexID)
	ab := AgBill{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, indexID).Scan(&ab.IndexID, &ab.AgID, &ab.LastWeekLeft, &ab.LastWeekBalance, &ab.LastWeekDakuan, &ab.LowAgentsAward, &ab.CardsAward, &ab.FirstBuyAward, &ab.Hongbao, &ab.Delflag, &ab.StartTime, &ab.EndTime, &ab.CreateTime, &ab.UpdateTime)
	if err != nil {
		return nil, err
	}

	return &ab, nil
}

// AgBillsByAgID retrieves a row from 'mj.ag_bill' as a AgBill.
//
// Generated from index 'idx_ag_id'.
func AgBillsByAgID(db XODB, agID int32) ([]*AgBill, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, ag_id, last_week_left, last_week_balance, last_week_dakuan, low_agents_award, cards_award, first_buy_award, hongbao, delflag, start_time, end_time, create_time, update_time ` +
		`FROM mj.ag_bill ` +
		`WHERE ag_id = ?`

	// run query
	XOLog(sqlstr, agID)
	q, err := db.Query(sqlstr, agID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AgBill{}
	for q.Next() {
		ab := AgBill{
			_exists: true,
		}

		// scan
		err = q.Scan(&ab.IndexID, &ab.AgID, &ab.LastWeekLeft, &ab.LastWeekBalance, &ab.LastWeekDakuan, &ab.LowAgentsAward, &ab.CardsAward, &ab.FirstBuyAward, &ab.Hongbao, &ab.Delflag, &ab.StartTime, &ab.EndTime, &ab.CreateTime, &ab.UpdateTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &ab)
	}

	return res, nil
}

// AgBillsByStartTime retrieves a row from 'mj.ag_bill' as a AgBill.
//
// Generated from index 'idx_start_time'.
func AgBillsByStartTime(db XODB, startTime time.Time) ([]*AgBill, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, ag_id, last_week_left, last_week_balance, last_week_dakuan, low_agents_award, cards_award, first_buy_award, hongbao, delflag, start_time, end_time, create_time, update_time ` +
		`FROM mj.ag_bill ` +
		`WHERE start_time = ?`

	// run query
	XOLog(sqlstr, startTime)
	q, err := db.Query(sqlstr, startTime)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AgBill{}
	for q.Next() {
		ab := AgBill{
			_exists: true,
		}

		// scan
		err = q.Scan(&ab.IndexID, &ab.AgID, &ab.LastWeekLeft, &ab.LastWeekBalance, &ab.LastWeekDakuan, &ab.LowAgentsAward, &ab.CardsAward, &ab.FirstBuyAward, &ab.Hongbao, &ab.Delflag, &ab.StartTime, &ab.EndTime, &ab.CreateTime, &ab.UpdateTime)
		if err != nil {
			return nil, err
		}

		res = append(res, &ab)
	}

	return res, nil
}

// AgBillByStartTimeAgID retrieves a row from 'mj.ag_bill' as a AgBill.
//
// Generated from index 'uidx_start_time_ag_id'.
func AgBillByStartTimeAgID(db XODB, startTime time.Time, agID int32) (*AgBill, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`index_id, ag_id, last_week_left, last_week_balance, last_week_dakuan, low_agents_award, cards_award, first_buy_award, hongbao, delflag, start_time, end_time, create_time, update_time ` +
		`FROM mj.ag_bill ` +
		`WHERE start_time = ? AND ag_id = ?`

	// run query
	XOLog(sqlstr, startTime, agID)
	ab := AgBill{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, startTime, agID).Scan(&ab.IndexID, &ab.AgID, &ab.LastWeekLeft, &ab.LastWeekBalance, &ab.LastWeekDakuan, &ab.LowAgentsAward, &ab.CardsAward, &ab.FirstBuyAward, &ab.Hongbao, &ab.Delflag, &ab.StartTime, &ab.EndTime, &ab.CreateTime, &ab.UpdateTime)
	if err != nil {
		return nil, err
	}

	return &ab, nil
}
