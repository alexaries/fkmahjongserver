// Package dao contains the types for schema 'mj'.
package dao

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Player represents a row from 'mj.player'.
type Player struct {
	PlayerID     int32     `json:"player_id"`     // player_id
	HighID       int32     `json:"high_id"`       // high_id
	InviteAward  int32     `json:"invite_award"`  // invite_award
	Openid       string    `json:"openid"`        // openid
	AccessToken  string    `json:"access_token"`  // access_token
	ExpiresIn    time.Time `json:"expires_in"`    // expires_in
	RefreshToken string    `json:"refresh_token"` // refresh_token
	Nickname     string    `json:"nickname"`      // nickname
	Sex          int32     `json:"sex"`           // sex
	Province     string    `json:"province"`      // province
	City         string    `json:"city"`          // city
	Country      string    `json:"country"`       // country
	Headimgurl   string    `json:"headimgurl"`    // headimgurl
	Unionid      string    `json:"unionid"`       // unionid
	Coins        int32     `json:"coins"`         // coins
	Cards        int32     `json:"cards"`         // cards
	FirstBuy     int32     `json:"first_buy"`     // first_buy

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Player exists in the database.
func (p *Player) Exists() bool {
	return p._exists
}

// Deleted provides information if the Player has been deleted from the database.
func (p *Player) Deleted() bool {
	return p._deleted
}

// Insert inserts the Player to the database.
func (p *Player) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO mj.player (` +
		`high_id, invite_award, openid, access_token, expires_in, refresh_token, nickname, sex, province, city, country, headimgurl, unionid, coins, cards, first_buy` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.HighID, p.InviteAward, p.Openid, p.AccessToken, p.ExpiresIn, p.RefreshToken, p.Nickname, p.Sex, p.Province, p.City, p.Country, p.Headimgurl, p.Unionid, p.Coins, p.Cards, p.FirstBuy)
	res, err := db.Exec(sqlstr, p.HighID, p.InviteAward, p.Openid, p.AccessToken, p.ExpiresIn, p.RefreshToken, p.Nickname, p.Sex, p.Province, p.City, p.Country, p.Headimgurl, p.Unionid, p.Coins, p.Cards, p.FirstBuy)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.PlayerID = int32(id)
	p._exists = true

	return nil
}

// Update updates the Player in the database.
func (p *Player) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mj.player SET ` +
		`high_id = ?, invite_award = ?, openid = ?, access_token = ?, expires_in = ?, refresh_token = ?, nickname = ?, sex = ?, province = ?, city = ?, country = ?, headimgurl = ?, unionid = ?, coins = ?, cards = ?, first_buy = ?` +
		` WHERE player_id = ?`

	// run query
	XOLog(sqlstr, p.HighID, p.InviteAward, p.Openid, p.AccessToken, p.ExpiresIn, p.RefreshToken, p.Nickname, p.Sex, p.Province, p.City, p.Country, p.Headimgurl, p.Unionid, p.Coins, p.Cards, p.FirstBuy, p.PlayerID)
	_, err = db.Exec(sqlstr, p.HighID, p.InviteAward, p.Openid, p.AccessToken, p.ExpiresIn, p.RefreshToken, p.Nickname, p.Sex, p.Province, p.City, p.Country, p.Headimgurl, p.Unionid, p.Coins, p.Cards, p.FirstBuy, p.PlayerID)
	return err
}

// Save saves the Player to the database.
func (p *Player) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Delete deletes the Player from the database.
func (p *Player) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mj.player WHERE player_id = ?`

	// run query
	XOLog(sqlstr, p.PlayerID)
	_, err = db.Exec(sqlstr, p.PlayerID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PlayersByCards retrieves a row from 'mj.player' as a Player.
//
// Generated from index 'idx_cards'.
func PlayersByCards(db XODB, cards int32) ([]*Player, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`player_id, high_id, invite_award, openid, access_token, expires_in, refresh_token, nickname, sex, province, city, country, headimgurl, unionid, coins, cards, first_buy ` +
		`FROM mj.player ` +
		`WHERE cards = ?`

	// run query
	XOLog(sqlstr, cards)
	q, err := db.Query(sqlstr, cards)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Player{}
	for q.Next() {
		p := Player{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.PlayerID, &p.HighID, &p.InviteAward, &p.Openid, &p.AccessToken, &p.ExpiresIn, &p.RefreshToken, &p.Nickname, &p.Sex, &p.Province, &p.City, &p.Country, &p.Headimgurl, &p.Unionid, &p.Coins, &p.Cards, &p.FirstBuy)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PlayersByCoins retrieves a row from 'mj.player' as a Player.
//
// Generated from index 'idx_coins'.
func PlayersByCoins(db XODB, coins int32) ([]*Player, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`player_id, high_id, invite_award, openid, access_token, expires_in, refresh_token, nickname, sex, province, city, country, headimgurl, unionid, coins, cards, first_buy ` +
		`FROM mj.player ` +
		`WHERE coins = ?`

	// run query
	XOLog(sqlstr, coins)
	q, err := db.Query(sqlstr, coins)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Player{}
	for q.Next() {
		p := Player{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.PlayerID, &p.HighID, &p.InviteAward, &p.Openid, &p.AccessToken, &p.ExpiresIn, &p.RefreshToken, &p.Nickname, &p.Sex, &p.Province, &p.City, &p.Country, &p.Headimgurl, &p.Unionid, &p.Coins, &p.Cards, &p.FirstBuy)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PlayersByHighID retrieves a row from 'mj.player' as a Player.
//
// Generated from index 'idx_high_id'.
func PlayersByHighID(db XODB, highID int32) ([]*Player, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`player_id, high_id, invite_award, openid, access_token, expires_in, refresh_token, nickname, sex, province, city, country, headimgurl, unionid, coins, cards, first_buy ` +
		`FROM mj.player ` +
		`WHERE high_id = ?`

	// run query
	XOLog(sqlstr, highID)
	q, err := db.Query(sqlstr, highID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Player{}
	for q.Next() {
		p := Player{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.PlayerID, &p.HighID, &p.InviteAward, &p.Openid, &p.AccessToken, &p.ExpiresIn, &p.RefreshToken, &p.Nickname, &p.Sex, &p.Province, &p.City, &p.Country, &p.Headimgurl, &p.Unionid, &p.Coins, &p.Cards, &p.FirstBuy)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

// PlayerByPlayerID retrieves a row from 'mj.player' as a Player.
//
// Generated from index 'player_player_id_pkey'.
func PlayerByPlayerID(db XODB, playerID int32) (*Player, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`player_id, high_id, invite_award, openid, access_token, expires_in, refresh_token, nickname, sex, province, city, country, headimgurl, unionid, coins, cards, first_buy ` +
		`FROM mj.player ` +
		`WHERE player_id = ?`

	// run query
	XOLog(sqlstr, playerID)
	p := Player{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, playerID).Scan(&p.PlayerID, &p.HighID, &p.InviteAward, &p.Openid, &p.AccessToken, &p.ExpiresIn, &p.RefreshToken, &p.Nickname, &p.Sex, &p.Province, &p.City, &p.Country, &p.Headimgurl, &p.Unionid, &p.Coins, &p.Cards, &p.FirstBuy)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// PlayerByOpenid retrieves a row from 'mj.player' as a Player.
//
// Generated from index 'uidx_openid'.
func PlayerByOpenid(db XODB, openid string) (*Player, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`player_id, high_id, invite_award, openid, access_token, expires_in, refresh_token, nickname, sex, province, city, country, headimgurl, unionid, coins, cards, first_buy ` +
		`FROM mj.player ` +
		`WHERE openid = ?`

	// run query
	XOLog(sqlstr, openid)
	p := Player{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, openid).Scan(&p.PlayerID, &p.HighID, &p.InviteAward, &p.Openid, &p.AccessToken, &p.ExpiresIn, &p.RefreshToken, &p.Nickname, &p.Sex, &p.Province, &p.City, &p.Country, &p.Headimgurl, &p.Unionid, &p.Coins, &p.Cards, &p.FirstBuy)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
