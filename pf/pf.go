// Code generated by protoc-gen-gogo.
// source: pf.proto
// DO NOT EDIT!

/*
	Package pf is a generated protocol buffer package.

	It is generated from these files:
		pf.proto

	It has these top-level messages:
		AbsMessage
		Player
		Jushu
		InvitePlayer
		Goods
		OrderStatus
		OrderData
		RoomPlayer
		CardsInfo
		VoteInfo
		MutiHu
		ResultItem
		SettleItem
		RecordRound
		RecordRoom
		OperationItem
		LoginSend
		LoginRecv
		LogoutSend
		LogoutRecv
		AuthSend
		AuthRecv
		DirtySend
		DirtyRecv
		ErrorSend
		ErrorRecv
		FeedbackSend
		FeedbackRecv
		ResourceChangeSend
		ResourceChangeRecv
		BroadcastSend
		BroadcastRecv
		InviteCodeSend
		InviteCodeRecv
		InviteListSend
		InviteListRecv
		InviteAwardSend
		InviteAwardRecv
		GoodsListSend
		GoodsListRecv
		OrderApplySend
		OrderApplyRecv
		OrderApplyNewSend
		OrderApplyNewRecv
		EnterRoomSend
		EnterRoomRecv
		OtherJoinSend
		OtherJoinRecv
		ExitRoomSend
		ExitRoomRecv
		CloseRoomSend
		CloseRoomRecv
		VoteCloseSend
		VoteCloseRecv
		GameChatSend
		GameChatRecv
		PrepareGameSend
		PrepareGameRecv
		CancelPrepareSend
		CancelPrepareRecv
		StartRoundSend
		StartRoundRecv
		EndRoundSend
		EndRoundRecv
		SettlementSend
		SettlementRecv
		GameRecordSend
		GameRecordRecv
		DrawCardSend
		DrawCardRecv
		DiscardSend
		DiscardRecv
		OperationSend
		OperationRecv
		DiscardNoticeSend
		DiscardNoticeRecv
		OperationNoticeSend
		OperationNoticeRecv
		BuyPaoListSend
		BuyPaoListRecv
		BuyPaoSend
		BuyPaoRecv
*/
package pf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ActionType int32

const (
	// 大厅相关
	Login          ActionType = 100
	Logout         ActionType = 200
	Auth           ActionType = 300
	Dirty          ActionType = 400
	Error          ActionType = 500
	Feedback       ActionType = 600
	ResourceChange ActionType = 700
	Broadcast      ActionType = 800
	// 邀请码支付相关
	InviteCode    ActionType = 1100
	InviteList    ActionType = 1200
	InviteAward   ActionType = 1300
	GoodsList     ActionType = 1400
	OrderApply    ActionType = 1500
	OrderApplyNew ActionType = 1600
	// 麻将房间相关
	EnterRoom ActionType = 2100
	OtherJoin ActionType = 2200
	ExitRoom  ActionType = 2300
	CloseRoom ActionType = 2400
	VoteClose ActionType = 2500
	GameChat  ActionType = 2600
	// 麻将牌局相关
	PrepareGame   ActionType = 3100
	CancelPrepare ActionType = 3200
	StartRound    ActionType = 3300
	EndRound      ActionType = 3400
	Settlement    ActionType = 3500
	GameRecord    ActionType = 3600
	BuyPaoList    ActionType = 3700
	BuyPao        ActionType = 3800
	// 麻将逻辑相关
	DrawCard        ActionType = 4100
	Discard         ActionType = 4200
	Operation       ActionType = 4300
	DiscardNotice   ActionType = 4400
	OperationNotice ActionType = 4500
)

var ActionType_name = map[int32]string{
	100:  "Login",
	200:  "Logout",
	300:  "Auth",
	400:  "Dirty",
	500:  "Error",
	600:  "Feedback",
	700:  "ResourceChange",
	800:  "Broadcast",
	1100: "InviteCode",
	1200: "InviteList",
	1300: "InviteAward",
	1400: "GoodsList",
	1500: "OrderApply",
	1600: "OrderApplyNew",
	2100: "EnterRoom",
	2200: "OtherJoin",
	2300: "ExitRoom",
	2400: "CloseRoom",
	2500: "VoteClose",
	2600: "GameChat",
	3100: "PrepareGame",
	3200: "CancelPrepare",
	3300: "StartRound",
	3400: "EndRound",
	3500: "Settlement",
	3600: "GameRecord",
	3700: "BuyPaoList",
	3800: "BuyPao",
	4100: "DrawCard",
	4200: "Discard",
	4300: "Operation",
	4400: "DiscardNotice",
	4500: "OperationNotice",
}
var ActionType_value = map[string]int32{
	"Login":           100,
	"Logout":          200,
	"Auth":            300,
	"Dirty":           400,
	"Error":           500,
	"Feedback":        600,
	"ResourceChange":  700,
	"Broadcast":       800,
	"InviteCode":      1100,
	"InviteList":      1200,
	"InviteAward":     1300,
	"GoodsList":       1400,
	"OrderApply":      1500,
	"OrderApplyNew":   1600,
	"EnterRoom":       2100,
	"OtherJoin":       2200,
	"ExitRoom":        2300,
	"CloseRoom":       2400,
	"VoteClose":       2500,
	"GameChat":        2600,
	"PrepareGame":     3100,
	"CancelPrepare":   3200,
	"StartRound":      3300,
	"EndRound":        3400,
	"Settlement":      3500,
	"GameRecord":      3600,
	"BuyPaoList":      3700,
	"BuyPao":          3800,
	"DrawCard":        4100,
	"Discard":         4200,
	"Operation":       4300,
	"DiscardNotice":   4400,
	"OperationNotice": 4500,
}

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}
func (x ActionType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ActionType_name, int32(x))
}
func (x *ActionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActionType_value, data, "ActionType")
	if err != nil {
		return err
	}
	*x = ActionType(value)
	return nil
}
func (ActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPf, []int{0} }

type AbsMessage struct {
	Token   string `protobuf:"bytes,1,opt,name=token" json:"token"`
	MsgID   int32  `protobuf:"varint,2,opt,name=msgID" json:"msgID"`
	MsgBody []byte `protobuf:"bytes,3,opt,name=msgBody" json:"msgBody"`
}

func (m *AbsMessage) Reset()                    { *m = AbsMessage{} }
func (*AbsMessage) ProtoMessage()               {}
func (*AbsMessage) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{0} }

func (m *AbsMessage) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AbsMessage) GetMsgID() int32 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *AbsMessage) GetMsgBody() []byte {
	if m != nil {
		return m.MsgBody
	}
	return nil
}

// 大厅玩家信息
type Player struct {
	Id       int32  `protobuf:"varint,1,opt,name=id" json:"id"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname" json:"nickname"`
	Avatar   string `protobuf:"bytes,3,opt,name=avatar" json:"avatar"`
	Gender   int32  `protobuf:"varint,4,opt,name=gender" json:"gender"`
	Coins    int32  `protobuf:"varint,5,opt,name=coins" json:"coins"`
	Cards    int32  `protobuf:"varint,6,opt,name=cards" json:"cards"`
	Ip       string `protobuf:"bytes,7,opt,name=ip" json:"ip"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{1} }

func (m *Player) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Player) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Player) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Player) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *Player) GetCoins() int32 {
	if m != nil {
		return m.Coins
	}
	return 0
}

func (m *Player) GetCards() int32 {
	if m != nil {
		return m.Cards
	}
	return 0
}

func (m *Player) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// 开房资产消耗
type Jushu struct {
	Jushu  int32  `protobuf:"varint,1,opt,name=jushu" json:"jushu"`
	Coins  int32  `protobuf:"varint,2,opt,name=coins" json:"coins"`
	Cards  int32  `protobuf:"varint,3,opt,name=cards" json:"cards"`
	MjType int32  `protobuf:"varint,4,opt,name=mjType" json:"mjType"`
	MjDesc string `protobuf:"bytes,5,opt,name=mjDesc" json:"mjDesc"`
}

func (m *Jushu) Reset()                    { *m = Jushu{} }
func (*Jushu) ProtoMessage()               {}
func (*Jushu) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{2} }

func (m *Jushu) GetJushu() int32 {
	if m != nil {
		return m.Jushu
	}
	return 0
}

func (m *Jushu) GetCoins() int32 {
	if m != nil {
		return m.Coins
	}
	return 0
}

func (m *Jushu) GetCards() int32 {
	if m != nil {
		return m.Cards
	}
	return 0
}

func (m *Jushu) GetMjType() int32 {
	if m != nil {
		return m.MjType
	}
	return 0
}

func (m *Jushu) GetMjDesc() string {
	if m != nil {
		return m.MjDesc
	}
	return ""
}

// 下线玩家信息
type InvitePlayer struct {
	Id       int32  `protobuf:"varint,1,opt,name=id" json:"id"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname" json:"nickname"`
	Avatar   string `protobuf:"bytes,3,opt,name=avatar" json:"avatar"`
	State    int32  `protobuf:"varint,4,opt,name=state" json:"state"`
}

func (m *InvitePlayer) Reset()                    { *m = InvitePlayer{} }
func (*InvitePlayer) ProtoMessage()               {}
func (*InvitePlayer) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{3} }

func (m *InvitePlayer) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *InvitePlayer) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *InvitePlayer) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *InvitePlayer) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

// 商品信息
type Goods struct {
	Id        int32  `protobuf:"varint,1,opt,name=id" json:"id"`
	Count     int32  `protobuf:"varint,2,opt,name=count" json:"count"`
	Extra     int32  `protobuf:"varint,3,opt,name=extra" json:"extra"`
	Price     int32  `protobuf:"varint,4,opt,name=price" json:"price"`
	IconUrl   string `protobuf:"bytes,5,opt,name=iconUrl" json:"iconUrl"`
	PayType   int32  `protobuf:"varint,6,opt,name=payType" json:"payType"`
	ProductID string `protobuf:"bytes,7,opt,name=productID" json:"productID"`
	Sort      int32  `protobuf:"varint,8,opt,name=sort" json:"sort"`
}

func (m *Goods) Reset()                    { *m = Goods{} }
func (*Goods) ProtoMessage()               {}
func (*Goods) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{4} }

func (m *Goods) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Goods) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Goods) GetExtra() int32 {
	if m != nil {
		return m.Extra
	}
	return 0
}

func (m *Goods) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Goods) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *Goods) GetPayType() int32 {
	if m != nil {
		return m.PayType
	}
	return 0
}

func (m *Goods) GetProductID() string {
	if m != nil {
		return m.ProductID
	}
	return ""
}

func (m *Goods) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

// ==============> 订单
type OrderStatus struct {
	OrderID   string `protobuf:"bytes,1,req,name=orderID" json:"orderID"`
	Status    int32  `protobuf:"varint,2,opt,name=status" json:"status"`
	ErrorDesc string `protobuf:"bytes,3,opt,name=errorDesc" json:"errorDesc"`
	JsonStr   string `protobuf:"bytes,4,opt,name=jsonStr" json:"jsonStr"`
	GemID     int32  `protobuf:"varint,5,opt,name=gemID" json:"gemID"`
}

func (m *OrderStatus) Reset()                    { *m = OrderStatus{} }
func (*OrderStatus) ProtoMessage()               {}
func (*OrderStatus) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{5} }

func (m *OrderStatus) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *OrderStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *OrderStatus) GetErrorDesc() string {
	if m != nil {
		return m.ErrorDesc
	}
	return ""
}

func (m *OrderStatus) GetJsonStr() string {
	if m != nil {
		return m.JsonStr
	}
	return ""
}

func (m *OrderStatus) GetGemID() int32 {
	if m != nil {
		return m.GemID
	}
	return 0
}

type OrderData struct {
	PayType int32  `protobuf:"varint,1,req,name=payType" json:"payType"`
	JsonStr string `protobuf:"bytes,2,req,name=jsonStr" json:"jsonStr"`
}

func (m *OrderData) Reset()                    { *m = OrderData{} }
func (*OrderData) ProtoMessage()               {}
func (*OrderData) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{6} }

func (m *OrderData) GetPayType() int32 {
	if m != nil {
		return m.PayType
	}
	return 0
}

func (m *OrderData) GetJsonStr() string {
	if m != nil {
		return m.JsonStr
	}
	return ""
}

// 房间玩家信息
type RoomPlayer struct {
	Pos       int32   `protobuf:"varint,1,opt,name=pos" json:"pos"`
	Score     int32   `protobuf:"varint,2,opt,name=score" json:"score"`
	Player    *Player `protobuf:"bytes,3,opt,name=player" json:"player,omitempty"`
	Latitude  float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude"`
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude"`
}

func (m *RoomPlayer) Reset()                    { *m = RoomPlayer{} }
func (*RoomPlayer) ProtoMessage()               {}
func (*RoomPlayer) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{7} }

func (m *RoomPlayer) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *RoomPlayer) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RoomPlayer) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *RoomPlayer) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *RoomPlayer) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

// 玩家所有牌
type CardsInfo struct {
	Pos           int32   `protobuf:"varint,1,opt,name=pos" json:"pos"`
	PengCards     []int32 `protobuf:"varint,2,rep,name=pengCards" json:"pengCards,omitempty"`
	ChiCards      []int32 `protobuf:"varint,3,rep,name=chiCards" json:"chiCards,omitempty"`
	AnGangCards   []int32 `protobuf:"varint,4,rep,name=anGangCards" json:"anGangCards,omitempty"`
	MingGangCards []int32 `protobuf:"varint,5,rep,name=mingGangCards" json:"mingGangCards,omitempty"`
	DiscardCards  []int32 `protobuf:"varint,6,rep,name=discardCards" json:"discardCards,omitempty"`
	LeftCards     []int32 `protobuf:"varint,7,rep,name=leftCards" json:"leftCards,omitempty"`
	DrawCard      int32   `protobuf:"varint,8,opt,name=DrawCard" json:"DrawCard"`
	PaoScore      int32   `protobuf:"varint,9,opt,name=paoScore" json:"paoScore"`
}

func (m *CardsInfo) Reset()                    { *m = CardsInfo{} }
func (*CardsInfo) ProtoMessage()               {}
func (*CardsInfo) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{8} }

func (m *CardsInfo) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *CardsInfo) GetPengCards() []int32 {
	if m != nil {
		return m.PengCards
	}
	return nil
}

func (m *CardsInfo) GetChiCards() []int32 {
	if m != nil {
		return m.ChiCards
	}
	return nil
}

func (m *CardsInfo) GetAnGangCards() []int32 {
	if m != nil {
		return m.AnGangCards
	}
	return nil
}

func (m *CardsInfo) GetMingGangCards() []int32 {
	if m != nil {
		return m.MingGangCards
	}
	return nil
}

func (m *CardsInfo) GetDiscardCards() []int32 {
	if m != nil {
		return m.DiscardCards
	}
	return nil
}

func (m *CardsInfo) GetLeftCards() []int32 {
	if m != nil {
		return m.LeftCards
	}
	return nil
}

func (m *CardsInfo) GetDrawCard() int32 {
	if m != nil {
		return m.DrawCard
	}
	return 0
}

func (m *CardsInfo) GetPaoScore() int32 {
	if m != nil {
		return m.PaoScore
	}
	return 0
}

// 投票信息
type VoteInfo struct {
	Pos    int32 `protobuf:"varint,1,opt,name=pos" json:"pos"`
	Action int32 `protobuf:"varint,2,opt,name=action" json:"action"`
}

func (m *VoteInfo) Reset()                    { *m = VoteInfo{} }
func (*VoteInfo) ProtoMessage()               {}
func (*VoteInfo) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{9} }

func (m *VoteInfo) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *VoteInfo) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

// 一炮多响
type MutiHu struct {
	Pos      int32   `protobuf:"varint,1,opt,name=pos" json:"pos"`
	CardList []int32 `protobuf:"varint,2,rep,name=cardList" json:"cardList,omitempty"`
}

func (m *MutiHu) Reset()                    { *m = MutiHu{} }
func (*MutiHu) ProtoMessage()               {}
func (*MutiHu) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{10} }

func (m *MutiHu) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *MutiHu) GetCardList() []int32 {
	if m != nil {
		return m.CardList
	}
	return nil
}

type ResultItem struct {
	Pos       int32   `protobuf:"varint,1,opt,name=pos" json:"pos"`
	PengCards []int32 `protobuf:"varint,2,rep,name=pengCards" json:"pengCards,omitempty"`
	ChiCards  []int32 `protobuf:"varint,3,rep,name=chiCards" json:"chiCards,omitempty"`
	GangCards []int32 `protobuf:"varint,4,rep,name=gangCards" json:"gangCards,omitempty"`
	LeftCards []int32 `protobuf:"varint,5,rep,name=leftCards" json:"leftCards,omitempty"`
	DrawCard  int32   `protobuf:"varint,6,opt,name=drawCard" json:"drawCard"`
	Score     int32   `protobuf:"varint,7,opt,name=score" json:"score"`
	IsHu      int32   `protobuf:"varint,8,opt,name=isHu" json:"isHu"`
	HuTypes   []int32 `protobuf:"varint,9,rep,name=huTypes" json:"huTypes,omitempty"`
	HuScore   int32   `protobuf:"varint,10,opt,name=huScore" json:"huScore"`
	GangScore int32   `protobuf:"varint,11,opt,name=gangScore" json:"gangScore"`
	PaoScore  int32   `protobuf:"varint,12,opt,name=paoScore" json:"paoScore"`
	CurScore  int32   `protobuf:"varint,13,opt,name=curScore" json:"curScore"`
}

func (m *ResultItem) Reset()                    { *m = ResultItem{} }
func (*ResultItem) ProtoMessage()               {}
func (*ResultItem) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{11} }

func (m *ResultItem) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *ResultItem) GetPengCards() []int32 {
	if m != nil {
		return m.PengCards
	}
	return nil
}

func (m *ResultItem) GetChiCards() []int32 {
	if m != nil {
		return m.ChiCards
	}
	return nil
}

func (m *ResultItem) GetGangCards() []int32 {
	if m != nil {
		return m.GangCards
	}
	return nil
}

func (m *ResultItem) GetLeftCards() []int32 {
	if m != nil {
		return m.LeftCards
	}
	return nil
}

func (m *ResultItem) GetDrawCard() int32 {
	if m != nil {
		return m.DrawCard
	}
	return 0
}

func (m *ResultItem) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ResultItem) GetIsHu() int32 {
	if m != nil {
		return m.IsHu
	}
	return 0
}

func (m *ResultItem) GetHuTypes() []int32 {
	if m != nil {
		return m.HuTypes
	}
	return nil
}

func (m *ResultItem) GetHuScore() int32 {
	if m != nil {
		return m.HuScore
	}
	return 0
}

func (m *ResultItem) GetGangScore() int32 {
	if m != nil {
		return m.GangScore
	}
	return 0
}

func (m *ResultItem) GetPaoScore() int32 {
	if m != nil {
		return m.PaoScore
	}
	return 0
}

func (m *ResultItem) GetCurScore() int32 {
	if m != nil {
		return m.CurScore
	}
	return 0
}

// 大结算信息
type SettleItem struct {
	Pos        int32 `protobuf:"varint,1,opt,name=pos" json:"pos"`
	Score      int32 `protobuf:"varint,2,opt,name=score" json:"score"`
	ZiMoCnt    int32 `protobuf:"varint,3,opt,name=ziMoCnt" json:"ziMoCnt"`
	JiePaoCnt  int32 `protobuf:"varint,4,opt,name=jiePaoCnt" json:"jiePaoCnt"`
	DianPaoCnt int32 `protobuf:"varint,5,opt,name=dianPaoCnt" json:"dianPaoCnt"`
}

func (m *SettleItem) Reset()                    { *m = SettleItem{} }
func (*SettleItem) ProtoMessage()               {}
func (*SettleItem) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{12} }

func (m *SettleItem) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *SettleItem) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *SettleItem) GetZiMoCnt() int32 {
	if m != nil {
		return m.ZiMoCnt
	}
	return 0
}

func (m *SettleItem) GetJiePaoCnt() int32 {
	if m != nil {
		return m.JiePaoCnt
	}
	return 0
}

func (m *SettleItem) GetDianPaoCnt() int32 {
	if m != nil {
		return m.DianPaoCnt
	}
	return 0
}

// 历史战绩每局信息
type RecordRound struct {
	CurRound  int32   `protobuf:"varint,1,opt,name=curRound" json:"curRound"`
	RoundID   int32   `protobuf:"varint,2,opt,name=roundID" json:"roundID"`
	StartTime string  `protobuf:"bytes,3,opt,name=startTime" json:"startTime"`
	ScoreList []int32 `protobuf:"varint,4,rep,name=scoreList" json:"scoreList,omitempty"`
}

func (m *RecordRound) Reset()                    { *m = RecordRound{} }
func (*RecordRound) ProtoMessage()               {}
func (*RecordRound) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{13} }

func (m *RecordRound) GetCurRound() int32 {
	if m != nil {
		return m.CurRound
	}
	return 0
}

func (m *RecordRound) GetRoundID() int32 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

func (m *RecordRound) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *RecordRound) GetScoreList() []int32 {
	if m != nil {
		return m.ScoreList
	}
	return nil
}

// 历史战绩房间信息
type RecordRoom struct {
	RoomID     int32          `protobuf:"varint,1,opt,name=roomID" json:"roomID"`
	MjType     int32          `protobuf:"varint,2,opt,name=mjType" json:"mjType"`
	TotalRound int32          `protobuf:"varint,3,opt,name=totalRound" json:"totalRound"`
	CreateTime string         `protobuf:"bytes,4,opt,name=createTime" json:"createTime"`
	NameList   []string       `protobuf:"bytes,5,rep,name=nameList" json:"nameList,omitempty"`
	ScoreList  []int32        `protobuf:"varint,6,rep,name=scoreList" json:"scoreList,omitempty"`
	RoundList  []*RecordRound `protobuf:"bytes,7,rep,name=roundList" json:"roundList,omitempty"`
}

func (m *RecordRoom) Reset()                    { *m = RecordRoom{} }
func (*RecordRoom) ProtoMessage()               {}
func (*RecordRoom) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{14} }

func (m *RecordRoom) GetRoomID() int32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *RecordRoom) GetMjType() int32 {
	if m != nil {
		return m.MjType
	}
	return 0
}

func (m *RecordRoom) GetTotalRound() int32 {
	if m != nil {
		return m.TotalRound
	}
	return 0
}

func (m *RecordRoom) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *RecordRoom) GetNameList() []string {
	if m != nil {
		return m.NameList
	}
	return nil
}

func (m *RecordRoom) GetScoreList() []int32 {
	if m != nil {
		return m.ScoreList
	}
	return nil
}

func (m *RecordRoom) GetRoundList() []*RecordRound {
	if m != nil {
		return m.RoundList
	}
	return nil
}

// 可操作信息
type OperationItem struct {
	Type       int32     `protobuf:"varint,1,opt,name=type" json:"type"`
	Keycard    int32     `protobuf:"varint,2,opt,name=keycard" json:"keycard"`
	CardsList  []int32   `protobuf:"varint,3,rep,name=cardsList" json:"cardsList,omitempty"`
	SrcPos     int32     `protobuf:"varint,4,opt,name=srcPos" json:"srcPos"`
	DesPos     int32     `protobuf:"varint,5,opt,name=desPos" json:"desPos"`
	HuInfoList []*MutiHu `protobuf:"bytes,6,rep,name=huInfoList" json:"huInfoList,omitempty"`
}

func (m *OperationItem) Reset()                    { *m = OperationItem{} }
func (*OperationItem) ProtoMessage()               {}
func (*OperationItem) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{15} }

func (m *OperationItem) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *OperationItem) GetKeycard() int32 {
	if m != nil {
		return m.Keycard
	}
	return 0
}

func (m *OperationItem) GetCardsList() []int32 {
	if m != nil {
		return m.CardsList
	}
	return nil
}

func (m *OperationItem) GetSrcPos() int32 {
	if m != nil {
		return m.SrcPos
	}
	return 0
}

func (m *OperationItem) GetDesPos() int32 {
	if m != nil {
		return m.DesPos
	}
	return 0
}

func (m *OperationItem) GetHuInfoList() []*MutiHu {
	if m != nil {
		return m.HuInfoList
	}
	return nil
}

// login
type LoginSend struct {
	Channel      int32  `protobuf:"varint,1,opt,name=channel" json:"channel"`
	Version      int32  `protobuf:"varint,2,opt,name=version" json:"version"`
	LoginType    int32  `protobuf:"varint,3,opt,name=loginType" json:"loginType"`
	Session      string `protobuf:"bytes,4,opt,name=session" json:"session"`
	MachineID    string `protobuf:"bytes,5,opt,name=machineID" json:"machineID"`
	PlayerID     int32  `protobuf:"varint,6,opt,name=playerID" json:"playerID"`
	RefreshToken string `protobuf:"bytes,7,opt,name=refreshToken" json:"refreshToken"`
}

func (m *LoginSend) Reset()                    { *m = LoginSend{} }
func (*LoginSend) ProtoMessage()               {}
func (*LoginSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{16} }

func (m *LoginSend) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *LoginSend) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *LoginSend) GetLoginType() int32 {
	if m != nil {
		return m.LoginType
	}
	return 0
}

func (m *LoginSend) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *LoginSend) GetMachineID() string {
	if m != nil {
		return m.MachineID
	}
	return ""
}

func (m *LoginSend) GetPlayerID() int32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *LoginSend) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

type LoginRecv struct {
	Status      int32  `protobuf:"varint,1,opt,name=status" json:"status"`
	LogicServer string `protobuf:"bytes,2,opt,name=logicServer" json:"logicServer"`
}

func (m *LoginRecv) Reset()                    { *m = LoginRecv{} }
func (*LoginRecv) ProtoMessage()               {}
func (*LoginRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{17} }

func (m *LoginRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *LoginRecv) GetLogicServer() string {
	if m != nil {
		return m.LogicServer
	}
	return ""
}

// logout
type LogoutSend struct {
}

func (m *LogoutSend) Reset()                    { *m = LogoutSend{} }
func (*LogoutSend) ProtoMessage()               {}
func (*LogoutSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{18} }

type LogoutRecv struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status"`
}

func (m *LogoutRecv) Reset()                    { *m = LogoutRecv{} }
func (*LogoutRecv) ProtoMessage()               {}
func (*LogoutRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{19} }

func (m *LogoutRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// auth
type AuthSend struct {
}

func (m *AuthSend) Reset()                    { *m = AuthSend{} }
func (*AuthSend) ProtoMessage()               {}
func (*AuthSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{20} }

type AuthRecv struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status"`
}

func (m *AuthRecv) Reset()                    { *m = AuthRecv{} }
func (*AuthRecv) ProtoMessage()               {}
func (*AuthRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{21} }

func (m *AuthRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// dirty
type DirtySend struct {
}

func (m *DirtySend) Reset()                    { *m = DirtySend{} }
func (*DirtySend) ProtoMessage()               {}
func (*DirtySend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{22} }

type DirtyRecv struct {
	Status       int32    `protobuf:"varint,1,opt,name=status" json:"status"`
	RoomID       int32    `protobuf:"varint,2,opt,name=roomID" json:"roomID"`
	HighID       int32    `protobuf:"varint,3,opt,name=highID" json:"highID"`
	Player       *Player  `protobuf:"bytes,4,opt,name=player" json:"player,omitempty"`
	Jushus       []*Jushu `protobuf:"bytes,5,rep,name=jushus" json:"jushus,omitempty"`
	WchatID      string   `protobuf:"bytes,6,opt,name=wchatID" json:"wchatID"`
	Module       string   `protobuf:"bytes,7,opt,name=module" json:"module"`
	RefreshToken string   `protobuf:"bytes,8,opt,name=refreshToken" json:"refreshToken"`
}

func (m *DirtyRecv) Reset()                    { *m = DirtyRecv{} }
func (*DirtyRecv) ProtoMessage()               {}
func (*DirtyRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{23} }

func (m *DirtyRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *DirtyRecv) GetRoomID() int32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *DirtyRecv) GetHighID() int32 {
	if m != nil {
		return m.HighID
	}
	return 0
}

func (m *DirtyRecv) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *DirtyRecv) GetJushus() []*Jushu {
	if m != nil {
		return m.Jushus
	}
	return nil
}

func (m *DirtyRecv) GetWchatID() string {
	if m != nil {
		return m.WchatID
	}
	return ""
}

func (m *DirtyRecv) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *DirtyRecv) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

// error
type ErrorSend struct {
}

func (m *ErrorSend) Reset()                    { *m = ErrorSend{} }
func (*ErrorSend) ProtoMessage()               {}
func (*ErrorSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{24} }

type ErrorRecv struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status"`
}

func (m *ErrorRecv) Reset()                    { *m = ErrorRecv{} }
func (*ErrorRecv) ProtoMessage()               {}
func (*ErrorRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{25} }

func (m *ErrorRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// 客服反馈
type FeedbackSend struct {
	PlayerID int32  `protobuf:"varint,1,opt,name=playerID" json:"playerID"`
	ImgUrl   string `protobuf:"bytes,2,opt,name=imgUrl" json:"imgUrl"`
	Text     string `protobuf:"bytes,3,opt,name=text" json:"text"`
}

func (m *FeedbackSend) Reset()                    { *m = FeedbackSend{} }
func (*FeedbackSend) ProtoMessage()               {}
func (*FeedbackSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{26} }

func (m *FeedbackSend) GetPlayerID() int32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *FeedbackSend) GetImgUrl() string {
	if m != nil {
		return m.ImgUrl
	}
	return ""
}

func (m *FeedbackSend) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type FeedbackRecv struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status"`
}

func (m *FeedbackRecv) Reset()                    { *m = FeedbackRecv{} }
func (*FeedbackRecv) ProtoMessage()               {}
func (*FeedbackRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{27} }

func (m *FeedbackRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// 资源变化
type ResourceChangeSend struct {
}

func (m *ResourceChangeSend) Reset()                    { *m = ResourceChangeSend{} }
func (*ResourceChangeSend) ProtoMessage()               {}
func (*ResourceChangeSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{28} }

type ResourceChangeRecv struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status"`
	Coins  int32 `protobuf:"varint,2,opt,name=coins" json:"coins"`
	Cards  int32 `protobuf:"varint,3,opt,name=cards" json:"cards"`
}

func (m *ResourceChangeRecv) Reset()                    { *m = ResourceChangeRecv{} }
func (*ResourceChangeRecv) ProtoMessage()               {}
func (*ResourceChangeRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{29} }

func (m *ResourceChangeRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ResourceChangeRecv) GetCoins() int32 {
	if m != nil {
		return m.Coins
	}
	return 0
}

func (m *ResourceChangeRecv) GetCards() int32 {
	if m != nil {
		return m.Cards
	}
	return 0
}

type BroadcastSend struct {
}

func (m *BroadcastSend) Reset()                    { *m = BroadcastSend{} }
func (*BroadcastSend) ProtoMessage()               {}
func (*BroadcastSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{30} }

type BroadcastRecv struct {
	Status int32    `protobuf:"varint,1,opt,name=status" json:"status"`
	Text   []string `protobuf:"bytes,2,rep,name=text" json:"text,omitempty"`
}

func (m *BroadcastRecv) Reset()                    { *m = BroadcastRecv{} }
func (*BroadcastRecv) ProtoMessage()               {}
func (*BroadcastRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{31} }

func (m *BroadcastRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BroadcastRecv) GetText() []string {
	if m != nil {
		return m.Text
	}
	return nil
}

// 填写邀请码
type InviteCodeSend struct {
	Code int32 `protobuf:"varint,1,opt,name=code" json:"code"`
}

func (m *InviteCodeSend) Reset()                    { *m = InviteCodeSend{} }
func (*InviteCodeSend) ProtoMessage()               {}
func (*InviteCodeSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{32} }

func (m *InviteCodeSend) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type InviteCodeRecv struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status"`
	HighID int32 `protobuf:"varint,2,opt,name=highID" json:"highID"`
	Coins  int32 `protobuf:"varint,3,opt,name=coins" json:"coins"`
}

func (m *InviteCodeRecv) Reset()                    { *m = InviteCodeRecv{} }
func (*InviteCodeRecv) ProtoMessage()               {}
func (*InviteCodeRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{33} }

func (m *InviteCodeRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *InviteCodeRecv) GetHighID() int32 {
	if m != nil {
		return m.HighID
	}
	return 0
}

func (m *InviteCodeRecv) GetCoins() int32 {
	if m != nil {
		return m.Coins
	}
	return 0
}

// 获取下线列表
type InviteListSend struct {
}

func (m *InviteListSend) Reset()                    { *m = InviteListSend{} }
func (*InviteListSend) ProtoMessage()               {}
func (*InviteListSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{34} }

type InviteListRecv struct {
	Status  int32           `protobuf:"varint,1,opt,name=status" json:"status"`
	Players []*InvitePlayer `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
}

func (m *InviteListRecv) Reset()                    { *m = InviteListRecv{} }
func (*InviteListRecv) ProtoMessage()               {}
func (*InviteListRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{35} }

func (m *InviteListRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *InviteListRecv) GetPlayers() []*InvitePlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

// 领取下线奖励
type InviteAwardSend struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id"`
}

func (m *InviteAwardSend) Reset()                    { *m = InviteAwardSend{} }
func (*InviteAwardSend) ProtoMessage()               {}
func (*InviteAwardSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{36} }

func (m *InviteAwardSend) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type InviteAwardRecv struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status"`
	Coins  int32 `protobuf:"varint,2,opt,name=coins" json:"coins"`
	Id     int32 `protobuf:"varint,3,opt,name=id" json:"id"`
}

func (m *InviteAwardRecv) Reset()                    { *m = InviteAwardRecv{} }
func (*InviteAwardRecv) ProtoMessage()               {}
func (*InviteAwardRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{37} }

func (m *InviteAwardRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *InviteAwardRecv) GetCoins() int32 {
	if m != nil {
		return m.Coins
	}
	return 0
}

func (m *InviteAwardRecv) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 获取商品列表
type GoodsListSend struct {
}

func (m *GoodsListSend) Reset()                    { *m = GoodsListSend{} }
func (*GoodsListSend) ProtoMessage()               {}
func (*GoodsListSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{38} }

type GoodsListRecv struct {
	Status int32    `protobuf:"varint,1,opt,name=status" json:"status"`
	Goods  []*Goods `protobuf:"bytes,2,rep,name=goods" json:"goods,omitempty"`
}

func (m *GoodsListRecv) Reset()                    { *m = GoodsListRecv{} }
func (*GoodsListRecv) ProtoMessage()               {}
func (*GoodsListRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{39} }

func (m *GoodsListRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GoodsListRecv) GetGoods() []*Goods {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 订单
type OrderApplySend struct {
	PlayerID int32 `protobuf:"varint,1,opt,name=playerID" json:"playerID"`
	Channel  int32 `protobuf:"varint,2,opt,name=channel" json:"channel"`
	WaresID  int32 `protobuf:"varint,3,opt,name=waresID" json:"waresID"`
}

func (m *OrderApplySend) Reset()                    { *m = OrderApplySend{} }
func (*OrderApplySend) ProtoMessage()               {}
func (*OrderApplySend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{40} }

func (m *OrderApplySend) GetPlayerID() int32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *OrderApplySend) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *OrderApplySend) GetWaresID() int32 {
	if m != nil {
		return m.WaresID
	}
	return 0
}

type OrderApplyRecv struct {
	Status    int32  `protobuf:"varint,1,opt,name=status" json:"status"`
	Coins     int32  `protobuf:"varint,2,opt,name=coins" json:"coins"`
	Cards     int32  `protobuf:"varint,3,opt,name=cards" json:"cards"`
	OrderID   string `protobuf:"bytes,4,opt,name=orderID" json:"orderID"`
	Price     int32  `protobuf:"varint,5,opt,name=price" json:"price"`
	PayType   int32  `protobuf:"varint,6,opt,name=payType" json:"payType"`
	Count     int32  `protobuf:"varint,7,opt,name=count" json:"count"`
	ProductID string `protobuf:"bytes,8,opt,name=productID" json:"productID"`
}

func (m *OrderApplyRecv) Reset()                    { *m = OrderApplyRecv{} }
func (*OrderApplyRecv) ProtoMessage()               {}
func (*OrderApplyRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{41} }

func (m *OrderApplyRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *OrderApplyRecv) GetCoins() int32 {
	if m != nil {
		return m.Coins
	}
	return 0
}

func (m *OrderApplyRecv) GetCards() int32 {
	if m != nil {
		return m.Cards
	}
	return 0
}

func (m *OrderApplyRecv) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *OrderApplyRecv) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderApplyRecv) GetPayType() int32 {
	if m != nil {
		return m.PayType
	}
	return 0
}

func (m *OrderApplyRecv) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *OrderApplyRecv) GetProductID() string {
	if m != nil {
		return m.ProductID
	}
	return ""
}

// ==============> 订单
type OrderApplyNewSend struct {
	OrderList []*OrderData `protobuf:"bytes,1,rep,name=orderList" json:"orderList,omitempty"`
}

func (m *OrderApplyNewSend) Reset()                    { *m = OrderApplyNewSend{} }
func (*OrderApplyNewSend) ProtoMessage()               {}
func (*OrderApplyNewSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{42} }

func (m *OrderApplyNewSend) GetOrderList() []*OrderData {
	if m != nil {
		return m.OrderList
	}
	return nil
}

type OrderApplyNewRecv struct {
	Status    int32          `protobuf:"varint,1,opt,name=status" json:"status"`
	Coins     int32          `protobuf:"varint,2,opt,name=coins" json:"coins"`
	Cards     int32          `protobuf:"varint,3,opt,name=cards" json:"cards"`
	OrderList []*OrderStatus `protobuf:"bytes,4,rep,name=orderList" json:"orderList,omitempty"`
}

func (m *OrderApplyNewRecv) Reset()                    { *m = OrderApplyNewRecv{} }
func (*OrderApplyNewRecv) ProtoMessage()               {}
func (*OrderApplyNewRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{43} }

func (m *OrderApplyNewRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *OrderApplyNewRecv) GetCoins() int32 {
	if m != nil {
		return m.Coins
	}
	return 0
}

func (m *OrderApplyNewRecv) GetCards() int32 {
	if m != nil {
		return m.Cards
	}
	return 0
}

func (m *OrderApplyNewRecv) GetOrderList() []*OrderStatus {
	if m != nil {
		return m.OrderList
	}
	return nil
}

// 自己进入房间
type EnterRoomSend struct {
	RoomID    int32   `protobuf:"varint,1,opt,name=roomID" json:"roomID"`
	Configs   []int32 `protobuf:"varint,2,rep,name=configs" json:"configs,omitempty"`
	MjType    int32   `protobuf:"varint,3,opt,name=mjType" json:"mjType"`
	CostType  int32   `protobuf:"varint,4,opt,name=costType" json:"costType"`
	Round     int32   `protobuf:"varint,5,opt,name=round" json:"round"`
	Relink    int32   `protobuf:"varint,6,opt,name=relink" json:"relink"`
	Cheat     bool    `protobuf:"varint,7,opt,name=cheat" json:"cheat"`
	Latitude  float64 `protobuf:"fixed64,8,opt,name=latitude" json:"latitude"`
	Longitude float64 `protobuf:"fixed64,9,opt,name=longitude" json:"longitude"`
}

func (m *EnterRoomSend) Reset()                    { *m = EnterRoomSend{} }
func (*EnterRoomSend) ProtoMessage()               {}
func (*EnterRoomSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{44} }

func (m *EnterRoomSend) GetRoomID() int32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *EnterRoomSend) GetConfigs() []int32 {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *EnterRoomSend) GetMjType() int32 {
	if m != nil {
		return m.MjType
	}
	return 0
}

func (m *EnterRoomSend) GetCostType() int32 {
	if m != nil {
		return m.CostType
	}
	return 0
}

func (m *EnterRoomSend) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *EnterRoomSend) GetRelink() int32 {
	if m != nil {
		return m.Relink
	}
	return 0
}

func (m *EnterRoomSend) GetCheat() bool {
	if m != nil {
		return m.Cheat
	}
	return false
}

func (m *EnterRoomSend) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *EnterRoomSend) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type EnterRoomRecv struct {
	Status        int32         `protobuf:"varint,1,opt,name=status" json:"status"`
	GameStatus    int32         `protobuf:"varint,2,opt,name=gameStatus" json:"gameStatus"`
	RoomID        int32         `protobuf:"varint,3,opt,name=roomID" json:"roomID"`
	TotalRound    int32         `protobuf:"varint,4,opt,name=totalRound" json:"totalRound"`
	CurRound      int32         `protobuf:"varint,5,opt,name=curRound" json:"curRound"`
	LeftCards     int32         `protobuf:"varint,6,opt,name=leftCards" json:"leftCards"`
	BankerPos     int32         `protobuf:"varint,7,opt,name=bankerPos" json:"bankerPos"`
	CurPos        int32         `protobuf:"varint,8,opt,name=curPos" json:"curPos"`
	LastPos       int32         `protobuf:"varint,9,opt,name=lastPos" json:"lastPos"`
	Configs       []int32       `protobuf:"varint,10,rep,name=configs" json:"configs,omitempty"`
	PlayerList    []*RoomPlayer `protobuf:"bytes,11,rep,name=playerList" json:"playerList,omitempty"`
	CardsInfoList []*CardsInfo  `protobuf:"bytes,12,rep,name=cardsInfoList" json:"cardsInfoList,omitempty"`
	HunCard       int32         `protobuf:"varint,13,opt,name=hunCard" json:"hunCard"`
	MjType        int32         `protobuf:"varint,14,opt,name=mjType" json:"mjType"`
	Cheat         bool          `protobuf:"varint,15,opt,name=cheat" json:"cheat"`
}

func (m *EnterRoomRecv) Reset()                    { *m = EnterRoomRecv{} }
func (*EnterRoomRecv) ProtoMessage()               {}
func (*EnterRoomRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{45} }

func (m *EnterRoomRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *EnterRoomRecv) GetGameStatus() int32 {
	if m != nil {
		return m.GameStatus
	}
	return 0
}

func (m *EnterRoomRecv) GetRoomID() int32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *EnterRoomRecv) GetTotalRound() int32 {
	if m != nil {
		return m.TotalRound
	}
	return 0
}

func (m *EnterRoomRecv) GetCurRound() int32 {
	if m != nil {
		return m.CurRound
	}
	return 0
}

func (m *EnterRoomRecv) GetLeftCards() int32 {
	if m != nil {
		return m.LeftCards
	}
	return 0
}

func (m *EnterRoomRecv) GetBankerPos() int32 {
	if m != nil {
		return m.BankerPos
	}
	return 0
}

func (m *EnterRoomRecv) GetCurPos() int32 {
	if m != nil {
		return m.CurPos
	}
	return 0
}

func (m *EnterRoomRecv) GetLastPos() int32 {
	if m != nil {
		return m.LastPos
	}
	return 0
}

func (m *EnterRoomRecv) GetConfigs() []int32 {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *EnterRoomRecv) GetPlayerList() []*RoomPlayer {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

func (m *EnterRoomRecv) GetCardsInfoList() []*CardsInfo {
	if m != nil {
		return m.CardsInfoList
	}
	return nil
}

func (m *EnterRoomRecv) GetHunCard() int32 {
	if m != nil {
		return m.HunCard
	}
	return 0
}

func (m *EnterRoomRecv) GetMjType() int32 {
	if m != nil {
		return m.MjType
	}
	return 0
}

func (m *EnterRoomRecv) GetCheat() bool {
	if m != nil {
		return m.Cheat
	}
	return false
}

// 其他人进入房间
type OtherJoinSend struct {
}

func (m *OtherJoinSend) Reset()                    { *m = OtherJoinSend{} }
func (*OtherJoinSend) ProtoMessage()               {}
func (*OtherJoinSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{46} }

type OtherJoinRecv struct {
	Status int32       `protobuf:"varint,1,opt,name=status" json:"status"`
	Player *RoomPlayer `protobuf:"bytes,2,opt,name=player" json:"player,omitempty"`
}

func (m *OtherJoinRecv) Reset()                    { *m = OtherJoinRecv{} }
func (*OtherJoinRecv) ProtoMessage()               {}
func (*OtherJoinRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{47} }

func (m *OtherJoinRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *OtherJoinRecv) GetPlayer() *RoomPlayer {
	if m != nil {
		return m.Player
	}
	return nil
}

// 退出房间
type ExitRoomSend struct {
}

func (m *ExitRoomSend) Reset()                    { *m = ExitRoomSend{} }
func (*ExitRoomSend) ProtoMessage()               {}
func (*ExitRoomSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{48} }

type ExitRoomRecv struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status"`
	Pos    int32 `protobuf:"varint,2,opt,name=pos" json:"pos"`
}

func (m *ExitRoomRecv) Reset()                    { *m = ExitRoomRecv{} }
func (*ExitRoomRecv) ProtoMessage()               {}
func (*ExitRoomRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{49} }

func (m *ExitRoomRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ExitRoomRecv) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

// 解散房间
type CloseRoomSend struct {
}

func (m *CloseRoomSend) Reset()                    { *m = CloseRoomSend{} }
func (*CloseRoomSend) ProtoMessage()               {}
func (*CloseRoomSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{50} }

type CloseRoomRecv struct {
	Status    int32 `protobuf:"varint,1,opt,name=status" json:"status"`
	CloseType int32 `protobuf:"varint,2,opt,name=closeType" json:"closeType"`
}

func (m *CloseRoomRecv) Reset()                    { *m = CloseRoomRecv{} }
func (*CloseRoomRecv) ProtoMessage()               {}
func (*CloseRoomRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{51} }

func (m *CloseRoomRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CloseRoomRecv) GetCloseType() int32 {
	if m != nil {
		return m.CloseType
	}
	return 0
}

// 投票解散
type VoteCloseSend struct {
	Action int32 `protobuf:"varint,1,opt,name=action" json:"action"`
}

func (m *VoteCloseSend) Reset()                    { *m = VoteCloseSend{} }
func (*VoteCloseSend) ProtoMessage()               {}
func (*VoteCloseSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{52} }

func (m *VoteCloseSend) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

type VoteCloseRecv struct {
	Status   int32       `protobuf:"varint,1,opt,name=status" json:"status"`
	LeftTime int32       `protobuf:"varint,2,opt,name=leftTime" json:"leftTime"`
	FirstPos int32       `protobuf:"varint,3,opt,name=firstPos" json:"firstPos"`
	VoteList []*VoteInfo `protobuf:"bytes,4,rep,name=voteList" json:"voteList,omitempty"`
}

func (m *VoteCloseRecv) Reset()                    { *m = VoteCloseRecv{} }
func (*VoteCloseRecv) ProtoMessage()               {}
func (*VoteCloseRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{53} }

func (m *VoteCloseRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *VoteCloseRecv) GetLeftTime() int32 {
	if m != nil {
		return m.LeftTime
	}
	return 0
}

func (m *VoteCloseRecv) GetFirstPos() int32 {
	if m != nil {
		return m.FirstPos
	}
	return 0
}

func (m *VoteCloseRecv) GetVoteList() []*VoteInfo {
	if m != nil {
		return m.VoteList
	}
	return nil
}

// 游戏内聊天
type GameChatSend struct {
	Types  int32  `protobuf:"varint,1,opt,name=types" json:"types"`
	MessID int32  `protobuf:"varint,2,opt,name=messID" json:"messID"`
	Text   string `protobuf:"bytes,3,opt,name=text" json:"text"`
}

func (m *GameChatSend) Reset()                    { *m = GameChatSend{} }
func (*GameChatSend) ProtoMessage()               {}
func (*GameChatSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{54} }

func (m *GameChatSend) GetTypes() int32 {
	if m != nil {
		return m.Types
	}
	return 0
}

func (m *GameChatSend) GetMessID() int32 {
	if m != nil {
		return m.MessID
	}
	return 0
}

func (m *GameChatSend) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type GameChatRecv struct {
	Status   int32  `protobuf:"varint,1,opt,name=status" json:"status"`
	PlayerID int32  `protobuf:"varint,2,opt,name=playerID" json:"playerID"`
	NickName string `protobuf:"bytes,3,opt,name=nickName" json:"nickName"`
	Types    int32  `protobuf:"varint,4,opt,name=types" json:"types"`
	MessID   int32  `protobuf:"varint,5,opt,name=messID" json:"messID"`
	Text     string `protobuf:"bytes,6,opt,name=text" json:"text"`
	Avatar   string `protobuf:"bytes,7,opt,name=avatar" json:"avatar"`
}

func (m *GameChatRecv) Reset()                    { *m = GameChatRecv{} }
func (*GameChatRecv) ProtoMessage()               {}
func (*GameChatRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{55} }

func (m *GameChatRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GameChatRecv) GetPlayerID() int32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *GameChatRecv) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *GameChatRecv) GetTypes() int32 {
	if m != nil {
		return m.Types
	}
	return 0
}

func (m *GameChatRecv) GetMessID() int32 {
	if m != nil {
		return m.MessID
	}
	return 0
}

func (m *GameChatRecv) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *GameChatRecv) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

// 准备游戏
type PrepareGameSend struct {
}

func (m *PrepareGameSend) Reset()                    { *m = PrepareGameSend{} }
func (*PrepareGameSend) ProtoMessage()               {}
func (*PrepareGameSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{56} }

type PrepareGameRecv struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status"`
	Pos    int32 `protobuf:"varint,2,opt,name=pos" json:"pos"`
}

func (m *PrepareGameRecv) Reset()                    { *m = PrepareGameRecv{} }
func (*PrepareGameRecv) ProtoMessage()               {}
func (*PrepareGameRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{57} }

func (m *PrepareGameRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PrepareGameRecv) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

// 取消准备
type CancelPrepareSend struct {
}

func (m *CancelPrepareSend) Reset()                    { *m = CancelPrepareSend{} }
func (*CancelPrepareSend) ProtoMessage()               {}
func (*CancelPrepareSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{58} }

type CancelPrepareRecv struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status"`
	Pos    int32 `protobuf:"varint,2,opt,name=pos" json:"pos"`
}

func (m *CancelPrepareRecv) Reset()                    { *m = CancelPrepareRecv{} }
func (*CancelPrepareRecv) ProtoMessage()               {}
func (*CancelPrepareRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{59} }

func (m *CancelPrepareRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CancelPrepareRecv) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

// 开始一局
type StartRoundSend struct {
}

func (m *StartRoundSend) Reset()                    { *m = StartRoundSend{} }
func (*StartRoundSend) ProtoMessage()               {}
func (*StartRoundSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{60} }

type StartRoundRecv struct {
	Status     int32   `protobuf:"varint,1,opt,name=status" json:"status"`
	CurRound   int32   `protobuf:"varint,2,opt,name=curRound" json:"curRound"`
	LeftCards  int32   `protobuf:"varint,3,opt,name=leftCards" json:"leftCards"`
	BankerPos  int32   `protobuf:"varint,4,opt,name=bankerPos" json:"bankerPos"`
	CardsCount []int32 `protobuf:"varint,5,rep,name=cardsCount" json:"cardsCount,omitempty"`
	MyCards    []int32 `protobuf:"varint,6,rep,name=myCards" json:"myCards,omitempty"`
	TotalRound int32   `protobuf:"varint,7,opt,name=totalRound" json:"totalRound"`
	ScoreList  []int32 `protobuf:"varint,8,rep,name=scoreList" json:"scoreList,omitempty"`
	HunCard    int32   `protobuf:"varint,9,opt,name=hunCard" json:"hunCard"`
	PreHunCard int32   `protobuf:"varint,10,opt,name=preHunCard" json:"preHunCard"`
}

func (m *StartRoundRecv) Reset()                    { *m = StartRoundRecv{} }
func (*StartRoundRecv) ProtoMessage()               {}
func (*StartRoundRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{61} }

func (m *StartRoundRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *StartRoundRecv) GetCurRound() int32 {
	if m != nil {
		return m.CurRound
	}
	return 0
}

func (m *StartRoundRecv) GetLeftCards() int32 {
	if m != nil {
		return m.LeftCards
	}
	return 0
}

func (m *StartRoundRecv) GetBankerPos() int32 {
	if m != nil {
		return m.BankerPos
	}
	return 0
}

func (m *StartRoundRecv) GetCardsCount() []int32 {
	if m != nil {
		return m.CardsCount
	}
	return nil
}

func (m *StartRoundRecv) GetMyCards() []int32 {
	if m != nil {
		return m.MyCards
	}
	return nil
}

func (m *StartRoundRecv) GetTotalRound() int32 {
	if m != nil {
		return m.TotalRound
	}
	return 0
}

func (m *StartRoundRecv) GetScoreList() []int32 {
	if m != nil {
		return m.ScoreList
	}
	return nil
}

func (m *StartRoundRecv) GetHunCard() int32 {
	if m != nil {
		return m.HunCard
	}
	return 0
}

func (m *StartRoundRecv) GetPreHunCard() int32 {
	if m != nil {
		return m.PreHunCard
	}
	return 0
}

// 结束一局
type EndRoundSend struct {
}

func (m *EndRoundSend) Reset()                    { *m = EndRoundSend{} }
func (*EndRoundSend) ProtoMessage()               {}
func (*EndRoundSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{62} }

type EndRoundRecv struct {
	Status   int32         `protobuf:"varint,1,opt,name=status" json:"status"`
	ItemList []*ResultItem `protobuf:"bytes,2,rep,name=itemList" json:"itemList,omitempty"`
}

func (m *EndRoundRecv) Reset()                    { *m = EndRoundRecv{} }
func (*EndRoundRecv) ProtoMessage()               {}
func (*EndRoundRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{63} }

func (m *EndRoundRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *EndRoundRecv) GetItemList() []*ResultItem {
	if m != nil {
		return m.ItemList
	}
	return nil
}

// 大结算
type SettlementSend struct {
}

func (m *SettlementSend) Reset()                    { *m = SettlementSend{} }
func (*SettlementSend) ProtoMessage()               {}
func (*SettlementSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{64} }

type SettlementRecv struct {
	Status      int32         `protobuf:"varint,1,opt,name=status" json:"status"`
	SettleList  []*SettleItem `protobuf:"bytes,2,rep,name=SettleList" json:"SettleList,omitempty"`
	IsVoteClose int32         `protobuf:"varint,3,opt,name=isVoteClose" json:"isVoteClose"`
}

func (m *SettlementRecv) Reset()                    { *m = SettlementRecv{} }
func (*SettlementRecv) ProtoMessage()               {}
func (*SettlementRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{65} }

func (m *SettlementRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SettlementRecv) GetSettleList() []*SettleItem {
	if m != nil {
		return m.SettleList
	}
	return nil
}

func (m *SettlementRecv) GetIsVoteClose() int32 {
	if m != nil {
		return m.IsVoteClose
	}
	return 0
}

// 历史战绩
type GameRecordSend struct {
}

func (m *GameRecordSend) Reset()                    { *m = GameRecordSend{} }
func (*GameRecordSend) ProtoMessage()               {}
func (*GameRecordSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{66} }

type GameRecordRecv struct {
	Status  int32         `protobuf:"varint,1,opt,name=status" json:"status"`
	Records []*RecordRoom `protobuf:"bytes,2,rep,name=records" json:"records,omitempty"`
}

func (m *GameRecordRecv) Reset()                    { *m = GameRecordRecv{} }
func (*GameRecordRecv) ProtoMessage()               {}
func (*GameRecordRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{67} }

func (m *GameRecordRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GameRecordRecv) GetRecords() []*RecordRoom {
	if m != nil {
		return m.Records
	}
	return nil
}

// 抓牌
type DrawCardSend struct {
}

func (m *DrawCardSend) Reset()                    { *m = DrawCardSend{} }
func (*DrawCardSend) ProtoMessage()               {}
func (*DrawCardSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{68} }

type DrawCardRecv struct {
	Status    int32   `protobuf:"varint,1,opt,name=status" json:"status"`
	Pos       int32   `protobuf:"varint,2,opt,name=pos" json:"pos"`
	Card      int32   `protobuf:"varint,3,opt,name=card" json:"card"`
	TingCards []int32 `protobuf:"varint,4,rep,name=tingCards" json:"tingCards,omitempty"`
}

func (m *DrawCardRecv) Reset()                    { *m = DrawCardRecv{} }
func (*DrawCardRecv) ProtoMessage()               {}
func (*DrawCardRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{69} }

func (m *DrawCardRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *DrawCardRecv) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *DrawCardRecv) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *DrawCardRecv) GetTingCards() []int32 {
	if m != nil {
		return m.TingCards
	}
	return nil
}

// 出牌
type DiscardSend struct {
	Card int32 `protobuf:"varint,1,opt,name=card" json:"card"`
}

func (m *DiscardSend) Reset()                    { *m = DiscardSend{} }
func (*DiscardSend) ProtoMessage()               {}
func (*DiscardSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{70} }

func (m *DiscardSend) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

type DiscardRecv struct {
	Status    int32   `protobuf:"varint,1,opt,name=status" json:"status"`
	Card      int32   `protobuf:"varint,2,opt,name=card" json:"card"`
	Pos       int32   `protobuf:"varint,3,opt,name=pos" json:"pos"`
	LeftCards []int32 `protobuf:"varint,4,rep,name=leftCards" json:"leftCards,omitempty"`
}

func (m *DiscardRecv) Reset()                    { *m = DiscardRecv{} }
func (*DiscardRecv) ProtoMessage()               {}
func (*DiscardRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{71} }

func (m *DiscardRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *DiscardRecv) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *DiscardRecv) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *DiscardRecv) GetLeftCards() []int32 {
	if m != nil {
		return m.LeftCards
	}
	return nil
}

// 操作
type OperationSend struct {
	Operation *OperationItem `protobuf:"bytes,1,opt,name=operation" json:"operation,omitempty"`
}

func (m *OperationSend) Reset()                    { *m = OperationSend{} }
func (*OperationSend) ProtoMessage()               {}
func (*OperationSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{72} }

func (m *OperationSend) GetOperation() *OperationItem {
	if m != nil {
		return m.Operation
	}
	return nil
}

type OperationRecv struct {
	Status    int32          `protobuf:"varint,1,opt,name=status" json:"status"`
	Operation *OperationItem `protobuf:"bytes,2,opt,name=operation" json:"operation,omitempty"`
}

func (m *OperationRecv) Reset()                    { *m = OperationRecv{} }
func (*OperationRecv) ProtoMessage()               {}
func (*OperationRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{73} }

func (m *OperationRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *OperationRecv) GetOperation() *OperationItem {
	if m != nil {
		return m.Operation
	}
	return nil
}

// 出牌提示
type DiscardNoticeSend struct {
}

func (m *DiscardNoticeSend) Reset()                    { *m = DiscardNoticeSend{} }
func (*DiscardNoticeSend) ProtoMessage()               {}
func (*DiscardNoticeSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{74} }

type DiscardNoticeRecv struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status"`
	Pos    int32 `protobuf:"varint,2,opt,name=pos" json:"pos"`
}

func (m *DiscardNoticeRecv) Reset()                    { *m = DiscardNoticeRecv{} }
func (*DiscardNoticeRecv) ProtoMessage()               {}
func (*DiscardNoticeRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{75} }

func (m *DiscardNoticeRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *DiscardNoticeRecv) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

// 操作提示
type OperationNoticeSend struct {
}

func (m *OperationNoticeSend) Reset()                    { *m = OperationNoticeSend{} }
func (*OperationNoticeSend) ProtoMessage()               {}
func (*OperationNoticeSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{76} }

type OperationNoticeRecv struct {
	Status        int32            `protobuf:"varint,1,opt,name=status" json:"status"`
	OperationList []*OperationItem `protobuf:"bytes,2,rep,name=operationList" json:"operationList,omitempty"`
}

func (m *OperationNoticeRecv) Reset()                    { *m = OperationNoticeRecv{} }
func (*OperationNoticeRecv) ProtoMessage()               {}
func (*OperationNoticeRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{77} }

func (m *OperationNoticeRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *OperationNoticeRecv) GetOperationList() []*OperationItem {
	if m != nil {
		return m.OperationList
	}
	return nil
}

// 买跑列表
type BuyPaoListSend struct {
}

func (m *BuyPaoListSend) Reset()                    { *m = BuyPaoListSend{} }
func (*BuyPaoListSend) ProtoMessage()               {}
func (*BuyPaoListSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{78} }

type BuyPaoListRecv struct {
	Status       int32   `protobuf:"varint,1,opt,name=status" json:"status"`
	PaoScoreList []int32 `protobuf:"varint,2,rep,name=paoScoreList" json:"paoScoreList,omitempty"`
}

func (m *BuyPaoListRecv) Reset()                    { *m = BuyPaoListRecv{} }
func (*BuyPaoListRecv) ProtoMessage()               {}
func (*BuyPaoListRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{79} }

func (m *BuyPaoListRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BuyPaoListRecv) GetPaoScoreList() []int32 {
	if m != nil {
		return m.PaoScoreList
	}
	return nil
}

// 买跑操作
type BuyPaoSend struct {
	PaoScore int32 `protobuf:"varint,1,opt,name=paoScore" json:"paoScore"`
}

func (m *BuyPaoSend) Reset()                    { *m = BuyPaoSend{} }
func (*BuyPaoSend) ProtoMessage()               {}
func (*BuyPaoSend) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{80} }

func (m *BuyPaoSend) GetPaoScore() int32 {
	if m != nil {
		return m.PaoScore
	}
	return 0
}

type BuyPaoRecv struct {
	Status   int32 `protobuf:"varint,1,opt,name=status" json:"status"`
	PaoScore int32 `protobuf:"varint,2,opt,name=paoScore" json:"paoScore"`
	Pos      int32 `protobuf:"varint,3,opt,name=pos" json:"pos"`
}

func (m *BuyPaoRecv) Reset()                    { *m = BuyPaoRecv{} }
func (*BuyPaoRecv) ProtoMessage()               {}
func (*BuyPaoRecv) Descriptor() ([]byte, []int) { return fileDescriptorPf, []int{81} }

func (m *BuyPaoRecv) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BuyPaoRecv) GetPaoScore() int32 {
	if m != nil {
		return m.PaoScore
	}
	return 0
}

func (m *BuyPaoRecv) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func init() {
	proto.RegisterType((*AbsMessage)(nil), "pf.AbsMessage")
	proto.RegisterType((*Player)(nil), "pf.Player")
	proto.RegisterType((*Jushu)(nil), "pf.Jushu")
	proto.RegisterType((*InvitePlayer)(nil), "pf.InvitePlayer")
	proto.RegisterType((*Goods)(nil), "pf.Goods")
	proto.RegisterType((*OrderStatus)(nil), "pf.OrderStatus")
	proto.RegisterType((*OrderData)(nil), "pf.OrderData")
	proto.RegisterType((*RoomPlayer)(nil), "pf.RoomPlayer")
	proto.RegisterType((*CardsInfo)(nil), "pf.CardsInfo")
	proto.RegisterType((*VoteInfo)(nil), "pf.VoteInfo")
	proto.RegisterType((*MutiHu)(nil), "pf.MutiHu")
	proto.RegisterType((*ResultItem)(nil), "pf.ResultItem")
	proto.RegisterType((*SettleItem)(nil), "pf.SettleItem")
	proto.RegisterType((*RecordRound)(nil), "pf.RecordRound")
	proto.RegisterType((*RecordRoom)(nil), "pf.RecordRoom")
	proto.RegisterType((*OperationItem)(nil), "pf.OperationItem")
	proto.RegisterType((*LoginSend)(nil), "pf.LoginSend")
	proto.RegisterType((*LoginRecv)(nil), "pf.LoginRecv")
	proto.RegisterType((*LogoutSend)(nil), "pf.LogoutSend")
	proto.RegisterType((*LogoutRecv)(nil), "pf.LogoutRecv")
	proto.RegisterType((*AuthSend)(nil), "pf.AuthSend")
	proto.RegisterType((*AuthRecv)(nil), "pf.AuthRecv")
	proto.RegisterType((*DirtySend)(nil), "pf.DirtySend")
	proto.RegisterType((*DirtyRecv)(nil), "pf.DirtyRecv")
	proto.RegisterType((*ErrorSend)(nil), "pf.ErrorSend")
	proto.RegisterType((*ErrorRecv)(nil), "pf.ErrorRecv")
	proto.RegisterType((*FeedbackSend)(nil), "pf.FeedbackSend")
	proto.RegisterType((*FeedbackRecv)(nil), "pf.FeedbackRecv")
	proto.RegisterType((*ResourceChangeSend)(nil), "pf.ResourceChangeSend")
	proto.RegisterType((*ResourceChangeRecv)(nil), "pf.ResourceChangeRecv")
	proto.RegisterType((*BroadcastSend)(nil), "pf.BroadcastSend")
	proto.RegisterType((*BroadcastRecv)(nil), "pf.BroadcastRecv")
	proto.RegisterType((*InviteCodeSend)(nil), "pf.InviteCodeSend")
	proto.RegisterType((*InviteCodeRecv)(nil), "pf.InviteCodeRecv")
	proto.RegisterType((*InviteListSend)(nil), "pf.InviteListSend")
	proto.RegisterType((*InviteListRecv)(nil), "pf.InviteListRecv")
	proto.RegisterType((*InviteAwardSend)(nil), "pf.InviteAwardSend")
	proto.RegisterType((*InviteAwardRecv)(nil), "pf.InviteAwardRecv")
	proto.RegisterType((*GoodsListSend)(nil), "pf.GoodsListSend")
	proto.RegisterType((*GoodsListRecv)(nil), "pf.GoodsListRecv")
	proto.RegisterType((*OrderApplySend)(nil), "pf.OrderApplySend")
	proto.RegisterType((*OrderApplyRecv)(nil), "pf.OrderApplyRecv")
	proto.RegisterType((*OrderApplyNewSend)(nil), "pf.OrderApplyNewSend")
	proto.RegisterType((*OrderApplyNewRecv)(nil), "pf.OrderApplyNewRecv")
	proto.RegisterType((*EnterRoomSend)(nil), "pf.EnterRoomSend")
	proto.RegisterType((*EnterRoomRecv)(nil), "pf.EnterRoomRecv")
	proto.RegisterType((*OtherJoinSend)(nil), "pf.OtherJoinSend")
	proto.RegisterType((*OtherJoinRecv)(nil), "pf.OtherJoinRecv")
	proto.RegisterType((*ExitRoomSend)(nil), "pf.ExitRoomSend")
	proto.RegisterType((*ExitRoomRecv)(nil), "pf.ExitRoomRecv")
	proto.RegisterType((*CloseRoomSend)(nil), "pf.CloseRoomSend")
	proto.RegisterType((*CloseRoomRecv)(nil), "pf.CloseRoomRecv")
	proto.RegisterType((*VoteCloseSend)(nil), "pf.VoteCloseSend")
	proto.RegisterType((*VoteCloseRecv)(nil), "pf.VoteCloseRecv")
	proto.RegisterType((*GameChatSend)(nil), "pf.GameChatSend")
	proto.RegisterType((*GameChatRecv)(nil), "pf.GameChatRecv")
	proto.RegisterType((*PrepareGameSend)(nil), "pf.PrepareGameSend")
	proto.RegisterType((*PrepareGameRecv)(nil), "pf.PrepareGameRecv")
	proto.RegisterType((*CancelPrepareSend)(nil), "pf.CancelPrepareSend")
	proto.RegisterType((*CancelPrepareRecv)(nil), "pf.CancelPrepareRecv")
	proto.RegisterType((*StartRoundSend)(nil), "pf.StartRoundSend")
	proto.RegisterType((*StartRoundRecv)(nil), "pf.StartRoundRecv")
	proto.RegisterType((*EndRoundSend)(nil), "pf.EndRoundSend")
	proto.RegisterType((*EndRoundRecv)(nil), "pf.EndRoundRecv")
	proto.RegisterType((*SettlementSend)(nil), "pf.SettlementSend")
	proto.RegisterType((*SettlementRecv)(nil), "pf.SettlementRecv")
	proto.RegisterType((*GameRecordSend)(nil), "pf.GameRecordSend")
	proto.RegisterType((*GameRecordRecv)(nil), "pf.GameRecordRecv")
	proto.RegisterType((*DrawCardSend)(nil), "pf.DrawCardSend")
	proto.RegisterType((*DrawCardRecv)(nil), "pf.DrawCardRecv")
	proto.RegisterType((*DiscardSend)(nil), "pf.DiscardSend")
	proto.RegisterType((*DiscardRecv)(nil), "pf.DiscardRecv")
	proto.RegisterType((*OperationSend)(nil), "pf.OperationSend")
	proto.RegisterType((*OperationRecv)(nil), "pf.OperationRecv")
	proto.RegisterType((*DiscardNoticeSend)(nil), "pf.DiscardNoticeSend")
	proto.RegisterType((*DiscardNoticeRecv)(nil), "pf.DiscardNoticeRecv")
	proto.RegisterType((*OperationNoticeSend)(nil), "pf.OperationNoticeSend")
	proto.RegisterType((*OperationNoticeRecv)(nil), "pf.OperationNoticeRecv")
	proto.RegisterType((*BuyPaoListSend)(nil), "pf.BuyPaoListSend")
	proto.RegisterType((*BuyPaoListRecv)(nil), "pf.BuyPaoListRecv")
	proto.RegisterType((*BuyPaoSend)(nil), "pf.BuyPaoSend")
	proto.RegisterType((*BuyPaoRecv)(nil), "pf.BuyPaoRecv")
	proto.RegisterEnum("pf.ActionType", ActionType_name, ActionType_value)
}
func (x ActionType) String() string {
	s, ok := ActionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *AbsMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AbsMessage)
	if !ok {
		that2, ok := that.(AbsMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.MsgID != that1.MsgID {
		return false
	}
	if !bytes.Equal(this.MsgBody, that1.MsgBody) {
		return false
	}
	return true
}
func (this *Player) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Player)
	if !ok {
		that2, ok := that.(Player)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Avatar != that1.Avatar {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	if this.Coins != that1.Coins {
		return false
	}
	if this.Cards != that1.Cards {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	return true
}
func (this *Jushu) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Jushu)
	if !ok {
		that2, ok := that.(Jushu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Jushu != that1.Jushu {
		return false
	}
	if this.Coins != that1.Coins {
		return false
	}
	if this.Cards != that1.Cards {
		return false
	}
	if this.MjType != that1.MjType {
		return false
	}
	if this.MjDesc != that1.MjDesc {
		return false
	}
	return true
}
func (this *InvitePlayer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InvitePlayer)
	if !ok {
		that2, ok := that.(InvitePlayer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Avatar != that1.Avatar {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *Goods) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Goods)
	if !ok {
		that2, ok := that.(Goods)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Extra != that1.Extra {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.IconUrl != that1.IconUrl {
		return false
	}
	if this.PayType != that1.PayType {
		return false
	}
	if this.ProductID != that1.ProductID {
		return false
	}
	if this.Sort != that1.Sort {
		return false
	}
	return true
}
func (this *OrderStatus) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OrderStatus)
	if !ok {
		that2, ok := that.(OrderStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OrderID != that1.OrderID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.ErrorDesc != that1.ErrorDesc {
		return false
	}
	if this.JsonStr != that1.JsonStr {
		return false
	}
	if this.GemID != that1.GemID {
		return false
	}
	return true
}
func (this *OrderData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OrderData)
	if !ok {
		that2, ok := that.(OrderData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PayType != that1.PayType {
		return false
	}
	if this.JsonStr != that1.JsonStr {
		return false
	}
	return true
}
func (this *RoomPlayer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RoomPlayer)
	if !ok {
		that2, ok := that.(RoomPlayer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Pos != that1.Pos {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if !this.Player.Equal(that1.Player) {
		return false
	}
	if this.Latitude != that1.Latitude {
		return false
	}
	if this.Longitude != that1.Longitude {
		return false
	}
	return true
}
func (this *CardsInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CardsInfo)
	if !ok {
		that2, ok := that.(CardsInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Pos != that1.Pos {
		return false
	}
	if len(this.PengCards) != len(that1.PengCards) {
		return false
	}
	for i := range this.PengCards {
		if this.PengCards[i] != that1.PengCards[i] {
			return false
		}
	}
	if len(this.ChiCards) != len(that1.ChiCards) {
		return false
	}
	for i := range this.ChiCards {
		if this.ChiCards[i] != that1.ChiCards[i] {
			return false
		}
	}
	if len(this.AnGangCards) != len(that1.AnGangCards) {
		return false
	}
	for i := range this.AnGangCards {
		if this.AnGangCards[i] != that1.AnGangCards[i] {
			return false
		}
	}
	if len(this.MingGangCards) != len(that1.MingGangCards) {
		return false
	}
	for i := range this.MingGangCards {
		if this.MingGangCards[i] != that1.MingGangCards[i] {
			return false
		}
	}
	if len(this.DiscardCards) != len(that1.DiscardCards) {
		return false
	}
	for i := range this.DiscardCards {
		if this.DiscardCards[i] != that1.DiscardCards[i] {
			return false
		}
	}
	if len(this.LeftCards) != len(that1.LeftCards) {
		return false
	}
	for i := range this.LeftCards {
		if this.LeftCards[i] != that1.LeftCards[i] {
			return false
		}
	}
	if this.DrawCard != that1.DrawCard {
		return false
	}
	if this.PaoScore != that1.PaoScore {
		return false
	}
	return true
}
func (this *VoteInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VoteInfo)
	if !ok {
		that2, ok := that.(VoteInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Pos != that1.Pos {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	return true
}
func (this *MutiHu) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MutiHu)
	if !ok {
		that2, ok := that.(MutiHu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Pos != that1.Pos {
		return false
	}
	if len(this.CardList) != len(that1.CardList) {
		return false
	}
	for i := range this.CardList {
		if this.CardList[i] != that1.CardList[i] {
			return false
		}
	}
	return true
}
func (this *ResultItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResultItem)
	if !ok {
		that2, ok := that.(ResultItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Pos != that1.Pos {
		return false
	}
	if len(this.PengCards) != len(that1.PengCards) {
		return false
	}
	for i := range this.PengCards {
		if this.PengCards[i] != that1.PengCards[i] {
			return false
		}
	}
	if len(this.ChiCards) != len(that1.ChiCards) {
		return false
	}
	for i := range this.ChiCards {
		if this.ChiCards[i] != that1.ChiCards[i] {
			return false
		}
	}
	if len(this.GangCards) != len(that1.GangCards) {
		return false
	}
	for i := range this.GangCards {
		if this.GangCards[i] != that1.GangCards[i] {
			return false
		}
	}
	if len(this.LeftCards) != len(that1.LeftCards) {
		return false
	}
	for i := range this.LeftCards {
		if this.LeftCards[i] != that1.LeftCards[i] {
			return false
		}
	}
	if this.DrawCard != that1.DrawCard {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.IsHu != that1.IsHu {
		return false
	}
	if len(this.HuTypes) != len(that1.HuTypes) {
		return false
	}
	for i := range this.HuTypes {
		if this.HuTypes[i] != that1.HuTypes[i] {
			return false
		}
	}
	if this.HuScore != that1.HuScore {
		return false
	}
	if this.GangScore != that1.GangScore {
		return false
	}
	if this.PaoScore != that1.PaoScore {
		return false
	}
	if this.CurScore != that1.CurScore {
		return false
	}
	return true
}
func (this *SettleItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SettleItem)
	if !ok {
		that2, ok := that.(SettleItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Pos != that1.Pos {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.ZiMoCnt != that1.ZiMoCnt {
		return false
	}
	if this.JiePaoCnt != that1.JiePaoCnt {
		return false
	}
	if this.DianPaoCnt != that1.DianPaoCnt {
		return false
	}
	return true
}
func (this *RecordRound) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecordRound)
	if !ok {
		that2, ok := that.(RecordRound)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CurRound != that1.CurRound {
		return false
	}
	if this.RoundID != that1.RoundID {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if len(this.ScoreList) != len(that1.ScoreList) {
		return false
	}
	for i := range this.ScoreList {
		if this.ScoreList[i] != that1.ScoreList[i] {
			return false
		}
	}
	return true
}
func (this *RecordRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecordRoom)
	if !ok {
		that2, ok := that.(RecordRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if this.MjType != that1.MjType {
		return false
	}
	if this.TotalRound != that1.TotalRound {
		return false
	}
	if this.CreateTime != that1.CreateTime {
		return false
	}
	if len(this.NameList) != len(that1.NameList) {
		return false
	}
	for i := range this.NameList {
		if this.NameList[i] != that1.NameList[i] {
			return false
		}
	}
	if len(this.ScoreList) != len(that1.ScoreList) {
		return false
	}
	for i := range this.ScoreList {
		if this.ScoreList[i] != that1.ScoreList[i] {
			return false
		}
	}
	if len(this.RoundList) != len(that1.RoundList) {
		return false
	}
	for i := range this.RoundList {
		if !this.RoundList[i].Equal(that1.RoundList[i]) {
			return false
		}
	}
	return true
}
func (this *OperationItem) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OperationItem)
	if !ok {
		that2, ok := that.(OperationItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Keycard != that1.Keycard {
		return false
	}
	if len(this.CardsList) != len(that1.CardsList) {
		return false
	}
	for i := range this.CardsList {
		if this.CardsList[i] != that1.CardsList[i] {
			return false
		}
	}
	if this.SrcPos != that1.SrcPos {
		return false
	}
	if this.DesPos != that1.DesPos {
		return false
	}
	if len(this.HuInfoList) != len(that1.HuInfoList) {
		return false
	}
	for i := range this.HuInfoList {
		if !this.HuInfoList[i].Equal(that1.HuInfoList[i]) {
			return false
		}
	}
	return true
}
func (this *LoginSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LoginSend)
	if !ok {
		that2, ok := that.(LoginSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.LoginType != that1.LoginType {
		return false
	}
	if this.Session != that1.Session {
		return false
	}
	if this.MachineID != that1.MachineID {
		return false
	}
	if this.PlayerID != that1.PlayerID {
		return false
	}
	if this.RefreshToken != that1.RefreshToken {
		return false
	}
	return true
}
func (this *LoginRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LoginRecv)
	if !ok {
		that2, ok := that.(LoginRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.LogicServer != that1.LogicServer {
		return false
	}
	return true
}
func (this *LogoutSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LogoutSend)
	if !ok {
		that2, ok := that.(LogoutSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *LogoutRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LogoutRecv)
	if !ok {
		that2, ok := that.(LogoutRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *AuthSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthSend)
	if !ok {
		that2, ok := that.(AuthSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *AuthRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthRecv)
	if !ok {
		that2, ok := that.(AuthRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *DirtySend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DirtySend)
	if !ok {
		that2, ok := that.(DirtySend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *DirtyRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DirtyRecv)
	if !ok {
		that2, ok := that.(DirtyRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if this.HighID != that1.HighID {
		return false
	}
	if !this.Player.Equal(that1.Player) {
		return false
	}
	if len(this.Jushus) != len(that1.Jushus) {
		return false
	}
	for i := range this.Jushus {
		if !this.Jushus[i].Equal(that1.Jushus[i]) {
			return false
		}
	}
	if this.WchatID != that1.WchatID {
		return false
	}
	if this.Module != that1.Module {
		return false
	}
	if this.RefreshToken != that1.RefreshToken {
		return false
	}
	return true
}
func (this *ErrorSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ErrorSend)
	if !ok {
		that2, ok := that.(ErrorSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ErrorRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ErrorRecv)
	if !ok {
		that2, ok := that.(ErrorRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *FeedbackSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FeedbackSend)
	if !ok {
		that2, ok := that.(FeedbackSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PlayerID != that1.PlayerID {
		return false
	}
	if this.ImgUrl != that1.ImgUrl {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	return true
}
func (this *FeedbackRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FeedbackRecv)
	if !ok {
		that2, ok := that.(FeedbackRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *ResourceChangeSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResourceChangeSend)
	if !ok {
		that2, ok := that.(ResourceChangeSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResourceChangeRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResourceChangeRecv)
	if !ok {
		that2, ok := that.(ResourceChangeRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Coins != that1.Coins {
		return false
	}
	if this.Cards != that1.Cards {
		return false
	}
	return true
}
func (this *BroadcastSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BroadcastSend)
	if !ok {
		that2, ok := that.(BroadcastSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *BroadcastRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BroadcastRecv)
	if !ok {
		that2, ok := that.(BroadcastRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Text) != len(that1.Text) {
		return false
	}
	for i := range this.Text {
		if this.Text[i] != that1.Text[i] {
			return false
		}
	}
	return true
}
func (this *InviteCodeSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InviteCodeSend)
	if !ok {
		that2, ok := that.(InviteCodeSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *InviteCodeRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InviteCodeRecv)
	if !ok {
		that2, ok := that.(InviteCodeRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.HighID != that1.HighID {
		return false
	}
	if this.Coins != that1.Coins {
		return false
	}
	return true
}
func (this *InviteListSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InviteListSend)
	if !ok {
		that2, ok := that.(InviteListSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *InviteListRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InviteListRecv)
	if !ok {
		that2, ok := that.(InviteListRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Players) != len(that1.Players) {
		return false
	}
	for i := range this.Players {
		if !this.Players[i].Equal(that1.Players[i]) {
			return false
		}
	}
	return true
}
func (this *InviteAwardSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InviteAwardSend)
	if !ok {
		that2, ok := that.(InviteAwardSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *InviteAwardRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InviteAwardRecv)
	if !ok {
		that2, ok := that.(InviteAwardRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Coins != that1.Coins {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GoodsListSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GoodsListSend)
	if !ok {
		that2, ok := that.(GoodsListSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *GoodsListRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GoodsListRecv)
	if !ok {
		that2, ok := that.(GoodsListRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Goods) != len(that1.Goods) {
		return false
	}
	for i := range this.Goods {
		if !this.Goods[i].Equal(that1.Goods[i]) {
			return false
		}
	}
	return true
}
func (this *OrderApplySend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OrderApplySend)
	if !ok {
		that2, ok := that.(OrderApplySend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PlayerID != that1.PlayerID {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if this.WaresID != that1.WaresID {
		return false
	}
	return true
}
func (this *OrderApplyRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OrderApplyRecv)
	if !ok {
		that2, ok := that.(OrderApplyRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Coins != that1.Coins {
		return false
	}
	if this.Cards != that1.Cards {
		return false
	}
	if this.OrderID != that1.OrderID {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.PayType != that1.PayType {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.ProductID != that1.ProductID {
		return false
	}
	return true
}
func (this *OrderApplyNewSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OrderApplyNewSend)
	if !ok {
		that2, ok := that.(OrderApplyNewSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.OrderList) != len(that1.OrderList) {
		return false
	}
	for i := range this.OrderList {
		if !this.OrderList[i].Equal(that1.OrderList[i]) {
			return false
		}
	}
	return true
}
func (this *OrderApplyNewRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OrderApplyNewRecv)
	if !ok {
		that2, ok := that.(OrderApplyNewRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Coins != that1.Coins {
		return false
	}
	if this.Cards != that1.Cards {
		return false
	}
	if len(this.OrderList) != len(that1.OrderList) {
		return false
	}
	for i := range this.OrderList {
		if !this.OrderList[i].Equal(that1.OrderList[i]) {
			return false
		}
	}
	return true
}
func (this *EnterRoomSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EnterRoomSend)
	if !ok {
		that2, ok := that.(EnterRoomSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if len(this.Configs) != len(that1.Configs) {
		return false
	}
	for i := range this.Configs {
		if this.Configs[i] != that1.Configs[i] {
			return false
		}
	}
	if this.MjType != that1.MjType {
		return false
	}
	if this.CostType != that1.CostType {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Relink != that1.Relink {
		return false
	}
	if this.Cheat != that1.Cheat {
		return false
	}
	if this.Latitude != that1.Latitude {
		return false
	}
	if this.Longitude != that1.Longitude {
		return false
	}
	return true
}
func (this *EnterRoomRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EnterRoomRecv)
	if !ok {
		that2, ok := that.(EnterRoomRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.GameStatus != that1.GameStatus {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if this.TotalRound != that1.TotalRound {
		return false
	}
	if this.CurRound != that1.CurRound {
		return false
	}
	if this.LeftCards != that1.LeftCards {
		return false
	}
	if this.BankerPos != that1.BankerPos {
		return false
	}
	if this.CurPos != that1.CurPos {
		return false
	}
	if this.LastPos != that1.LastPos {
		return false
	}
	if len(this.Configs) != len(that1.Configs) {
		return false
	}
	for i := range this.Configs {
		if this.Configs[i] != that1.Configs[i] {
			return false
		}
	}
	if len(this.PlayerList) != len(that1.PlayerList) {
		return false
	}
	for i := range this.PlayerList {
		if !this.PlayerList[i].Equal(that1.PlayerList[i]) {
			return false
		}
	}
	if len(this.CardsInfoList) != len(that1.CardsInfoList) {
		return false
	}
	for i := range this.CardsInfoList {
		if !this.CardsInfoList[i].Equal(that1.CardsInfoList[i]) {
			return false
		}
	}
	if this.HunCard != that1.HunCard {
		return false
	}
	if this.MjType != that1.MjType {
		return false
	}
	if this.Cheat != that1.Cheat {
		return false
	}
	return true
}
func (this *OtherJoinSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OtherJoinSend)
	if !ok {
		that2, ok := that.(OtherJoinSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *OtherJoinRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OtherJoinRecv)
	if !ok {
		that2, ok := that.(OtherJoinRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Player.Equal(that1.Player) {
		return false
	}
	return true
}
func (this *ExitRoomSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExitRoomSend)
	if !ok {
		that2, ok := that.(ExitRoomSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ExitRoomRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExitRoomRecv)
	if !ok {
		that2, ok := that.(ExitRoomRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Pos != that1.Pos {
		return false
	}
	return true
}
func (this *CloseRoomSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CloseRoomSend)
	if !ok {
		that2, ok := that.(CloseRoomSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *CloseRoomRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CloseRoomRecv)
	if !ok {
		that2, ok := that.(CloseRoomRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.CloseType != that1.CloseType {
		return false
	}
	return true
}
func (this *VoteCloseSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VoteCloseSend)
	if !ok {
		that2, ok := that.(VoteCloseSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	return true
}
func (this *VoteCloseRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VoteCloseRecv)
	if !ok {
		that2, ok := that.(VoteCloseRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.LeftTime != that1.LeftTime {
		return false
	}
	if this.FirstPos != that1.FirstPos {
		return false
	}
	if len(this.VoteList) != len(that1.VoteList) {
		return false
	}
	for i := range this.VoteList {
		if !this.VoteList[i].Equal(that1.VoteList[i]) {
			return false
		}
	}
	return true
}
func (this *GameChatSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GameChatSend)
	if !ok {
		that2, ok := that.(GameChatSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Types != that1.Types {
		return false
	}
	if this.MessID != that1.MessID {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	return true
}
func (this *GameChatRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GameChatRecv)
	if !ok {
		that2, ok := that.(GameChatRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.PlayerID != that1.PlayerID {
		return false
	}
	if this.NickName != that1.NickName {
		return false
	}
	if this.Types != that1.Types {
		return false
	}
	if this.MessID != that1.MessID {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if this.Avatar != that1.Avatar {
		return false
	}
	return true
}
func (this *PrepareGameSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PrepareGameSend)
	if !ok {
		that2, ok := that.(PrepareGameSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *PrepareGameRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PrepareGameRecv)
	if !ok {
		that2, ok := that.(PrepareGameRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Pos != that1.Pos {
		return false
	}
	return true
}
func (this *CancelPrepareSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CancelPrepareSend)
	if !ok {
		that2, ok := that.(CancelPrepareSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *CancelPrepareRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CancelPrepareRecv)
	if !ok {
		that2, ok := that.(CancelPrepareRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Pos != that1.Pos {
		return false
	}
	return true
}
func (this *StartRoundSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StartRoundSend)
	if !ok {
		that2, ok := that.(StartRoundSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *StartRoundRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StartRoundRecv)
	if !ok {
		that2, ok := that.(StartRoundRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.CurRound != that1.CurRound {
		return false
	}
	if this.LeftCards != that1.LeftCards {
		return false
	}
	if this.BankerPos != that1.BankerPos {
		return false
	}
	if len(this.CardsCount) != len(that1.CardsCount) {
		return false
	}
	for i := range this.CardsCount {
		if this.CardsCount[i] != that1.CardsCount[i] {
			return false
		}
	}
	if len(this.MyCards) != len(that1.MyCards) {
		return false
	}
	for i := range this.MyCards {
		if this.MyCards[i] != that1.MyCards[i] {
			return false
		}
	}
	if this.TotalRound != that1.TotalRound {
		return false
	}
	if len(this.ScoreList) != len(that1.ScoreList) {
		return false
	}
	for i := range this.ScoreList {
		if this.ScoreList[i] != that1.ScoreList[i] {
			return false
		}
	}
	if this.HunCard != that1.HunCard {
		return false
	}
	if this.PreHunCard != that1.PreHunCard {
		return false
	}
	return true
}
func (this *EndRoundSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EndRoundSend)
	if !ok {
		that2, ok := that.(EndRoundSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *EndRoundRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EndRoundRecv)
	if !ok {
		that2, ok := that.(EndRoundRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.ItemList) != len(that1.ItemList) {
		return false
	}
	for i := range this.ItemList {
		if !this.ItemList[i].Equal(that1.ItemList[i]) {
			return false
		}
	}
	return true
}
func (this *SettlementSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SettlementSend)
	if !ok {
		that2, ok := that.(SettlementSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *SettlementRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SettlementRecv)
	if !ok {
		that2, ok := that.(SettlementRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.SettleList) != len(that1.SettleList) {
		return false
	}
	for i := range this.SettleList {
		if !this.SettleList[i].Equal(that1.SettleList[i]) {
			return false
		}
	}
	if this.IsVoteClose != that1.IsVoteClose {
		return false
	}
	return true
}
func (this *GameRecordSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GameRecordSend)
	if !ok {
		that2, ok := that.(GameRecordSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *GameRecordRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GameRecordRecv)
	if !ok {
		that2, ok := that.(GameRecordRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Records) != len(that1.Records) {
		return false
	}
	for i := range this.Records {
		if !this.Records[i].Equal(that1.Records[i]) {
			return false
		}
	}
	return true
}
func (this *DrawCardSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DrawCardSend)
	if !ok {
		that2, ok := that.(DrawCardSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *DrawCardRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DrawCardRecv)
	if !ok {
		that2, ok := that.(DrawCardRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Pos != that1.Pos {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if len(this.TingCards) != len(that1.TingCards) {
		return false
	}
	for i := range this.TingCards {
		if this.TingCards[i] != that1.TingCards[i] {
			return false
		}
	}
	return true
}
func (this *DiscardSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DiscardSend)
	if !ok {
		that2, ok := that.(DiscardSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	return true
}
func (this *DiscardRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DiscardRecv)
	if !ok {
		that2, ok := that.(DiscardRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Pos != that1.Pos {
		return false
	}
	if len(this.LeftCards) != len(that1.LeftCards) {
		return false
	}
	for i := range this.LeftCards {
		if this.LeftCards[i] != that1.LeftCards[i] {
			return false
		}
	}
	return true
}
func (this *OperationSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OperationSend)
	if !ok {
		that2, ok := that.(OperationSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operation.Equal(that1.Operation) {
		return false
	}
	return true
}
func (this *OperationRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OperationRecv)
	if !ok {
		that2, ok := that.(OperationRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Operation.Equal(that1.Operation) {
		return false
	}
	return true
}
func (this *DiscardNoticeSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DiscardNoticeSend)
	if !ok {
		that2, ok := that.(DiscardNoticeSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *DiscardNoticeRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DiscardNoticeRecv)
	if !ok {
		that2, ok := that.(DiscardNoticeRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Pos != that1.Pos {
		return false
	}
	return true
}
func (this *OperationNoticeSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OperationNoticeSend)
	if !ok {
		that2, ok := that.(OperationNoticeSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *OperationNoticeRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OperationNoticeRecv)
	if !ok {
		that2, ok := that.(OperationNoticeRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.OperationList) != len(that1.OperationList) {
		return false
	}
	for i := range this.OperationList {
		if !this.OperationList[i].Equal(that1.OperationList[i]) {
			return false
		}
	}
	return true
}
func (this *BuyPaoListSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BuyPaoListSend)
	if !ok {
		that2, ok := that.(BuyPaoListSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *BuyPaoListRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BuyPaoListRecv)
	if !ok {
		that2, ok := that.(BuyPaoListRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.PaoScoreList) != len(that1.PaoScoreList) {
		return false
	}
	for i := range this.PaoScoreList {
		if this.PaoScoreList[i] != that1.PaoScoreList[i] {
			return false
		}
	}
	return true
}
func (this *BuyPaoSend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BuyPaoSend)
	if !ok {
		that2, ok := that.(BuyPaoSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PaoScore != that1.PaoScore {
		return false
	}
	return true
}
func (this *BuyPaoRecv) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BuyPaoRecv)
	if !ok {
		that2, ok := that.(BuyPaoRecv)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.PaoScore != that1.PaoScore {
		return false
	}
	if this.Pos != that1.Pos {
		return false
	}
	return true
}
func (this *AbsMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pf.AbsMessage{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "MsgID: "+fmt.Sprintf("%#v", this.MsgID)+",\n")
	s = append(s, "MsgBody: "+fmt.Sprintf("%#v", this.MsgBody)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Player) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pf.Player{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	s = append(s, "Gender: "+fmt.Sprintf("%#v", this.Gender)+",\n")
	s = append(s, "Coins: "+fmt.Sprintf("%#v", this.Coins)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Jushu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pf.Jushu{")
	s = append(s, "Jushu: "+fmt.Sprintf("%#v", this.Jushu)+",\n")
	s = append(s, "Coins: "+fmt.Sprintf("%#v", this.Coins)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "MjType: "+fmt.Sprintf("%#v", this.MjType)+",\n")
	s = append(s, "MjDesc: "+fmt.Sprintf("%#v", this.MjDesc)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InvitePlayer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pf.InvitePlayer{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Goods) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pf.Goods{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Extra: "+fmt.Sprintf("%#v", this.Extra)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "IconUrl: "+fmt.Sprintf("%#v", this.IconUrl)+",\n")
	s = append(s, "PayType: "+fmt.Sprintf("%#v", this.PayType)+",\n")
	s = append(s, "ProductID: "+fmt.Sprintf("%#v", this.ProductID)+",\n")
	s = append(s, "Sort: "+fmt.Sprintf("%#v", this.Sort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pf.OrderStatus{")
	s = append(s, "OrderID: "+fmt.Sprintf("%#v", this.OrderID)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "ErrorDesc: "+fmt.Sprintf("%#v", this.ErrorDesc)+",\n")
	s = append(s, "JsonStr: "+fmt.Sprintf("%#v", this.JsonStr)+",\n")
	s = append(s, "GemID: "+fmt.Sprintf("%#v", this.GemID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.OrderData{")
	s = append(s, "PayType: "+fmt.Sprintf("%#v", this.PayType)+",\n")
	s = append(s, "JsonStr: "+fmt.Sprintf("%#v", this.JsonStr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoomPlayer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pf.RoomPlayer{")
	s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	if this.Player != nil {
		s = append(s, "Player: "+fmt.Sprintf("%#v", this.Player)+",\n")
	}
	s = append(s, "Latitude: "+fmt.Sprintf("%#v", this.Latitude)+",\n")
	s = append(s, "Longitude: "+fmt.Sprintf("%#v", this.Longitude)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CardsInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pf.CardsInfo{")
	s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	if this.PengCards != nil {
		s = append(s, "PengCards: "+fmt.Sprintf("%#v", this.PengCards)+",\n")
	}
	if this.ChiCards != nil {
		s = append(s, "ChiCards: "+fmt.Sprintf("%#v", this.ChiCards)+",\n")
	}
	if this.AnGangCards != nil {
		s = append(s, "AnGangCards: "+fmt.Sprintf("%#v", this.AnGangCards)+",\n")
	}
	if this.MingGangCards != nil {
		s = append(s, "MingGangCards: "+fmt.Sprintf("%#v", this.MingGangCards)+",\n")
	}
	if this.DiscardCards != nil {
		s = append(s, "DiscardCards: "+fmt.Sprintf("%#v", this.DiscardCards)+",\n")
	}
	if this.LeftCards != nil {
		s = append(s, "LeftCards: "+fmt.Sprintf("%#v", this.LeftCards)+",\n")
	}
	s = append(s, "DrawCard: "+fmt.Sprintf("%#v", this.DrawCard)+",\n")
	s = append(s, "PaoScore: "+fmt.Sprintf("%#v", this.PaoScore)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VoteInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.VoteInfo{")
	s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MutiHu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.MutiHu{")
	s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	if this.CardList != nil {
		s = append(s, "CardList: "+fmt.Sprintf("%#v", this.CardList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResultItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&pf.ResultItem{")
	s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	if this.PengCards != nil {
		s = append(s, "PengCards: "+fmt.Sprintf("%#v", this.PengCards)+",\n")
	}
	if this.ChiCards != nil {
		s = append(s, "ChiCards: "+fmt.Sprintf("%#v", this.ChiCards)+",\n")
	}
	if this.GangCards != nil {
		s = append(s, "GangCards: "+fmt.Sprintf("%#v", this.GangCards)+",\n")
	}
	if this.LeftCards != nil {
		s = append(s, "LeftCards: "+fmt.Sprintf("%#v", this.LeftCards)+",\n")
	}
	s = append(s, "DrawCard: "+fmt.Sprintf("%#v", this.DrawCard)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "IsHu: "+fmt.Sprintf("%#v", this.IsHu)+",\n")
	if this.HuTypes != nil {
		s = append(s, "HuTypes: "+fmt.Sprintf("%#v", this.HuTypes)+",\n")
	}
	s = append(s, "HuScore: "+fmt.Sprintf("%#v", this.HuScore)+",\n")
	s = append(s, "GangScore: "+fmt.Sprintf("%#v", this.GangScore)+",\n")
	s = append(s, "PaoScore: "+fmt.Sprintf("%#v", this.PaoScore)+",\n")
	s = append(s, "CurScore: "+fmt.Sprintf("%#v", this.CurScore)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SettleItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pf.SettleItem{")
	s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "ZiMoCnt: "+fmt.Sprintf("%#v", this.ZiMoCnt)+",\n")
	s = append(s, "JiePaoCnt: "+fmt.Sprintf("%#v", this.JiePaoCnt)+",\n")
	s = append(s, "DianPaoCnt: "+fmt.Sprintf("%#v", this.DianPaoCnt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordRound) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pf.RecordRound{")
	s = append(s, "CurRound: "+fmt.Sprintf("%#v", this.CurRound)+",\n")
	s = append(s, "RoundID: "+fmt.Sprintf("%#v", this.RoundID)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	if this.ScoreList != nil {
		s = append(s, "ScoreList: "+fmt.Sprintf("%#v", this.ScoreList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pf.RecordRoom{")
	s = append(s, "RoomID: "+fmt.Sprintf("%#v", this.RoomID)+",\n")
	s = append(s, "MjType: "+fmt.Sprintf("%#v", this.MjType)+",\n")
	s = append(s, "TotalRound: "+fmt.Sprintf("%#v", this.TotalRound)+",\n")
	s = append(s, "CreateTime: "+fmt.Sprintf("%#v", this.CreateTime)+",\n")
	if this.NameList != nil {
		s = append(s, "NameList: "+fmt.Sprintf("%#v", this.NameList)+",\n")
	}
	if this.ScoreList != nil {
		s = append(s, "ScoreList: "+fmt.Sprintf("%#v", this.ScoreList)+",\n")
	}
	if this.RoundList != nil {
		s = append(s, "RoundList: "+fmt.Sprintf("%#v", this.RoundList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OperationItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pf.OperationItem{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Keycard: "+fmt.Sprintf("%#v", this.Keycard)+",\n")
	if this.CardsList != nil {
		s = append(s, "CardsList: "+fmt.Sprintf("%#v", this.CardsList)+",\n")
	}
	s = append(s, "SrcPos: "+fmt.Sprintf("%#v", this.SrcPos)+",\n")
	s = append(s, "DesPos: "+fmt.Sprintf("%#v", this.DesPos)+",\n")
	if this.HuInfoList != nil {
		s = append(s, "HuInfoList: "+fmt.Sprintf("%#v", this.HuInfoList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pf.LoginSend{")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "LoginType: "+fmt.Sprintf("%#v", this.LoginType)+",\n")
	s = append(s, "Session: "+fmt.Sprintf("%#v", this.Session)+",\n")
	s = append(s, "MachineID: "+fmt.Sprintf("%#v", this.MachineID)+",\n")
	s = append(s, "PlayerID: "+fmt.Sprintf("%#v", this.PlayerID)+",\n")
	s = append(s, "RefreshToken: "+fmt.Sprintf("%#v", this.RefreshToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.LoginRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "LogicServer: "+fmt.Sprintf("%#v", this.LogicServer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogoutSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.LogoutSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogoutRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pf.LogoutRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.AuthSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pf.AuthRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DirtySend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.DirtySend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DirtyRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pf.DirtyRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "RoomID: "+fmt.Sprintf("%#v", this.RoomID)+",\n")
	s = append(s, "HighID: "+fmt.Sprintf("%#v", this.HighID)+",\n")
	if this.Player != nil {
		s = append(s, "Player: "+fmt.Sprintf("%#v", this.Player)+",\n")
	}
	if this.Jushus != nil {
		s = append(s, "Jushus: "+fmt.Sprintf("%#v", this.Jushus)+",\n")
	}
	s = append(s, "WchatID: "+fmt.Sprintf("%#v", this.WchatID)+",\n")
	s = append(s, "Module: "+fmt.Sprintf("%#v", this.Module)+",\n")
	s = append(s, "RefreshToken: "+fmt.Sprintf("%#v", this.RefreshToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ErrorSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.ErrorSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ErrorRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pf.ErrorRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FeedbackSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pf.FeedbackSend{")
	s = append(s, "PlayerID: "+fmt.Sprintf("%#v", this.PlayerID)+",\n")
	s = append(s, "ImgUrl: "+fmt.Sprintf("%#v", this.ImgUrl)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FeedbackRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pf.FeedbackRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResourceChangeSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.ResourceChangeSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResourceChangeRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pf.ResourceChangeRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Coins: "+fmt.Sprintf("%#v", this.Coins)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BroadcastSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.BroadcastSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BroadcastRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.BroadcastRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Text != nil {
		s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InviteCodeSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pf.InviteCodeSend{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InviteCodeRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pf.InviteCodeRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "HighID: "+fmt.Sprintf("%#v", this.HighID)+",\n")
	s = append(s, "Coins: "+fmt.Sprintf("%#v", this.Coins)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InviteListSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.InviteListSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InviteListRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.InviteListRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Players != nil {
		s = append(s, "Players: "+fmt.Sprintf("%#v", this.Players)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InviteAwardSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pf.InviteAwardSend{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InviteAwardRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pf.InviteAwardRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Coins: "+fmt.Sprintf("%#v", this.Coins)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GoodsListSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.GoodsListSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GoodsListRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.GoodsListRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Goods != nil {
		s = append(s, "Goods: "+fmt.Sprintf("%#v", this.Goods)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderApplySend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pf.OrderApplySend{")
	s = append(s, "PlayerID: "+fmt.Sprintf("%#v", this.PlayerID)+",\n")
	s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	s = append(s, "WaresID: "+fmt.Sprintf("%#v", this.WaresID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderApplyRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pf.OrderApplyRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Coins: "+fmt.Sprintf("%#v", this.Coins)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "OrderID: "+fmt.Sprintf("%#v", this.OrderID)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "PayType: "+fmt.Sprintf("%#v", this.PayType)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "ProductID: "+fmt.Sprintf("%#v", this.ProductID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderApplyNewSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pf.OrderApplyNewSend{")
	if this.OrderList != nil {
		s = append(s, "OrderList: "+fmt.Sprintf("%#v", this.OrderList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrderApplyNewRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pf.OrderApplyNewRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Coins: "+fmt.Sprintf("%#v", this.Coins)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	if this.OrderList != nil {
		s = append(s, "OrderList: "+fmt.Sprintf("%#v", this.OrderList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnterRoomSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pf.EnterRoomSend{")
	s = append(s, "RoomID: "+fmt.Sprintf("%#v", this.RoomID)+",\n")
	if this.Configs != nil {
		s = append(s, "Configs: "+fmt.Sprintf("%#v", this.Configs)+",\n")
	}
	s = append(s, "MjType: "+fmt.Sprintf("%#v", this.MjType)+",\n")
	s = append(s, "CostType: "+fmt.Sprintf("%#v", this.CostType)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Relink: "+fmt.Sprintf("%#v", this.Relink)+",\n")
	s = append(s, "Cheat: "+fmt.Sprintf("%#v", this.Cheat)+",\n")
	s = append(s, "Latitude: "+fmt.Sprintf("%#v", this.Latitude)+",\n")
	s = append(s, "Longitude: "+fmt.Sprintf("%#v", this.Longitude)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnterRoomRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&pf.EnterRoomRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "GameStatus: "+fmt.Sprintf("%#v", this.GameStatus)+",\n")
	s = append(s, "RoomID: "+fmt.Sprintf("%#v", this.RoomID)+",\n")
	s = append(s, "TotalRound: "+fmt.Sprintf("%#v", this.TotalRound)+",\n")
	s = append(s, "CurRound: "+fmt.Sprintf("%#v", this.CurRound)+",\n")
	s = append(s, "LeftCards: "+fmt.Sprintf("%#v", this.LeftCards)+",\n")
	s = append(s, "BankerPos: "+fmt.Sprintf("%#v", this.BankerPos)+",\n")
	s = append(s, "CurPos: "+fmt.Sprintf("%#v", this.CurPos)+",\n")
	s = append(s, "LastPos: "+fmt.Sprintf("%#v", this.LastPos)+",\n")
	if this.Configs != nil {
		s = append(s, "Configs: "+fmt.Sprintf("%#v", this.Configs)+",\n")
	}
	if this.PlayerList != nil {
		s = append(s, "PlayerList: "+fmt.Sprintf("%#v", this.PlayerList)+",\n")
	}
	if this.CardsInfoList != nil {
		s = append(s, "CardsInfoList: "+fmt.Sprintf("%#v", this.CardsInfoList)+",\n")
	}
	s = append(s, "HunCard: "+fmt.Sprintf("%#v", this.HunCard)+",\n")
	s = append(s, "MjType: "+fmt.Sprintf("%#v", this.MjType)+",\n")
	s = append(s, "Cheat: "+fmt.Sprintf("%#v", this.Cheat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OtherJoinSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.OtherJoinSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OtherJoinRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.OtherJoinRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Player != nil {
		s = append(s, "Player: "+fmt.Sprintf("%#v", this.Player)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExitRoomSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.ExitRoomSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExitRoomRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.ExitRoomRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloseRoomSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.CloseRoomSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloseRoomRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.CloseRoomRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "CloseType: "+fmt.Sprintf("%#v", this.CloseType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VoteCloseSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pf.VoteCloseSend{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VoteCloseRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pf.VoteCloseRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "LeftTime: "+fmt.Sprintf("%#v", this.LeftTime)+",\n")
	s = append(s, "FirstPos: "+fmt.Sprintf("%#v", this.FirstPos)+",\n")
	if this.VoteList != nil {
		s = append(s, "VoteList: "+fmt.Sprintf("%#v", this.VoteList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameChatSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pf.GameChatSend{")
	s = append(s, "Types: "+fmt.Sprintf("%#v", this.Types)+",\n")
	s = append(s, "MessID: "+fmt.Sprintf("%#v", this.MessID)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameChatRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pf.GameChatRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "PlayerID: "+fmt.Sprintf("%#v", this.PlayerID)+",\n")
	s = append(s, "NickName: "+fmt.Sprintf("%#v", this.NickName)+",\n")
	s = append(s, "Types: "+fmt.Sprintf("%#v", this.Types)+",\n")
	s = append(s, "MessID: "+fmt.Sprintf("%#v", this.MessID)+",\n")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrepareGameSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.PrepareGameSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrepareGameRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.PrepareGameRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelPrepareSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.CancelPrepareSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelPrepareRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.CancelPrepareRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartRoundSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.StartRoundSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StartRoundRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pf.StartRoundRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "CurRound: "+fmt.Sprintf("%#v", this.CurRound)+",\n")
	s = append(s, "LeftCards: "+fmt.Sprintf("%#v", this.LeftCards)+",\n")
	s = append(s, "BankerPos: "+fmt.Sprintf("%#v", this.BankerPos)+",\n")
	if this.CardsCount != nil {
		s = append(s, "CardsCount: "+fmt.Sprintf("%#v", this.CardsCount)+",\n")
	}
	if this.MyCards != nil {
		s = append(s, "MyCards: "+fmt.Sprintf("%#v", this.MyCards)+",\n")
	}
	s = append(s, "TotalRound: "+fmt.Sprintf("%#v", this.TotalRound)+",\n")
	if this.ScoreList != nil {
		s = append(s, "ScoreList: "+fmt.Sprintf("%#v", this.ScoreList)+",\n")
	}
	s = append(s, "HunCard: "+fmt.Sprintf("%#v", this.HunCard)+",\n")
	s = append(s, "PreHunCard: "+fmt.Sprintf("%#v", this.PreHunCard)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndRoundSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.EndRoundSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndRoundRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.EndRoundRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.ItemList != nil {
		s = append(s, "ItemList: "+fmt.Sprintf("%#v", this.ItemList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SettlementSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.SettlementSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SettlementRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pf.SettlementRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.SettleList != nil {
		s = append(s, "SettleList: "+fmt.Sprintf("%#v", this.SettleList)+",\n")
	}
	s = append(s, "IsVoteClose: "+fmt.Sprintf("%#v", this.IsVoteClose)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameRecordSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.GameRecordSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameRecordRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.GameRecordRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Records != nil {
		s = append(s, "Records: "+fmt.Sprintf("%#v", this.Records)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DrawCardSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.DrawCardSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DrawCardRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pf.DrawCardRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	if this.TingCards != nil {
		s = append(s, "TingCards: "+fmt.Sprintf("%#v", this.TingCards)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiscardSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pf.DiscardSend{")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiscardRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pf.DiscardRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	if this.LeftCards != nil {
		s = append(s, "LeftCards: "+fmt.Sprintf("%#v", this.LeftCards)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OperationSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pf.OperationSend{")
	if this.Operation != nil {
		s = append(s, "Operation: "+fmt.Sprintf("%#v", this.Operation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OperationRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.OperationRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Operation != nil {
		s = append(s, "Operation: "+fmt.Sprintf("%#v", this.Operation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiscardNoticeSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.DiscardNoticeSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiscardNoticeRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.DiscardNoticeRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OperationNoticeSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.OperationNoticeSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OperationNoticeRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.OperationNoticeRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.OperationList != nil {
		s = append(s, "OperationList: "+fmt.Sprintf("%#v", this.OperationList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BuyPaoListSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pf.BuyPaoListSend{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BuyPaoListRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pf.BuyPaoListRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.PaoScoreList != nil {
		s = append(s, "PaoScoreList: "+fmt.Sprintf("%#v", this.PaoScoreList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BuyPaoSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pf.BuyPaoSend{")
	s = append(s, "PaoScore: "+fmt.Sprintf("%#v", this.PaoScore)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BuyPaoRecv) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pf.BuyPaoRecv{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "PaoScore: "+fmt.Sprintf("%#v", this.PaoScore)+",\n")
	s = append(s, "Pos: "+fmt.Sprintf("%#v", this.Pos)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPf(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AbsMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AbsMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.Token)))
	i += copy(dAtA[i:], m.Token)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.MsgID))
	if m.MsgBody != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPf(dAtA, i, uint64(len(m.MsgBody)))
		i += copy(dAtA[i:], m.MsgBody)
	}
	return i, nil
}

func (m *Player) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.Nickname)))
	i += copy(dAtA[i:], m.Nickname)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.Avatar)))
	i += copy(dAtA[i:], m.Avatar)
	dAtA[i] = 0x20
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Gender))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Coins))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Cards))
	dAtA[i] = 0x3a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.Ip)))
	i += copy(dAtA[i:], m.Ip)
	return i, nil
}

func (m *Jushu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Jushu) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Jushu))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Coins))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Cards))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.MjType))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.MjDesc)))
	i += copy(dAtA[i:], m.MjDesc)
	return i, nil
}

func (m *InvitePlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvitePlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.Nickname)))
	i += copy(dAtA[i:], m.Nickname)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.Avatar)))
	i += copy(dAtA[i:], m.Avatar)
	dAtA[i] = 0x20
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.State))
	return i, nil
}

func (m *Goods) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Goods) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Count))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Extra))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Price))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.IconUrl)))
	i += copy(dAtA[i:], m.IconUrl)
	dAtA[i] = 0x30
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.PayType))
	dAtA[i] = 0x3a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.ProductID)))
	i += copy(dAtA[i:], m.ProductID)
	dAtA[i] = 0x40
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Sort))
	return i, nil
}

func (m *OrderStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.OrderID)))
	i += copy(dAtA[i:], m.OrderID)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.ErrorDesc)))
	i += copy(dAtA[i:], m.ErrorDesc)
	dAtA[i] = 0x22
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.JsonStr)))
	i += copy(dAtA[i:], m.JsonStr)
	dAtA[i] = 0x28
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.GemID))
	return i, nil
}

func (m *OrderData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.PayType))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.JsonStr)))
	i += copy(dAtA[i:], m.JsonStr)
	return i, nil
}

func (m *RoomPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Score))
	if m.Player != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPf(dAtA, i, uint64(m.Player.Size()))
		n1, err := m.Player.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	dAtA[i] = 0x21
	i++
	i = encodeFixed64Pf(dAtA, i, uint64(math.Float64bits(float64(m.Latitude))))
	dAtA[i] = 0x29
	i++
	i = encodeFixed64Pf(dAtA, i, uint64(math.Float64bits(float64(m.Longitude))))
	return i, nil
}

func (m *CardsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardsInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Pos))
	if len(m.PengCards) > 0 {
		for _, num := range m.PengCards {
			dAtA[i] = 0x10
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	if len(m.ChiCards) > 0 {
		for _, num := range m.ChiCards {
			dAtA[i] = 0x18
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	if len(m.AnGangCards) > 0 {
		for _, num := range m.AnGangCards {
			dAtA[i] = 0x20
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	if len(m.MingGangCards) > 0 {
		for _, num := range m.MingGangCards {
			dAtA[i] = 0x28
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	if len(m.DiscardCards) > 0 {
		for _, num := range m.DiscardCards {
			dAtA[i] = 0x30
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	if len(m.LeftCards) > 0 {
		for _, num := range m.LeftCards {
			dAtA[i] = 0x38
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x40
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.DrawCard))
	dAtA[i] = 0x48
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.PaoScore))
	return i, nil
}

func (m *VoteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Action))
	return i, nil
}

func (m *MutiHu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MutiHu) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Pos))
	if len(m.CardList) > 0 {
		for _, num := range m.CardList {
			dAtA[i] = 0x10
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *ResultItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Pos))
	if len(m.PengCards) > 0 {
		for _, num := range m.PengCards {
			dAtA[i] = 0x10
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	if len(m.ChiCards) > 0 {
		for _, num := range m.ChiCards {
			dAtA[i] = 0x18
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	if len(m.GangCards) > 0 {
		for _, num := range m.GangCards {
			dAtA[i] = 0x20
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	if len(m.LeftCards) > 0 {
		for _, num := range m.LeftCards {
			dAtA[i] = 0x28
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x30
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.DrawCard))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Score))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.IsHu))
	if len(m.HuTypes) > 0 {
		for _, num := range m.HuTypes {
			dAtA[i] = 0x48
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x50
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.HuScore))
	dAtA[i] = 0x58
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.GangScore))
	dAtA[i] = 0x60
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.PaoScore))
	dAtA[i] = 0x68
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.CurScore))
	return i, nil
}

func (m *SettleItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettleItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Score))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.ZiMoCnt))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.JiePaoCnt))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.DianPaoCnt))
	return i, nil
}

func (m *RecordRound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordRound) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.CurRound))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.RoundID))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.StartTime)))
	i += copy(dAtA[i:], m.StartTime)
	if len(m.ScoreList) > 0 {
		for _, num := range m.ScoreList {
			dAtA[i] = 0x20
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *RecordRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.RoomID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.MjType))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.TotalRound))
	dAtA[i] = 0x22
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.CreateTime)))
	i += copy(dAtA[i:], m.CreateTime)
	if len(m.NameList) > 0 {
		for _, s := range m.NameList {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ScoreList) > 0 {
		for _, num := range m.ScoreList {
			dAtA[i] = 0x30
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	if len(m.RoundList) > 0 {
		for _, msg := range m.RoundList {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintPf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OperationItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Keycard))
	if len(m.CardsList) > 0 {
		for _, num := range m.CardsList {
			dAtA[i] = 0x18
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.SrcPos))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.DesPos))
	if len(m.HuInfoList) > 0 {
		for _, msg := range m.HuInfoList {
			dAtA[i] = 0x32
			i++
			i = encodeVarintPf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LoginSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Channel))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Version))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.LoginType))
	dAtA[i] = 0x22
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.Session)))
	i += copy(dAtA[i:], m.Session)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.MachineID)))
	i += copy(dAtA[i:], m.MachineID)
	dAtA[i] = 0x30
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.PlayerID))
	dAtA[i] = 0x3a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.RefreshToken)))
	i += copy(dAtA[i:], m.RefreshToken)
	return i, nil
}

func (m *LoginRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.LogicServer)))
	i += copy(dAtA[i:], m.LogicServer)
	return i, nil
}

func (m *LogoutSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LogoutRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	return i, nil
}

func (m *AuthSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AuthRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	return i, nil
}

func (m *DirtySend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirtySend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DirtyRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirtyRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.RoomID))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.HighID))
	if m.Player != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPf(dAtA, i, uint64(m.Player.Size()))
		n2, err := m.Player.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Jushus) > 0 {
		for _, msg := range m.Jushus {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintPf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.WchatID)))
	i += copy(dAtA[i:], m.WchatID)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.Module)))
	i += copy(dAtA[i:], m.Module)
	dAtA[i] = 0x42
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.RefreshToken)))
	i += copy(dAtA[i:], m.RefreshToken)
	return i, nil
}

func (m *ErrorSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ErrorRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	return i, nil
}

func (m *FeedbackSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedbackSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.PlayerID))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.ImgUrl)))
	i += copy(dAtA[i:], m.ImgUrl)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	return i, nil
}

func (m *FeedbackRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedbackRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	return i, nil
}

func (m *ResourceChangeSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceChangeSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResourceChangeRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceChangeRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Coins))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Cards))
	return i, nil
}

func (m *BroadcastSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BroadcastRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	if len(m.Text) > 0 {
		for _, s := range m.Text {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *InviteCodeSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteCodeSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Code))
	return i, nil
}

func (m *InviteCodeRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteCodeRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.HighID))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Coins))
	return i, nil
}

func (m *InviteListSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteListSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InviteListRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteListRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InviteAwardSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteAwardSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Id))
	return i, nil
}

func (m *InviteAwardRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteAwardRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Coins))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Id))
	return i, nil
}

func (m *GoodsListSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsListSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GoodsListRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoodsListRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	if len(m.Goods) > 0 {
		for _, msg := range m.Goods {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OrderApplySend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderApplySend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.PlayerID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Channel))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.WaresID))
	return i, nil
}

func (m *OrderApplyRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderApplyRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Coins))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Cards))
	dAtA[i] = 0x22
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.OrderID)))
	i += copy(dAtA[i:], m.OrderID)
	dAtA[i] = 0x28
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Price))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.PayType))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Count))
	dAtA[i] = 0x42
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.ProductID)))
	i += copy(dAtA[i:], m.ProductID)
	return i, nil
}

func (m *OrderApplyNewSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderApplyNewSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderList) > 0 {
		for _, msg := range m.OrderList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OrderApplyNewRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderApplyNewRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Coins))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Cards))
	if len(m.OrderList) > 0 {
		for _, msg := range m.OrderList {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EnterRoomSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterRoomSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.RoomID))
	if len(m.Configs) > 0 {
		for _, num := range m.Configs {
			dAtA[i] = 0x10
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.MjType))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.CostType))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Round))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Relink))
	dAtA[i] = 0x38
	i++
	if m.Cheat {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x41
	i++
	i = encodeFixed64Pf(dAtA, i, uint64(math.Float64bits(float64(m.Latitude))))
	dAtA[i] = 0x49
	i++
	i = encodeFixed64Pf(dAtA, i, uint64(math.Float64bits(float64(m.Longitude))))
	return i, nil
}

func (m *EnterRoomRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterRoomRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.GameStatus))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.RoomID))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.TotalRound))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.CurRound))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.LeftCards))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.BankerPos))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.CurPos))
	dAtA[i] = 0x48
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.LastPos))
	if len(m.Configs) > 0 {
		for _, num := range m.Configs {
			dAtA[i] = 0x50
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	if len(m.PlayerList) > 0 {
		for _, msg := range m.PlayerList {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintPf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CardsInfoList) > 0 {
		for _, msg := range m.CardsInfoList {
			dAtA[i] = 0x62
			i++
			i = encodeVarintPf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x68
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.HunCard))
	dAtA[i] = 0x70
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.MjType))
	dAtA[i] = 0x78
	i++
	if m.Cheat {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *OtherJoinSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherJoinSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *OtherJoinRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherJoinRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	if m.Player != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPf(dAtA, i, uint64(m.Player.Size()))
		n3, err := m.Player.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ExitRoomSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExitRoomSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ExitRoomRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExitRoomRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Pos))
	return i, nil
}

func (m *CloseRoomSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseRoomSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CloseRoomRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseRoomRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.CloseType))
	return i, nil
}

func (m *VoteCloseSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteCloseSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Action))
	return i, nil
}

func (m *VoteCloseRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteCloseRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.LeftTime))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.FirstPos))
	if len(m.VoteList) > 0 {
		for _, msg := range m.VoteList {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GameChatSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameChatSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Types))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.MessID))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	return i, nil
}

func (m *GameChatRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameChatRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.PlayerID))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.NickName)))
	i += copy(dAtA[i:], m.NickName)
	dAtA[i] = 0x20
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Types))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.MessID))
	dAtA[i] = 0x32
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintPf(dAtA, i, uint64(len(m.Avatar)))
	i += copy(dAtA[i:], m.Avatar)
	return i, nil
}

func (m *PrepareGameSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareGameSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PrepareGameRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareGameRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Pos))
	return i, nil
}

func (m *CancelPrepareSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelPrepareSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CancelPrepareRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelPrepareRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Pos))
	return i, nil
}

func (m *StartRoundSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartRoundSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StartRoundRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartRoundRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.CurRound))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.LeftCards))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.BankerPos))
	if len(m.CardsCount) > 0 {
		for _, num := range m.CardsCount {
			dAtA[i] = 0x28
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	if len(m.MyCards) > 0 {
		for _, num := range m.MyCards {
			dAtA[i] = 0x30
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.TotalRound))
	if len(m.ScoreList) > 0 {
		for _, num := range m.ScoreList {
			dAtA[i] = 0x40
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x48
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.HunCard))
	dAtA[i] = 0x50
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.PreHunCard))
	return i, nil
}

func (m *EndRoundSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndRoundSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EndRoundRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndRoundRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	if len(m.ItemList) > 0 {
		for _, msg := range m.ItemList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SettlementSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettlementSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SettlementRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettlementRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	if len(m.SettleList) > 0 {
		for _, msg := range m.SettleList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.IsVoteClose))
	return i, nil
}

func (m *GameRecordSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRecordSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GameRecordRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRecordRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DrawCardSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawCardSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DrawCardRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DrawCardRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Pos))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Card))
	if len(m.TingCards) > 0 {
		for _, num := range m.TingCards {
			dAtA[i] = 0x20
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *DiscardSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscardSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Card))
	return i, nil
}

func (m *DiscardRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscardRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Card))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Pos))
	if len(m.LeftCards) > 0 {
		for _, num := range m.LeftCards {
			dAtA[i] = 0x20
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *OperationSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPf(dAtA, i, uint64(m.Operation.Size()))
		n4, err := m.Operation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *OperationRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	if m.Operation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPf(dAtA, i, uint64(m.Operation.Size()))
		n5, err := m.Operation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *DiscardNoticeSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscardNoticeSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DiscardNoticeRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscardNoticeRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Pos))
	return i, nil
}

func (m *OperationNoticeSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationNoticeSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *OperationNoticeRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationNoticeRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	if len(m.OperationList) > 0 {
		for _, msg := range m.OperationList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPf(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BuyPaoListSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyPaoListSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BuyPaoListRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyPaoListRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	if len(m.PaoScoreList) > 0 {
		for _, num := range m.PaoScoreList {
			dAtA[i] = 0x10
			i++
			i = encodeVarintPf(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *BuyPaoSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyPaoSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.PaoScore))
	return i, nil
}

func (m *BuyPaoRecv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyPaoRecv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Status))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.PaoScore))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPf(dAtA, i, uint64(m.Pos))
	return i, nil
}

func encodeFixed64Pf(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Pf(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPf(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AbsMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	n += 1 + l + sovPf(uint64(l))
	n += 1 + sovPf(uint64(m.MsgID))
	if m.MsgBody != nil {
		l = len(m.MsgBody)
		n += 1 + l + sovPf(uint64(l))
	}
	return n
}

func (m *Player) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Id))
	l = len(m.Nickname)
	n += 1 + l + sovPf(uint64(l))
	l = len(m.Avatar)
	n += 1 + l + sovPf(uint64(l))
	n += 1 + sovPf(uint64(m.Gender))
	n += 1 + sovPf(uint64(m.Coins))
	n += 1 + sovPf(uint64(m.Cards))
	l = len(m.Ip)
	n += 1 + l + sovPf(uint64(l))
	return n
}

func (m *Jushu) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Jushu))
	n += 1 + sovPf(uint64(m.Coins))
	n += 1 + sovPf(uint64(m.Cards))
	n += 1 + sovPf(uint64(m.MjType))
	l = len(m.MjDesc)
	n += 1 + l + sovPf(uint64(l))
	return n
}

func (m *InvitePlayer) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Id))
	l = len(m.Nickname)
	n += 1 + l + sovPf(uint64(l))
	l = len(m.Avatar)
	n += 1 + l + sovPf(uint64(l))
	n += 1 + sovPf(uint64(m.State))
	return n
}

func (m *Goods) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Id))
	n += 1 + sovPf(uint64(m.Count))
	n += 1 + sovPf(uint64(m.Extra))
	n += 1 + sovPf(uint64(m.Price))
	l = len(m.IconUrl)
	n += 1 + l + sovPf(uint64(l))
	n += 1 + sovPf(uint64(m.PayType))
	l = len(m.ProductID)
	n += 1 + l + sovPf(uint64(l))
	n += 1 + sovPf(uint64(m.Sort))
	return n
}

func (m *OrderStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.OrderID)
	n += 1 + l + sovPf(uint64(l))
	n += 1 + sovPf(uint64(m.Status))
	l = len(m.ErrorDesc)
	n += 1 + l + sovPf(uint64(l))
	l = len(m.JsonStr)
	n += 1 + l + sovPf(uint64(l))
	n += 1 + sovPf(uint64(m.GemID))
	return n
}

func (m *OrderData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.PayType))
	l = len(m.JsonStr)
	n += 1 + l + sovPf(uint64(l))
	return n
}

func (m *RoomPlayer) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Pos))
	n += 1 + sovPf(uint64(m.Score))
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovPf(uint64(l))
	}
	n += 9
	n += 9
	return n
}

func (m *CardsInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Pos))
	if len(m.PengCards) > 0 {
		for _, e := range m.PengCards {
			n += 1 + sovPf(uint64(e))
		}
	}
	if len(m.ChiCards) > 0 {
		for _, e := range m.ChiCards {
			n += 1 + sovPf(uint64(e))
		}
	}
	if len(m.AnGangCards) > 0 {
		for _, e := range m.AnGangCards {
			n += 1 + sovPf(uint64(e))
		}
	}
	if len(m.MingGangCards) > 0 {
		for _, e := range m.MingGangCards {
			n += 1 + sovPf(uint64(e))
		}
	}
	if len(m.DiscardCards) > 0 {
		for _, e := range m.DiscardCards {
			n += 1 + sovPf(uint64(e))
		}
	}
	if len(m.LeftCards) > 0 {
		for _, e := range m.LeftCards {
			n += 1 + sovPf(uint64(e))
		}
	}
	n += 1 + sovPf(uint64(m.DrawCard))
	n += 1 + sovPf(uint64(m.PaoScore))
	return n
}

func (m *VoteInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Pos))
	n += 1 + sovPf(uint64(m.Action))
	return n
}

func (m *MutiHu) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Pos))
	if len(m.CardList) > 0 {
		for _, e := range m.CardList {
			n += 1 + sovPf(uint64(e))
		}
	}
	return n
}

func (m *ResultItem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Pos))
	if len(m.PengCards) > 0 {
		for _, e := range m.PengCards {
			n += 1 + sovPf(uint64(e))
		}
	}
	if len(m.ChiCards) > 0 {
		for _, e := range m.ChiCards {
			n += 1 + sovPf(uint64(e))
		}
	}
	if len(m.GangCards) > 0 {
		for _, e := range m.GangCards {
			n += 1 + sovPf(uint64(e))
		}
	}
	if len(m.LeftCards) > 0 {
		for _, e := range m.LeftCards {
			n += 1 + sovPf(uint64(e))
		}
	}
	n += 1 + sovPf(uint64(m.DrawCard))
	n += 1 + sovPf(uint64(m.Score))
	n += 1 + sovPf(uint64(m.IsHu))
	if len(m.HuTypes) > 0 {
		for _, e := range m.HuTypes {
			n += 1 + sovPf(uint64(e))
		}
	}
	n += 1 + sovPf(uint64(m.HuScore))
	n += 1 + sovPf(uint64(m.GangScore))
	n += 1 + sovPf(uint64(m.PaoScore))
	n += 1 + sovPf(uint64(m.CurScore))
	return n
}

func (m *SettleItem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Pos))
	n += 1 + sovPf(uint64(m.Score))
	n += 1 + sovPf(uint64(m.ZiMoCnt))
	n += 1 + sovPf(uint64(m.JiePaoCnt))
	n += 1 + sovPf(uint64(m.DianPaoCnt))
	return n
}

func (m *RecordRound) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.CurRound))
	n += 1 + sovPf(uint64(m.RoundID))
	l = len(m.StartTime)
	n += 1 + l + sovPf(uint64(l))
	if len(m.ScoreList) > 0 {
		for _, e := range m.ScoreList {
			n += 1 + sovPf(uint64(e))
		}
	}
	return n
}

func (m *RecordRoom) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.RoomID))
	n += 1 + sovPf(uint64(m.MjType))
	n += 1 + sovPf(uint64(m.TotalRound))
	l = len(m.CreateTime)
	n += 1 + l + sovPf(uint64(l))
	if len(m.NameList) > 0 {
		for _, s := range m.NameList {
			l = len(s)
			n += 1 + l + sovPf(uint64(l))
		}
	}
	if len(m.ScoreList) > 0 {
		for _, e := range m.ScoreList {
			n += 1 + sovPf(uint64(e))
		}
	}
	if len(m.RoundList) > 0 {
		for _, e := range m.RoundList {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	return n
}

func (m *OperationItem) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Type))
	n += 1 + sovPf(uint64(m.Keycard))
	if len(m.CardsList) > 0 {
		for _, e := range m.CardsList {
			n += 1 + sovPf(uint64(e))
		}
	}
	n += 1 + sovPf(uint64(m.SrcPos))
	n += 1 + sovPf(uint64(m.DesPos))
	if len(m.HuInfoList) > 0 {
		for _, e := range m.HuInfoList {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	return n
}

func (m *LoginSend) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Channel))
	n += 1 + sovPf(uint64(m.Version))
	n += 1 + sovPf(uint64(m.LoginType))
	l = len(m.Session)
	n += 1 + l + sovPf(uint64(l))
	l = len(m.MachineID)
	n += 1 + l + sovPf(uint64(l))
	n += 1 + sovPf(uint64(m.PlayerID))
	l = len(m.RefreshToken)
	n += 1 + l + sovPf(uint64(l))
	return n
}

func (m *LoginRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	l = len(m.LogicServer)
	n += 1 + l + sovPf(uint64(l))
	return n
}

func (m *LogoutSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LogoutRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	return n
}

func (m *AuthSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AuthRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	return n
}

func (m *DirtySend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DirtyRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.RoomID))
	n += 1 + sovPf(uint64(m.HighID))
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovPf(uint64(l))
	}
	if len(m.Jushus) > 0 {
		for _, e := range m.Jushus {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	l = len(m.WchatID)
	n += 1 + l + sovPf(uint64(l))
	l = len(m.Module)
	n += 1 + l + sovPf(uint64(l))
	l = len(m.RefreshToken)
	n += 1 + l + sovPf(uint64(l))
	return n
}

func (m *ErrorSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ErrorRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	return n
}

func (m *FeedbackSend) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.PlayerID))
	l = len(m.ImgUrl)
	n += 1 + l + sovPf(uint64(l))
	l = len(m.Text)
	n += 1 + l + sovPf(uint64(l))
	return n
}

func (m *FeedbackRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	return n
}

func (m *ResourceChangeSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResourceChangeRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.Coins))
	n += 1 + sovPf(uint64(m.Cards))
	return n
}

func (m *BroadcastSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BroadcastRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	if len(m.Text) > 0 {
		for _, s := range m.Text {
			l = len(s)
			n += 1 + l + sovPf(uint64(l))
		}
	}
	return n
}

func (m *InviteCodeSend) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Code))
	return n
}

func (m *InviteCodeRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.HighID))
	n += 1 + sovPf(uint64(m.Coins))
	return n
}

func (m *InviteListSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *InviteListRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	return n
}

func (m *InviteAwardSend) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Id))
	return n
}

func (m *InviteAwardRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.Coins))
	n += 1 + sovPf(uint64(m.Id))
	return n
}

func (m *GoodsListSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GoodsListRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	if len(m.Goods) > 0 {
		for _, e := range m.Goods {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	return n
}

func (m *OrderApplySend) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.PlayerID))
	n += 1 + sovPf(uint64(m.Channel))
	n += 1 + sovPf(uint64(m.WaresID))
	return n
}

func (m *OrderApplyRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.Coins))
	n += 1 + sovPf(uint64(m.Cards))
	l = len(m.OrderID)
	n += 1 + l + sovPf(uint64(l))
	n += 1 + sovPf(uint64(m.Price))
	n += 1 + sovPf(uint64(m.PayType))
	n += 1 + sovPf(uint64(m.Count))
	l = len(m.ProductID)
	n += 1 + l + sovPf(uint64(l))
	return n
}

func (m *OrderApplyNewSend) Size() (n int) {
	var l int
	_ = l
	if len(m.OrderList) > 0 {
		for _, e := range m.OrderList {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	return n
}

func (m *OrderApplyNewRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.Coins))
	n += 1 + sovPf(uint64(m.Cards))
	if len(m.OrderList) > 0 {
		for _, e := range m.OrderList {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	return n
}

func (m *EnterRoomSend) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.RoomID))
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			n += 1 + sovPf(uint64(e))
		}
	}
	n += 1 + sovPf(uint64(m.MjType))
	n += 1 + sovPf(uint64(m.CostType))
	n += 1 + sovPf(uint64(m.Round))
	n += 1 + sovPf(uint64(m.Relink))
	n += 2
	n += 9
	n += 9
	return n
}

func (m *EnterRoomRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.GameStatus))
	n += 1 + sovPf(uint64(m.RoomID))
	n += 1 + sovPf(uint64(m.TotalRound))
	n += 1 + sovPf(uint64(m.CurRound))
	n += 1 + sovPf(uint64(m.LeftCards))
	n += 1 + sovPf(uint64(m.BankerPos))
	n += 1 + sovPf(uint64(m.CurPos))
	n += 1 + sovPf(uint64(m.LastPos))
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			n += 1 + sovPf(uint64(e))
		}
	}
	if len(m.PlayerList) > 0 {
		for _, e := range m.PlayerList {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	if len(m.CardsInfoList) > 0 {
		for _, e := range m.CardsInfoList {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	n += 1 + sovPf(uint64(m.HunCard))
	n += 1 + sovPf(uint64(m.MjType))
	n += 2
	return n
}

func (m *OtherJoinSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *OtherJoinRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovPf(uint64(l))
	}
	return n
}

func (m *ExitRoomSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ExitRoomRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.Pos))
	return n
}

func (m *CloseRoomSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CloseRoomRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.CloseType))
	return n
}

func (m *VoteCloseSend) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Action))
	return n
}

func (m *VoteCloseRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.LeftTime))
	n += 1 + sovPf(uint64(m.FirstPos))
	if len(m.VoteList) > 0 {
		for _, e := range m.VoteList {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	return n
}

func (m *GameChatSend) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Types))
	n += 1 + sovPf(uint64(m.MessID))
	l = len(m.Text)
	n += 1 + l + sovPf(uint64(l))
	return n
}

func (m *GameChatRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.PlayerID))
	l = len(m.NickName)
	n += 1 + l + sovPf(uint64(l))
	n += 1 + sovPf(uint64(m.Types))
	n += 1 + sovPf(uint64(m.MessID))
	l = len(m.Text)
	n += 1 + l + sovPf(uint64(l))
	l = len(m.Avatar)
	n += 1 + l + sovPf(uint64(l))
	return n
}

func (m *PrepareGameSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PrepareGameRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.Pos))
	return n
}

func (m *CancelPrepareSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CancelPrepareRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.Pos))
	return n
}

func (m *StartRoundSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StartRoundRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.CurRound))
	n += 1 + sovPf(uint64(m.LeftCards))
	n += 1 + sovPf(uint64(m.BankerPos))
	if len(m.CardsCount) > 0 {
		for _, e := range m.CardsCount {
			n += 1 + sovPf(uint64(e))
		}
	}
	if len(m.MyCards) > 0 {
		for _, e := range m.MyCards {
			n += 1 + sovPf(uint64(e))
		}
	}
	n += 1 + sovPf(uint64(m.TotalRound))
	if len(m.ScoreList) > 0 {
		for _, e := range m.ScoreList {
			n += 1 + sovPf(uint64(e))
		}
	}
	n += 1 + sovPf(uint64(m.HunCard))
	n += 1 + sovPf(uint64(m.PreHunCard))
	return n
}

func (m *EndRoundSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EndRoundRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	if len(m.ItemList) > 0 {
		for _, e := range m.ItemList {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	return n
}

func (m *SettlementSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SettlementRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	if len(m.SettleList) > 0 {
		for _, e := range m.SettleList {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	n += 1 + sovPf(uint64(m.IsVoteClose))
	return n
}

func (m *GameRecordSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GameRecordRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	return n
}

func (m *DrawCardSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DrawCardRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.Pos))
	n += 1 + sovPf(uint64(m.Card))
	if len(m.TingCards) > 0 {
		for _, e := range m.TingCards {
			n += 1 + sovPf(uint64(e))
		}
	}
	return n
}

func (m *DiscardSend) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Card))
	return n
}

func (m *DiscardRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.Card))
	n += 1 + sovPf(uint64(m.Pos))
	if len(m.LeftCards) > 0 {
		for _, e := range m.LeftCards {
			n += 1 + sovPf(uint64(e))
		}
	}
	return n
}

func (m *OperationSend) Size() (n int) {
	var l int
	_ = l
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovPf(uint64(l))
	}
	return n
}

func (m *OperationRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovPf(uint64(l))
	}
	return n
}

func (m *DiscardNoticeSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DiscardNoticeRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.Pos))
	return n
}

func (m *OperationNoticeSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *OperationNoticeRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	if len(m.OperationList) > 0 {
		for _, e := range m.OperationList {
			l = e.Size()
			n += 1 + l + sovPf(uint64(l))
		}
	}
	return n
}

func (m *BuyPaoListSend) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BuyPaoListRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	if len(m.PaoScoreList) > 0 {
		for _, e := range m.PaoScoreList {
			n += 1 + sovPf(uint64(e))
		}
	}
	return n
}

func (m *BuyPaoSend) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.PaoScore))
	return n
}

func (m *BuyPaoRecv) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovPf(uint64(m.Status))
	n += 1 + sovPf(uint64(m.PaoScore))
	n += 1 + sovPf(uint64(m.Pos))
	return n
}

func sovPf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPf(x uint64) (n int) {
	return sovPf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AbsMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AbsMessage{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`MsgID:` + fmt.Sprintf("%v", this.MsgID) + `,`,
		`MsgBody:` + fmt.Sprintf("%v", this.MsgBody) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Player) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Player{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Avatar:` + fmt.Sprintf("%v", this.Avatar) + `,`,
		`Gender:` + fmt.Sprintf("%v", this.Gender) + `,`,
		`Coins:` + fmt.Sprintf("%v", this.Coins) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Jushu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Jushu{`,
		`Jushu:` + fmt.Sprintf("%v", this.Jushu) + `,`,
		`Coins:` + fmt.Sprintf("%v", this.Coins) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`MjType:` + fmt.Sprintf("%v", this.MjType) + `,`,
		`MjDesc:` + fmt.Sprintf("%v", this.MjDesc) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InvitePlayer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InvitePlayer{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Avatar:` + fmt.Sprintf("%v", this.Avatar) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Goods) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Goods{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Extra:` + fmt.Sprintf("%v", this.Extra) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`IconUrl:` + fmt.Sprintf("%v", this.IconUrl) + `,`,
		`PayType:` + fmt.Sprintf("%v", this.PayType) + `,`,
		`ProductID:` + fmt.Sprintf("%v", this.ProductID) + `,`,
		`Sort:` + fmt.Sprintf("%v", this.Sort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderStatus{`,
		`OrderID:` + fmt.Sprintf("%v", this.OrderID) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`ErrorDesc:` + fmt.Sprintf("%v", this.ErrorDesc) + `,`,
		`JsonStr:` + fmt.Sprintf("%v", this.JsonStr) + `,`,
		`GemID:` + fmt.Sprintf("%v", this.GemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderData{`,
		`PayType:` + fmt.Sprintf("%v", this.PayType) + `,`,
		`JsonStr:` + fmt.Sprintf("%v", this.JsonStr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoomPlayer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoomPlayer{`,
		`Pos:` + fmt.Sprintf("%v", this.Pos) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Player:` + strings.Replace(fmt.Sprintf("%v", this.Player), "Player", "Player", 1) + `,`,
		`Latitude:` + fmt.Sprintf("%v", this.Latitude) + `,`,
		`Longitude:` + fmt.Sprintf("%v", this.Longitude) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CardsInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CardsInfo{`,
		`Pos:` + fmt.Sprintf("%v", this.Pos) + `,`,
		`PengCards:` + fmt.Sprintf("%v", this.PengCards) + `,`,
		`ChiCards:` + fmt.Sprintf("%v", this.ChiCards) + `,`,
		`AnGangCards:` + fmt.Sprintf("%v", this.AnGangCards) + `,`,
		`MingGangCards:` + fmt.Sprintf("%v", this.MingGangCards) + `,`,
		`DiscardCards:` + fmt.Sprintf("%v", this.DiscardCards) + `,`,
		`LeftCards:` + fmt.Sprintf("%v", this.LeftCards) + `,`,
		`DrawCard:` + fmt.Sprintf("%v", this.DrawCard) + `,`,
		`PaoScore:` + fmt.Sprintf("%v", this.PaoScore) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoteInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoteInfo{`,
		`Pos:` + fmt.Sprintf("%v", this.Pos) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MutiHu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MutiHu{`,
		`Pos:` + fmt.Sprintf("%v", this.Pos) + `,`,
		`CardList:` + fmt.Sprintf("%v", this.CardList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResultItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResultItem{`,
		`Pos:` + fmt.Sprintf("%v", this.Pos) + `,`,
		`PengCards:` + fmt.Sprintf("%v", this.PengCards) + `,`,
		`ChiCards:` + fmt.Sprintf("%v", this.ChiCards) + `,`,
		`GangCards:` + fmt.Sprintf("%v", this.GangCards) + `,`,
		`LeftCards:` + fmt.Sprintf("%v", this.LeftCards) + `,`,
		`DrawCard:` + fmt.Sprintf("%v", this.DrawCard) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`IsHu:` + fmt.Sprintf("%v", this.IsHu) + `,`,
		`HuTypes:` + fmt.Sprintf("%v", this.HuTypes) + `,`,
		`HuScore:` + fmt.Sprintf("%v", this.HuScore) + `,`,
		`GangScore:` + fmt.Sprintf("%v", this.GangScore) + `,`,
		`PaoScore:` + fmt.Sprintf("%v", this.PaoScore) + `,`,
		`CurScore:` + fmt.Sprintf("%v", this.CurScore) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SettleItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SettleItem{`,
		`Pos:` + fmt.Sprintf("%v", this.Pos) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`ZiMoCnt:` + fmt.Sprintf("%v", this.ZiMoCnt) + `,`,
		`JiePaoCnt:` + fmt.Sprintf("%v", this.JiePaoCnt) + `,`,
		`DianPaoCnt:` + fmt.Sprintf("%v", this.DianPaoCnt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordRound) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordRound{`,
		`CurRound:` + fmt.Sprintf("%v", this.CurRound) + `,`,
		`RoundID:` + fmt.Sprintf("%v", this.RoundID) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`ScoreList:` + fmt.Sprintf("%v", this.ScoreList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordRoom{`,
		`RoomID:` + fmt.Sprintf("%v", this.RoomID) + `,`,
		`MjType:` + fmt.Sprintf("%v", this.MjType) + `,`,
		`TotalRound:` + fmt.Sprintf("%v", this.TotalRound) + `,`,
		`CreateTime:` + fmt.Sprintf("%v", this.CreateTime) + `,`,
		`NameList:` + fmt.Sprintf("%v", this.NameList) + `,`,
		`ScoreList:` + fmt.Sprintf("%v", this.ScoreList) + `,`,
		`RoundList:` + strings.Replace(fmt.Sprintf("%v", this.RoundList), "RecordRound", "RecordRound", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OperationItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OperationItem{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Keycard:` + fmt.Sprintf("%v", this.Keycard) + `,`,
		`CardsList:` + fmt.Sprintf("%v", this.CardsList) + `,`,
		`SrcPos:` + fmt.Sprintf("%v", this.SrcPos) + `,`,
		`DesPos:` + fmt.Sprintf("%v", this.DesPos) + `,`,
		`HuInfoList:` + strings.Replace(fmt.Sprintf("%v", this.HuInfoList), "MutiHu", "MutiHu", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginSend{`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`LoginType:` + fmt.Sprintf("%v", this.LoginType) + `,`,
		`Session:` + fmt.Sprintf("%v", this.Session) + `,`,
		`MachineID:` + fmt.Sprintf("%v", this.MachineID) + `,`,
		`PlayerID:` + fmt.Sprintf("%v", this.PlayerID) + `,`,
		`RefreshToken:` + fmt.Sprintf("%v", this.RefreshToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LogicServer:` + fmt.Sprintf("%v", this.LogicServer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogoutSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogoutSend{`,
		`}`,
	}, "")
	return s
}
func (this *LogoutRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogoutRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthSend{`,
		`}`,
	}, "")
	return s
}
func (this *AuthRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DirtySend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DirtySend{`,
		`}`,
	}, "")
	return s
}
func (this *DirtyRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DirtyRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`RoomID:` + fmt.Sprintf("%v", this.RoomID) + `,`,
		`HighID:` + fmt.Sprintf("%v", this.HighID) + `,`,
		`Player:` + strings.Replace(fmt.Sprintf("%v", this.Player), "Player", "Player", 1) + `,`,
		`Jushus:` + strings.Replace(fmt.Sprintf("%v", this.Jushus), "Jushu", "Jushu", 1) + `,`,
		`WchatID:` + fmt.Sprintf("%v", this.WchatID) + `,`,
		`Module:` + fmt.Sprintf("%v", this.Module) + `,`,
		`RefreshToken:` + fmt.Sprintf("%v", this.RefreshToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ErrorSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorSend{`,
		`}`,
	}, "")
	return s
}
func (this *ErrorRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeedbackSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeedbackSend{`,
		`PlayerID:` + fmt.Sprintf("%v", this.PlayerID) + `,`,
		`ImgUrl:` + fmt.Sprintf("%v", this.ImgUrl) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeedbackRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeedbackRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceChangeSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResourceChangeSend{`,
		`}`,
	}, "")
	return s
}
func (this *ResourceChangeRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResourceChangeRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Coins:` + fmt.Sprintf("%v", this.Coins) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BroadcastSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BroadcastSend{`,
		`}`,
	}, "")
	return s
}
func (this *BroadcastRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BroadcastRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InviteCodeSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InviteCodeSend{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InviteCodeRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InviteCodeRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`HighID:` + fmt.Sprintf("%v", this.HighID) + `,`,
		`Coins:` + fmt.Sprintf("%v", this.Coins) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InviteListSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InviteListSend{`,
		`}`,
	}, "")
	return s
}
func (this *InviteListRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InviteListRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Players:` + strings.Replace(fmt.Sprintf("%v", this.Players), "InvitePlayer", "InvitePlayer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InviteAwardSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InviteAwardSend{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InviteAwardRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InviteAwardRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Coins:` + fmt.Sprintf("%v", this.Coins) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoodsListSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoodsListSend{`,
		`}`,
	}, "")
	return s
}
func (this *GoodsListRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoodsListRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Goods:` + strings.Replace(fmt.Sprintf("%v", this.Goods), "Goods", "Goods", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderApplySend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderApplySend{`,
		`PlayerID:` + fmt.Sprintf("%v", this.PlayerID) + `,`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`WaresID:` + fmt.Sprintf("%v", this.WaresID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderApplyRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderApplyRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Coins:` + fmt.Sprintf("%v", this.Coins) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`OrderID:` + fmt.Sprintf("%v", this.OrderID) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`PayType:` + fmt.Sprintf("%v", this.PayType) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`ProductID:` + fmt.Sprintf("%v", this.ProductID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderApplyNewSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderApplyNewSend{`,
		`OrderList:` + strings.Replace(fmt.Sprintf("%v", this.OrderList), "OrderData", "OrderData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrderApplyNewRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OrderApplyNewRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Coins:` + fmt.Sprintf("%v", this.Coins) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`OrderList:` + strings.Replace(fmt.Sprintf("%v", this.OrderList), "OrderStatus", "OrderStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnterRoomSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnterRoomSend{`,
		`RoomID:` + fmt.Sprintf("%v", this.RoomID) + `,`,
		`Configs:` + fmt.Sprintf("%v", this.Configs) + `,`,
		`MjType:` + fmt.Sprintf("%v", this.MjType) + `,`,
		`CostType:` + fmt.Sprintf("%v", this.CostType) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Relink:` + fmt.Sprintf("%v", this.Relink) + `,`,
		`Cheat:` + fmt.Sprintf("%v", this.Cheat) + `,`,
		`Latitude:` + fmt.Sprintf("%v", this.Latitude) + `,`,
		`Longitude:` + fmt.Sprintf("%v", this.Longitude) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnterRoomRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnterRoomRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`GameStatus:` + fmt.Sprintf("%v", this.GameStatus) + `,`,
		`RoomID:` + fmt.Sprintf("%v", this.RoomID) + `,`,
		`TotalRound:` + fmt.Sprintf("%v", this.TotalRound) + `,`,
		`CurRound:` + fmt.Sprintf("%v", this.CurRound) + `,`,
		`LeftCards:` + fmt.Sprintf("%v", this.LeftCards) + `,`,
		`BankerPos:` + fmt.Sprintf("%v", this.BankerPos) + `,`,
		`CurPos:` + fmt.Sprintf("%v", this.CurPos) + `,`,
		`LastPos:` + fmt.Sprintf("%v", this.LastPos) + `,`,
		`Configs:` + fmt.Sprintf("%v", this.Configs) + `,`,
		`PlayerList:` + strings.Replace(fmt.Sprintf("%v", this.PlayerList), "RoomPlayer", "RoomPlayer", 1) + `,`,
		`CardsInfoList:` + strings.Replace(fmt.Sprintf("%v", this.CardsInfoList), "CardsInfo", "CardsInfo", 1) + `,`,
		`HunCard:` + fmt.Sprintf("%v", this.HunCard) + `,`,
		`MjType:` + fmt.Sprintf("%v", this.MjType) + `,`,
		`Cheat:` + fmt.Sprintf("%v", this.Cheat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OtherJoinSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OtherJoinSend{`,
		`}`,
	}, "")
	return s
}
func (this *OtherJoinRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OtherJoinRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Player:` + strings.Replace(fmt.Sprintf("%v", this.Player), "RoomPlayer", "RoomPlayer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExitRoomSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExitRoomSend{`,
		`}`,
	}, "")
	return s
}
func (this *ExitRoomRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExitRoomRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Pos:` + fmt.Sprintf("%v", this.Pos) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloseRoomSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloseRoomSend{`,
		`}`,
	}, "")
	return s
}
func (this *CloseRoomRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloseRoomRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`CloseType:` + fmt.Sprintf("%v", this.CloseType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoteCloseSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoteCloseSend{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoteCloseRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoteCloseRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LeftTime:` + fmt.Sprintf("%v", this.LeftTime) + `,`,
		`FirstPos:` + fmt.Sprintf("%v", this.FirstPos) + `,`,
		`VoteList:` + strings.Replace(fmt.Sprintf("%v", this.VoteList), "VoteInfo", "VoteInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameChatSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameChatSend{`,
		`Types:` + fmt.Sprintf("%v", this.Types) + `,`,
		`MessID:` + fmt.Sprintf("%v", this.MessID) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameChatRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameChatRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`PlayerID:` + fmt.Sprintf("%v", this.PlayerID) + `,`,
		`NickName:` + fmt.Sprintf("%v", this.NickName) + `,`,
		`Types:` + fmt.Sprintf("%v", this.Types) + `,`,
		`MessID:` + fmt.Sprintf("%v", this.MessID) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Avatar:` + fmt.Sprintf("%v", this.Avatar) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrepareGameSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrepareGameSend{`,
		`}`,
	}, "")
	return s
}
func (this *PrepareGameRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrepareGameRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Pos:` + fmt.Sprintf("%v", this.Pos) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelPrepareSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelPrepareSend{`,
		`}`,
	}, "")
	return s
}
func (this *CancelPrepareRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelPrepareRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Pos:` + fmt.Sprintf("%v", this.Pos) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StartRoundSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartRoundSend{`,
		`}`,
	}, "")
	return s
}
func (this *StartRoundRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StartRoundRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`CurRound:` + fmt.Sprintf("%v", this.CurRound) + `,`,
		`LeftCards:` + fmt.Sprintf("%v", this.LeftCards) + `,`,
		`BankerPos:` + fmt.Sprintf("%v", this.BankerPos) + `,`,
		`CardsCount:` + fmt.Sprintf("%v", this.CardsCount) + `,`,
		`MyCards:` + fmt.Sprintf("%v", this.MyCards) + `,`,
		`TotalRound:` + fmt.Sprintf("%v", this.TotalRound) + `,`,
		`ScoreList:` + fmt.Sprintf("%v", this.ScoreList) + `,`,
		`HunCard:` + fmt.Sprintf("%v", this.HunCard) + `,`,
		`PreHunCard:` + fmt.Sprintf("%v", this.PreHunCard) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndRoundSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndRoundSend{`,
		`}`,
	}, "")
	return s
}
func (this *EndRoundRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndRoundRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`ItemList:` + strings.Replace(fmt.Sprintf("%v", this.ItemList), "ResultItem", "ResultItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SettlementSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SettlementSend{`,
		`}`,
	}, "")
	return s
}
func (this *SettlementRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SettlementRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`SettleList:` + strings.Replace(fmt.Sprintf("%v", this.SettleList), "SettleItem", "SettleItem", 1) + `,`,
		`IsVoteClose:` + fmt.Sprintf("%v", this.IsVoteClose) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameRecordSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameRecordSend{`,
		`}`,
	}, "")
	return s
}
func (this *GameRecordRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameRecordRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Records:` + strings.Replace(fmt.Sprintf("%v", this.Records), "RecordRoom", "RecordRoom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DrawCardSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DrawCardSend{`,
		`}`,
	}, "")
	return s
}
func (this *DrawCardRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DrawCardRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Pos:` + fmt.Sprintf("%v", this.Pos) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`TingCards:` + fmt.Sprintf("%v", this.TingCards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiscardSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiscardSend{`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiscardRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiscardRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Pos:` + fmt.Sprintf("%v", this.Pos) + `,`,
		`LeftCards:` + fmt.Sprintf("%v", this.LeftCards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OperationSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OperationSend{`,
		`Operation:` + strings.Replace(fmt.Sprintf("%v", this.Operation), "OperationItem", "OperationItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OperationRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OperationRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Operation:` + strings.Replace(fmt.Sprintf("%v", this.Operation), "OperationItem", "OperationItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiscardNoticeSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiscardNoticeSend{`,
		`}`,
	}, "")
	return s
}
func (this *DiscardNoticeRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiscardNoticeRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Pos:` + fmt.Sprintf("%v", this.Pos) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OperationNoticeSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OperationNoticeSend{`,
		`}`,
	}, "")
	return s
}
func (this *OperationNoticeRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OperationNoticeRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`OperationList:` + strings.Replace(fmt.Sprintf("%v", this.OperationList), "OperationItem", "OperationItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BuyPaoListSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BuyPaoListSend{`,
		`}`,
	}, "")
	return s
}
func (this *BuyPaoListRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BuyPaoListRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`PaoScoreList:` + fmt.Sprintf("%v", this.PaoScoreList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BuyPaoSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BuyPaoSend{`,
		`PaoScore:` + fmt.Sprintf("%v", this.PaoScore) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BuyPaoRecv) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BuyPaoRecv{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`PaoScore:` + fmt.Sprintf("%v", this.PaoScore) + `,`,
		`Pos:` + fmt.Sprintf("%v", this.Pos) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPf(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AbsMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AbsMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AbsMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgBody = append(m.MsgBody[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgBody == nil {
				m.MsgBody = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			m.Coins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coins |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			m.Cards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cards |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Jushu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Jushu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Jushu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jushu", wireType)
			}
			m.Jushu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jushu |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			m.Coins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coins |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			m.Cards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cards |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MjType", wireType)
			}
			m.MjType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MjType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MjDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MjDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvitePlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvitePlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvitePlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Goods) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Goods: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Goods: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			m.Extra = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Extra |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			m.PayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderStatus) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GemID", wireType)
			}
			m.GemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GemID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("orderID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			m.PayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("payType")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("jsonStr")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &Player{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Latitude = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Longitude = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PengCards = append(m.PengCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PengCards = append(m.PengCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PengCards", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChiCards = append(m.ChiCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChiCards = append(m.ChiCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChiCards", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AnGangCards = append(m.AnGangCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AnGangCards = append(m.AnGangCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AnGangCards", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MingGangCards = append(m.MingGangCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MingGangCards = append(m.MingGangCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MingGangCards", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DiscardCards = append(m.DiscardCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DiscardCards = append(m.DiscardCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscardCards", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LeftCards = append(m.LeftCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LeftCards = append(m.LeftCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCards", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawCard", wireType)
			}
			m.DrawCard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrawCard |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaoScore", wireType)
			}
			m.PaoScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaoScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MutiHu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MutiHu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MutiHu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardList = append(m.CardList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardList = append(m.CardList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PengCards = append(m.PengCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PengCards = append(m.PengCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PengCards", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChiCards = append(m.ChiCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChiCards = append(m.ChiCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChiCards", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GangCards = append(m.GangCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GangCards = append(m.GangCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GangCards", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LeftCards = append(m.LeftCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LeftCards = append(m.LeftCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCards", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawCard", wireType)
			}
			m.DrawCard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrawCard |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHu", wireType)
			}
			m.IsHu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsHu |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HuTypes = append(m.HuTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HuTypes = append(m.HuTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HuTypes", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HuScore", wireType)
			}
			m.HuScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HuScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GangScore", wireType)
			}
			m.GangScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GangScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaoScore", wireType)
			}
			m.PaoScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaoScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurScore", wireType)
			}
			m.CurScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettleItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettleItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettleItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZiMoCnt", wireType)
			}
			m.ZiMoCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZiMoCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JiePaoCnt", wireType)
			}
			m.JiePaoCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JiePaoCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DianPaoCnt", wireType)
			}
			m.DianPaoCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DianPaoCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordRound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordRound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordRound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurRound", wireType)
			}
			m.CurRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurRound |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundID", wireType)
			}
			m.RoundID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ScoreList = append(m.ScoreList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ScoreList = append(m.ScoreList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MjType", wireType)
			}
			m.MjType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MjType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRound", wireType)
			}
			m.TotalRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRound |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameList = append(m.NameList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ScoreList = append(m.ScoreList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ScoreList = append(m.ScoreList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreList", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundList = append(m.RoundList, &RecordRound{})
			if err := m.RoundList[len(m.RoundList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keycard", wireType)
			}
			m.Keycard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keycard |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardsList = append(m.CardsList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardsList = append(m.CardsList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardsList", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPos", wireType)
			}
			m.SrcPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesPos", wireType)
			}
			m.DesPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DesPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HuInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HuInfoList = append(m.HuInfoList, &MutiHu{})
			if err := m.HuInfoList[len(m.HuInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginType", wireType)
			}
			m.LoginType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Session = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicServer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicServer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirtySend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirtySend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirtySend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirtyRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirtyRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirtyRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighID", wireType)
			}
			m.HighID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &Player{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jushus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jushus = append(m.Jushus, &Jushu{})
			if err := m.Jushus[len(m.Jushus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WchatID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WchatID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedbackSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedbackSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedbackSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedbackRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedbackRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedbackRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceChangeSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceChangeSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceChangeSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceChangeRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceChangeRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceChangeRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			m.Coins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coins |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			m.Cards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cards |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = append(m.Text, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteCodeSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteCodeSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteCodeSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteCodeRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteCodeRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteCodeRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighID", wireType)
			}
			m.HighID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			m.Coins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coins |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteListSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteListSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteListSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteListRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteListRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteListRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &InvitePlayer{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteAwardSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteAwardSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteAwardSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteAwardRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteAwardRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteAwardRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			m.Coins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coins |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsListSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsListSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsListSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoodsListRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsListRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsListRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goods = append(m.Goods, &Goods{})
			if err := m.Goods[len(m.Goods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderApplySend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderApplySend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderApplySend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaresID", wireType)
			}
			m.WaresID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaresID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderApplyRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderApplyRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderApplyRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			m.Coins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coins |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			m.Cards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cards |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			m.PayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderApplyNewSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderApplyNewSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderApplyNewSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderList = append(m.OrderList, &OrderData{})
			if err := m.OrderList[len(m.OrderList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderApplyNewRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderApplyNewRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderApplyNewRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			m.Coins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coins |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			m.Cards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cards |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderList = append(m.OrderList, &OrderStatus{})
			if err := m.OrderList[len(m.OrderList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterRoomSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterRoomSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterRoomSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Configs = append(m.Configs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Configs = append(m.Configs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MjType", wireType)
			}
			m.MjType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MjType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostType", wireType)
			}
			m.CostType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CostType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relink", wireType)
			}
			m.Relink = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Relink |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cheat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cheat = bool(v != 0)
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Latitude = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Longitude = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterRoomRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterRoomRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterRoomRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStatus", wireType)
			}
			m.GameStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRound", wireType)
			}
			m.TotalRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRound |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurRound", wireType)
			}
			m.CurRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurRound |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCards", wireType)
			}
			m.LeftCards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftCards |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankerPos", wireType)
			}
			m.BankerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BankerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPos", wireType)
			}
			m.CurPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPos", wireType)
			}
			m.LastPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Configs = append(m.Configs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Configs = append(m.Configs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerList = append(m.PlayerList, &RoomPlayer{})
			if err := m.PlayerList[len(m.PlayerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardsInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardsInfoList = append(m.CardsInfoList, &CardsInfo{})
			if err := m.CardsInfoList[len(m.CardsInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HunCard", wireType)
			}
			m.HunCard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HunCard |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MjType", wireType)
			}
			m.MjType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MjType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cheat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cheat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherJoinSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherJoinSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherJoinSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherJoinRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherJoinRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherJoinRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &RoomPlayer{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitRoomSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitRoomSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitRoomSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitRoomRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitRoomRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitRoomRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseRoomSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseRoomSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseRoomSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseRoomRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseRoomRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseRoomRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseType", wireType)
			}
			m.CloseType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CloseType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteCloseSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteCloseSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteCloseSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteCloseRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteCloseRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteCloseRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTime", wireType)
			}
			m.LeftTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPos", wireType)
			}
			m.FirstPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteList = append(m.VoteList, &VoteInfo{})
			if err := m.VoteList[len(m.VoteList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameChatSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameChatSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameChatSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			m.Types = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Types |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessID", wireType)
			}
			m.MessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameChatRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameChatRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameChatRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerID", wireType)
			}
			m.PlayerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			m.Types = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Types |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessID", wireType)
			}
			m.MessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareGameSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareGameSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareGameSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareGameRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareGameRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareGameRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelPrepareSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelPrepareSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelPrepareSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelPrepareRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelPrepareRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelPrepareRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartRoundSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartRoundSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartRoundSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartRoundRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartRoundRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartRoundRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurRound", wireType)
			}
			m.CurRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurRound |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCards", wireType)
			}
			m.LeftCards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftCards |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankerPos", wireType)
			}
			m.BankerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BankerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CardsCount = append(m.CardsCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CardsCount = append(m.CardsCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CardsCount", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MyCards = append(m.MyCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MyCards = append(m.MyCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCards", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRound", wireType)
			}
			m.TotalRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRound |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ScoreList = append(m.ScoreList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ScoreList = append(m.ScoreList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreList", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HunCard", wireType)
			}
			m.HunCard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HunCard |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreHunCard", wireType)
			}
			m.PreHunCard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreHunCard |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndRoundSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndRoundSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndRoundSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndRoundRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndRoundRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndRoundRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemList = append(m.ItemList, &ResultItem{})
			if err := m.ItemList[len(m.ItemList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettlementSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettlementSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettlementSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettlementRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettlementRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettlementRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettleList = append(m.SettleList, &SettleItem{})
			if err := m.SettleList[len(m.SettleList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVoteClose", wireType)
			}
			m.IsVoteClose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsVoteClose |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRecordSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRecordSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRecordSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRecordRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRecordRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRecordRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &RecordRoom{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawCardSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawCardSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawCardSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DrawCardRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DrawCardRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DrawCardRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TingCards = append(m.TingCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TingCards = append(m.TingCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TingCards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscardSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscardSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscardSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscardRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscardRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscardRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LeftCards = append(m.LeftCards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LeftCards = append(m.LeftCards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &OperationItem{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &OperationItem{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscardNoticeSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscardNoticeSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscardNoticeSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscardNoticeRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscardNoticeRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscardNoticeRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationNoticeSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationNoticeSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationNoticeSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationNoticeRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationNoticeRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationNoticeRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationList = append(m.OperationList, &OperationItem{})
			if err := m.OperationList[len(m.OperationList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyPaoListSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyPaoListSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyPaoListSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyPaoListRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyPaoListRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyPaoListRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PaoScoreList = append(m.PaoScoreList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PaoScoreList = append(m.PaoScoreList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PaoScoreList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyPaoSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyPaoSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyPaoSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaoScore", wireType)
			}
			m.PaoScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaoScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyPaoRecv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyPaoRecv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyPaoRecv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaoScore", wireType)
			}
			m.PaoScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaoScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPf
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPf
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPf(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPf = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPf   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pf.proto", fileDescriptorPf) }

var fileDescriptorPf = []byte{
	// 2393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x8f, 0x1c, 0x47,
	0x15, 0x77, 0xcf, 0x77, 0xbf, 0x99, 0xd9, 0xed, 0xe9, 0xd9, 0xcd, 0x8e, 0x43, 0x98, 0xac, 0x3b,
	0x46, 0xb2, 0x10, 0xe4, 0xe0, 0x28, 0x42, 0x20, 0x0b, 0xb4, 0xde, 0x71, 0xec, 0x0d, 0x5e, 0x7b,
	0xd9, 0x75, 0x72, 0x03, 0xa9, 0xdc, 0x5d, 0x3b, 0xd3, 0xde, 0x99, 0xae, 0x51, 0x75, 0xf5, 0xae,
	0x97, 0x03, 0x04, 0xc1, 0x1f, 0xe0, 0x43, 0x0e, 0x80, 0x22, 0xc1, 0x31, 0x48, 0x39, 0x44, 0xe2,
	0xe3, 0xc4, 0x01, 0x24, 0x0e, 0x3e, 0x04, 0x29, 0x17, 0x24, 0x1f, 0x10, 0x8a, 0x17, 0x0e, 0x39,
	0x46, 0x22, 0x07, 0x0e, 0x1c, 0x50, 0xbd, 0xfe, 0xaa, 0xea, 0x99, 0x6d, 0x30, 0xf2, 0xad, 0xfb,
	0xd7, 0xd5, 0xaf, 0x7e, 0xef, 0xd5, 0xfb, 0x2c, 0x68, 0xcd, 0x0f, 0x5f, 0x9d, 0x73, 0x26, 0x98,
	0x5d, 0x99, 0x1f, 0x3a, 0xbb, 0x00, 0x5b, 0xf7, 0xc3, 0x5d, 0x1a, 0x86, 0x64, 0x4c, 0xed, 0x3e,
	0xd4, 0x05, 0x3b, 0xa2, 0xc1, 0xc0, 0xd8, 0x34, 0xae, 0x98, 0xd7, 0x6b, 0x8f, 0xff, 0xf6, 0xf2,
	0x05, 0x09, 0xce, 0xc2, 0xf1, 0xce, 0x68, 0x50, 0xd9, 0x34, 0xae, 0xd4, 0x13, 0x70, 0x1d, 0x9a,
	0xb3, 0x70, 0x7c, 0x9d, 0x79, 0xa7, 0x83, 0xea, 0xa6, 0x71, 0xa5, 0x13, 0xc3, 0xce, 0xcf, 0x0d,
	0x68, 0xec, 0x4d, 0xc9, 0x29, 0xe5, 0xb6, 0x05, 0x15, 0xdf, 0x43, 0x41, 0xe9, 0x3f, 0x2f, 0x40,
	0x2b, 0xf0, 0xdd, 0xa3, 0x80, 0xcc, 0x28, 0xca, 0x4a, 0x37, 0x58, 0x83, 0x06, 0x39, 0x26, 0x82,
	0x70, 0x14, 0xa5, 0xa0, 0x63, 0x1a, 0x78, 0x94, 0x0f, 0x6a, 0x8a, 0x8c, 0x3e, 0xd4, 0x5d, 0xe6,
	0x07, 0xe1, 0xa0, 0x5e, 0x00, 0x09, 0xf7, 0xc2, 0x41, 0x43, 0x01, 0xe5, 0xfe, 0xf3, 0x41, 0x33,
	0x97, 0xe8, 0x70, 0xa8, 0xbf, 0x19, 0x85, 0x93, 0x48, 0xae, 0x7f, 0x20, 0x1f, 0x34, 0x76, 0x99,
	0xe4, 0xca, 0x32, 0xc9, 0x55, 0x05, 0x5c, 0x83, 0xc6, 0xec, 0xc1, 0xbd, 0xd3, 0x39, 0xd5, 0x98,
	0x21, 0x3a, 0xa2, 0xa1, 0x8b, 0xd4, 0xd2, 0x3d, 0x5d, 0xe8, 0xec, 0x04, 0xc7, 0xbe, 0xa0, 0xcf,
	0xc9, 0x2a, 0x7d, 0xa8, 0x87, 0x82, 0x08, 0x6d, 0x6b, 0xe7, 0xd7, 0x06, 0xd4, 0x6f, 0x32, 0xe6,
	0x85, 0x4b, 0xc4, 0xa3, 0x5a, 0x51, 0x20, 0x8a, 0x6a, 0xd1, 0x87, 0x82, 0x13, 0x4d, 0xad, 0x3e,
	0xd4, 0xe7, 0xdc, 0x77, 0x75, 0xad, 0xd6, 0xa1, 0xe9, 0xbb, 0x2c, 0x78, 0x8b, 0x4f, 0x55, 0xb5,
	0x24, 0x3c, 0x27, 0xa7, 0x68, 0x03, 0xd5, 0xe6, 0x1b, 0x60, 0xce, 0x39, 0xf3, 0x22, 0x57, 0xec,
	0x8c, 0x54, 0xd3, 0xdb, 0x36, 0xd4, 0x42, 0xc6, 0xc5, 0xa0, 0xa5, 0xb0, 0xfe, 0x21, 0xb4, 0xef,
	0x72, 0x8f, 0xf2, 0x03, 0x41, 0x44, 0x14, 0x4a, 0x91, 0x4c, 0xbe, 0xee, 0x8c, 0x06, 0xc6, 0x66,
	0x45, 0x35, 0x43, 0x88, 0x0b, 0x34, 0x05, 0x36, 0xc0, 0xa4, 0x9c, 0x33, 0x8e, 0xf6, 0xae, 0xea,
	0xc4, 0x1e, 0x84, 0x2c, 0x38, 0x10, 0xb1, 0xdb, 0x28, 0x66, 0x1b, 0xd3, 0xd9, 0xce, 0x48, 0x75,
	0x1b, 0xe7, 0xeb, 0x60, 0x22, 0x81, 0x11, 0x11, 0x44, 0xd5, 0x48, 0x6e, 0x5f, 0x5f, 0x94, 0x57,
	0xc9, 0x59, 0x39, 0x3f, 0x32, 0x00, 0xf6, 0x19, 0x9b, 0x25, 0xa7, 0xda, 0x83, 0xea, 0x9c, 0x85,
	0x45, 0xbb, 0x87, 0x2e, 0xe3, 0x54, 0xa3, 0xfd, 0x22, 0x34, 0xe6, 0xf8, 0x07, 0x72, 0x6e, 0x5f,
	0x85, 0x57, 0xe7, 0x87, 0xaf, 0x26, 0x32, 0x5e, 0x80, 0xd6, 0x94, 0x08, 0x5f, 0x44, 0x5e, 0x7c,
	0x02, 0x46, 0xae, 0xea, 0x94, 0x05, 0xe3, 0xf8, 0x43, 0x3d, 0xff, 0xe0, 0x3c, 0x36, 0xc0, 0xdc,
	0x96, 0xce, 0xb9, 0x13, 0x1c, 0xb2, 0x65, 0x14, 0x7a, 0x60, 0xce, 0x69, 0x30, 0xc6, 0x35, 0x83,
	0xca, 0x66, 0xf5, 0x4a, 0xdd, 0xb6, 0xa0, 0xe5, 0x4e, 0xfc, 0xed, 0xc4, 0xa5, 0x25, 0xd2, 0x87,
	0x36, 0x09, 0x6e, 0x92, 0x74, 0x59, 0x0d, 0xc1, 0x75, 0xe8, 0xce, 0xfc, 0x60, 0x9c, 0xc3, 0x75,
	0x84, 0xd7, 0xa0, 0xe3, 0xf9, 0xa1, 0x0c, 0x88, 0xed, 0x24, 0xdc, 0x24, 0xda, 0x03, 0x73, 0x4a,
	0x0f, 0x45, 0x0c, 0x35, 0x11, 0x7a, 0x01, 0x5a, 0x23, 0x4e, 0x4e, 0x24, 0xa4, 0x1e, 0xb9, 0xc4,
	0xe7, 0x84, 0x1d, 0xa0, 0x5d, 0x4c, 0xe5, 0x24, 0x5e, 0x83, 0xd6, 0xdb, 0x4c, 0xd0, 0xf3, 0x14,
	0x91, 0xa1, 0xe0, 0x0a, 0x9f, 0x05, 0xaa, 0x31, 0x9d, 0xaf, 0x42, 0x63, 0x37, 0x12, 0xfe, 0xad,
	0x68, 0xd9, 0x2f, 0x52, 0x51, 0xc2, 0xbd, 0xdb, 0x7e, 0x28, 0x62, 0xd5, 0x9d, 0xf7, 0x2a, 0x00,
	0xfb, 0x34, 0x8c, 0xa6, 0x62, 0x47, 0xd0, 0xd9, 0xff, 0x6d, 0xaf, 0x1e, 0x98, 0xe3, 0x82, 0xb5,
	0x34, 0x03, 0xd4, 0x53, 0x03, 0x78, 0xa9, 0x01, 0x1a, 0xcb, 0xbc, 0xa2, 0xa9, 0x80, 0x36, 0xd4,
	0xfc, 0xf0, 0x56, 0xa4, 0x59, 0x6a, 0x15, 0x9a, 0x93, 0x48, 0x7a, 0x63, 0x38, 0x30, 0x93, 0x23,
	0x69, 0x4e, 0xa2, 0xd8, 0x72, 0xa0, 0x07, 0x82, 0xa4, 0x13, 0x7f, 0x68, 0x9f, 0x63, 0xea, 0x8e,
	0x8e, 0xbb, 0x11, 0x8f, 0xf1, 0xae, 0x62, 0xcd, 0x1f, 0x00, 0x1c, 0x50, 0x21, 0xa6, 0xf4, 0x3c,
	0xeb, 0x2c, 0x75, 0xe8, 0x75, 0x68, 0x7e, 0xdf, 0xdf, 0x65, 0xdb, 0x81, 0xd0, 0x52, 0xc9, 0x06,
	0x98, 0x0f, 0x7c, 0xba, 0x47, 0xf0, 0x83, 0x9a, 0x4e, 0x06, 0x00, 0x9e, 0x4f, 0x82, 0xe4, 0x8b,
	0x1a, 0x8c, 0x13, 0x68, 0xef, 0x53, 0x97, 0x71, 0x6f, 0x9f, 0x45, 0x81, 0x97, 0xd0, 0xc4, 0x67,
	0x8d, 0xc5, 0x3a, 0x34, 0xb9, 0x04, 0x0b, 0xe5, 0x68, 0x03, 0xcc, 0x50, 0x10, 0x2e, 0xee, 0xf9,
	0x33, 0xaa, 0xe5, 0x83, 0x1e, 0x98, 0xc8, 0x1a, 0x1d, 0x01, 0x8f, 0xcb, 0xf9, 0xad, 0x8c, 0xdd,
	0x64, 0x2b, 0x36, 0x93, 0xce, 0xc5, 0x19, 0x9b, 0x61, 0xda, 0x59, 0x96, 0xe3, 0x2b, 0x3a, 0x7d,
	0xc1, 0x04, 0x99, 0xc6, 0xbc, 0xaa, 0xfa, 0x17, 0x97, 0x53, 0x22, 0x28, 0x32, 0x50, 0x53, 0x8f,
	0x05, 0x2d, 0x99, 0xdb, 0x91, 0x80, 0x74, 0x0e, 0x53, 0xe7, 0x14, 0xc7, 0x90, 0x03, 0x26, 0xaa,
	0x85, 0x90, 0x8c, 0xa1, 0xf6, 0xd5, 0x55, 0x99, 0x1b, 0x14, 0x93, 0x38, 0x3f, 0x33, 0xa0, 0x7b,
	0x77, 0x4e, 0x39, 0x91, 0x91, 0x80, 0xa7, 0x64, 0x43, 0x4d, 0xc4, 0x09, 0x4b, 0x33, 0xd0, 0x11,
	0x3d, 0x95, 0xbe, 0xaf, 0x31, 0xef, 0x81, 0x89, 0x85, 0x0c, 0x37, 0xa8, 0x26, 0xd1, 0xdc, 0x08,
	0xb9, 0xbb, 0xc7, 0xc2, 0x62, 0x19, 0xf3, 0x68, 0x28, 0x51, 0xb5, 0xc2, 0x0e, 0x01, 0x26, 0x91,
	0x0c, 0xcf, 0x8c, 0x73, 0x92, 0xbc, 0xe2, 0x08, 0x74, 0x7e, 0x67, 0x80, 0x79, 0x9b, 0x8d, 0xfd,
	0xe0, 0x80, 0x06, 0x9e, 0xe4, 0xe0, 0x4e, 0x48, 0x10, 0xd0, 0x69, 0x91, 0xda, 0x31, 0xe5, 0x61,
	0x21, 0x8e, 0xe3, 0x04, 0x37, 0xf6, 0x03, 0xb4, 0x76, 0x55, 0x5f, 0x1f, 0xd2, 0x10, 0xd7, 0xab,
	0x06, 0xdd, 0x00, 0x73, 0x46, 0xdc, 0x89, 0x1f, 0xd0, 0x24, 0x9f, 0x9b, 0x8a, 0xcb, 0x63, 0x2e,
	0xdd, 0x19, 0x69, 0x41, 0xf7, 0x22, 0x74, 0x38, 0x3d, 0xe4, 0x34, 0x9c, 0xdc, 0xc3, 0xe6, 0x46,
	0xed, 0x09, 0xae, 0x25, 0xbc, 0xf7, 0xa9, 0x7b, 0xac, 0xd4, 0x1a, 0x95, 0xf6, 0x45, 0x68, 0x4b,
	0x7e, 0xee, 0x01, 0xe5, 0xc7, 0x94, 0xab, 0x35, 0xda, 0xe9, 0x00, 0xdc, 0x66, 0x63, 0x16, 0x09,
	0xa9, 0xb6, 0xe3, 0xa4, 0x6f, 0xe7, 0x0b, 0x73, 0x00, 0x5a, 0x5b, 0x91, 0x98, 0xe0, 0xfa, 0xcd,
	0xf8, 0xb9, 0x64, 0x75, 0x1b, 0xcc, 0x91, 0xcf, 0xc5, 0x29, 0x2e, 0xff, 0xb3, 0x91, 0xbc, 0x95,
	0x70, 0xcd, 0x9d, 0xb9, 0xa2, 0xa3, 0x13, 0x7f, 0x3c, 0xd9, 0x19, 0x69, 0xe6, 0xcd, 0x8b, 0x51,
	0x6d, 0xa1, 0x18, 0x5d, 0x84, 0x06, 0x76, 0x48, 0x71, 0x3e, 0x6b, 0x5f, 0x35, 0xe5, 0xb7, 0xb8,
	0x79, 0x5a, 0x87, 0xe6, 0x89, 0x3b, 0x21, 0x22, 0x31, 0xb2, 0x52, 0xa7, 0x67, 0xcc, 0x8b, 0xa6,
	0x54, 0xab, 0xfb, 0x45, 0xd3, 0xb7, 0x14, 0xe3, 0xb5, 0xc1, 0xbc, 0x21, 0x6b, 0x38, 0x2a, 0x77,
	0x29, 0x79, 0x29, 0x31, 0xc6, 0x1e, 0x74, 0xde, 0xa0, 0xd4, 0xbb, 0x4f, 0xdc, 0x23, 0xf4, 0x32,
	0xf5, 0xb8, 0x0b, 0x36, 0xf0, 0x67, 0x63, 0xd9, 0xb1, 0x54, 0xf4, 0x0e, 0x44, 0xd0, 0x87, 0x42,
	0x4d, 0x0e, 0xce, 0xe5, 0x5c, 0x62, 0xc9, 0xbe, 0x6b, 0x60, 0xef, 0xd3, 0x90, 0x45, 0xdc, 0xa5,
	0xdb, 0x13, 0x12, 0x8c, 0x29, 0x12, 0xbe, 0x57, 0x44, 0x4b, 0x4e, 0xe5, 0x7f, 0x6e, 0x2d, 0x9d,
	0x55, 0xe8, 0x5e, 0xe7, 0x8c, 0x78, 0x2e, 0x09, 0x63, 0x9f, 0x7a, 0x4d, 0x01, 0x4a, 0x76, 0xe8,
	0x24, 0xda, 0xc9, 0xaa, 0x65, 0x3a, 0x97, 0x61, 0x25, 0x6e, 0x3a, 0xb7, 0x99, 0x87, 0x6c, 0xa5,
	0xf6, 0x2e, 0xf3, 0xb4, 0x4c, 0xe1, 0x7c, 0x47, 0x5d, 0x55, 0xee, 0x53, 0x89, 0xf7, 0x54, 0x96,
	0xe9, 0xa4, 0xd2, 0xb7, 0x52, 0x91, 0x32, 0x4d, 0x20, 0xff, 0x1d, 0x15, 0x29, 0xd9, 0xe4, 0x12,
	0x34, 0xe3, 0xc3, 0x8c, 0x2b, 0x6f, 0xfb, 0xaa, 0x25, 0x3d, 0x4e, 0x6d, 0x9d, 0x9d, 0x57, 0x60,
	0x35, 0x7e, 0xdf, 0x3a, 0x21, 0xdc, 0x43, 0xb5, 0x16, 0xda, 0x5d, 0xe7, 0x8e, 0xb6, 0xe8, 0x59,
	0xcf, 0x24, 0x96, 0x57, 0x38, 0x10, 0xec, 0xac, 0x33, 0x85, 0xbe, 0xa5, 0x00, 0x25, 0xe2, 0x07,
	0x50, 0x1f, 0xcb, 0x65, 0x89, 0x36, 0x18, 0x3f, 0xf8, 0x9f, 0xf3, 0x36, 0xac, 0x60, 0xd7, 0xb9,
	0x35, 0x9f, 0x4f, 0x4f, 0x4b, 0x1d, 0x59, 0x49, 0xa3, 0x85, 0x9a, 0x7b, 0x42, 0x38, 0x0d, 0xf5,
	0x70, 0x76, 0xfe, 0x68, 0xa8, 0x82, 0x9f, 0x87, 0x37, 0xaa, 0x2d, 0x79, 0xa1, 0x99, 0x8e, 0x07,
	0x85, 0xba, 0xbe, 0x76, 0xd9, 0x44, 0x90, 0x8d, 0x1f, 0xcd, 0xf3, 0xc6, 0x04, 0x35, 0x25, 0xbc,
	0x0e, 0xbd, 0x5c, 0x85, 0x3b, 0xf4, 0x04, 0xcd, 0xb3, 0x09, 0x26, 0xb2, 0xc0, 0xd2, 0x63, 0xa0,
	0x39, 0xbb, 0xd2, 0x9c, 0x59, 0xef, 0xee, 0x9c, 0x14, 0x7e, 0x7b, 0x2e, 0xca, 0x3b, 0xea, 0xb6,
	0xb5, 0xbc, 0x24, 0x2b, 0x33, 0x8b, 0xf3, 0x17, 0x03, 0xba, 0x37, 0x02, 0x41, 0xb9, 0xec, 0x24,
	0x90, 0xec, 0xf2, 0x6e, 0x62, 0x15, 0x9a, 0x2e, 0x0b, 0x0e, 0xfd, 0x71, 0xda, 0x57, 0xe6, 0xed,
	0x45, 0xb5, 0xd0, 0x9b, 0xb1, 0x50, 0x2c, 0x8c, 0x96, 0x7d, 0xa8, 0x63, 0x77, 0xa0, 0x19, 0x5c,
	0xee, 0x44, 0xa7, 0x7e, 0x70, 0xb4, 0x60, 0xef, 0x09, 0x25, 0xb1, 0xbd, 0x5b, 0xb9, 0xdc, 0x6c,
	0xb4, 0x68, 0x9d, 0x37, 0x5a, 0x98, 0xca, 0x68, 0xf1, 0xe3, 0xaa, 0xa2, 0x57, 0xa9, 0x97, 0xc3,
	0x98, 0xcc, 0xe8, 0xc1, 0xe2, 0x80, 0x96, 0xdb, 0xa1, 0x7a, 0x6e, 0xff, 0x54, 0x5b, 0x68, 0x4b,
	0xf7, 0x17, 0xb4, 0xdc, 0x50, 0x7b, 0xeb, 0xc2, 0xa8, 0x79, 0x9f, 0x04, 0x47, 0x94, 0xcb, 0x56,
	0xa5, 0xa9, 0xef, 0xec, 0x46, 0x88, 0xb6, 0x74, 0xf7, 0x9c, 0x92, 0x50, 0x48, 0xd8, 0x5c, 0x7e,
	0x30, 0x90, 0x34, 0x62, 0x10, 0xc7, 0x22, 0x1e, 0x7b, 0x1b, 0x8f, 0x7d, 0x05, 0x3b, 0xb1, 0x7c,
	0xda, 0xbb, 0x0c, 0x5d, 0x37, 0x9d, 0xbb, 0x70, 0x59, 0x27, 0x77, 0xca, 0x7c, 0x20, 0xc3, 0x86,
	0x3d, 0xc0, 0x09, 0xa0, 0xbb, 0xb4, 0xb1, 0x5c, 0x59, 0x76, 0x6c, 0xab, 0xf9, 0xb1, 0xc9, 0xdc,
	0x73, 0x57, 0x4c, 0x28, 0x7f, 0x93, 0xc5, 0x7d, 0x95, 0x73, 0x43, 0x01, 0x4a, 0x4e, 0x65, 0x98,
	0x15, 0xf6, 0x0a, 0x16, 0xf6, 0x02, 0x7f, 0x67, 0x05, 0x3a, 0x37, 0x1e, 0xfa, 0x22, 0xf5, 0x59,
	0xe7, 0x6b, 0xf9, 0x7b, 0x89, 0xd4, 0x64, 0x24, 0xa8, 0xe8, 0xc9, 0x71, 0x7b, 0xca, 0x42, 0x9a,
	0x49, 0xfa, 0xa6, 0x02, 0x94, 0x88, 0xda, 0x00, 0xd3, 0x95, 0xcb, 0x8a, 0xfd, 0xb5, 0xf3, 0x25,
	0xe8, 0xca, 0x39, 0x10, 0x65, 0xa4, 0xe1, 0x94, 0x4c, 0x7e, 0x6a, 0x92, 0x8f, 0x94, 0x65, 0x25,
	0xdb, 0x48, 0xb7, 0xa7, 0x87, 0xf1, 0x4c, 0x50, 0xd1, 0xf1, 0x43, 0x9f, 0xc7, 0xce, 0x50, 0xd5,
	0xec, 0xd6, 0x3a, 0x66, 0x82, 0x2a, 0x01, 0xdf, 0x91, 0x96, 0x4b, 0x27, 0x53, 0x67, 0x17, 0x3a,
	0x37, 0xc9, 0x4c, 0x96, 0x7b, 0x2c, 0x05, 0x78, 0x5b, 0x86, 0x13, 0x5a, 0x71, 0x70, 0xa0, 0x61,
	0x58, 0xa8, 0x96, 0xcb, 0xba, 0x8f, 0x5f, 0x19, 0xb9, 0xbc, 0x72, 0x2d, 0xb2, 0xea, 0x50, 0x59,
	0xbc, 0x37, 0xba, 0x43, 0x0a, 0x13, 0x4f, 0xc6, 0xaa, 0xb6, 0x94, 0x55, 0x7d, 0x09, 0xab, 0xc6,
	0xd2, 0x6b, 0x27, 0xb5, 0x4d, 0xee, 0xc1, 0xea, 0x1e, 0xa7, 0x73, 0xc2, 0xa9, 0x64, 0x8c, 0x67,
	0xfd, 0x0d, 0x0d, 0x7a, 0x36, 0xc7, 0xe9, 0x43, 0x6f, 0x9b, 0x04, 0x2e, 0x9d, 0x26, 0x12, 0x50,
	0xe0, 0xb5, 0x02, 0xf8, 0x6c, 0x22, 0x2d, 0x58, 0x39, 0x90, 0x13, 0x20, 0xa6, 0x10, 0x94, 0xf7,
	0x4f, 0x43, 0x85, 0xca, 0x2d, 0x9c, 0xe5, 0x9e, 0xca, 0x79, 0xb9, 0xa7, 0x7a, 0x5e, 0xee, 0xa9,
	0x69, 0x06, 0x05, 0xcc, 0x0c, 0xdb, 0x58, 0xf2, 0xe2, 0xab, 0x80, 0x55, 0x68, 0xce, 0x4e, 0xd5,
	0xfb, 0x12, 0x3d, 0x09, 0x36, 0xf5, 0x21, 0x2d, 0x1f, 0x0c, 0x5b, 0xf9, 0xd8, 0x1f, 0x67, 0x11,
	0x53, 0x4f, 0xa4, 0x73, 0x4e, 0x6f, 0x25, 0x5f, 0x94, 0x0b, 0x01, 0x0c, 0xee, 0xc0, 0xcb, 0xad,
	0xf0, 0x46, 0xfe, 0x5e, 0x62, 0x82, 0x4d, 0x68, 0xf9, 0x82, 0xce, 0xb2, 0xeb, 0x92, 0x34, 0x69,
	0x64, 0xf7, 0x25, 0x68, 0x5f, 0xbc, 0x1f, 0x98, 0xd1, 0x20, 0xee, 0x84, 0xa8, 0x8a, 0x94, 0xc8,
	0x76, 0xd2, 0x9b, 0x85, 0xa2, 0x74, 0xe5, 0xbe, 0xe1, 0x22, 0xb4, 0xfd, 0x30, 0x8b, 0xe9, 0x62,
	0x4f, 0x99, 0x38, 0x18, 0x8b, 0xbb, 0x3e, 0xe7, 0xa6, 0x8a, 0x94, 0x6c, 0xfc, 0x32, 0x34, 0x39,
	0xae, 0x09, 0x75, 0x9d, 0xd2, 0xd1, 0x5f, 0xda, 0x2a, 0xbd, 0xa6, 0x42, 0xc1, 0xdf, 0xcb, 0xdf,
	0x9f, 0xc9, 0xf9, 0xb0, 0xbd, 0x96, 0x07, 0x51, 0xd5, 0x0f, 0x53, 0xf8, 0xda, 0x45, 0x91, 0x73,
	0x09, 0xda, 0xa3, 0xf8, 0xfe, 0x2c, 0x6b, 0xca, 0xe5, 0x5f, 0x6a, 0x6a, 0xfb, 0x6e, 0xb6, 0xa4,
	0x84, 0x41, 0xfa, 0x63, 0x65, 0x91, 0x55, 0x81, 0x41, 0xee, 0xbf, 0x31, 0x83, 0xd7, 0x95, 0x2b,
	0x04, 0xe4, 0x70, 0x19, 0x4c, 0x96, 0x02, 0xb8, 0x47, 0xfb, 0x6a, 0x0f, 0xbb, 0x1c, 0xf5, 0xa2,
	0xc1, 0xf9, 0xb6, 0xf2, 0x5b, 0x09, 0x2f, 0x4d, 0x58, 0xe5, 0x3c, 0x61, 0x7d, 0xe8, 0x25, 0x2a,
	0xde, 0x61, 0xc2, 0x77, 0xb3, 0xe0, 0xd7, 0xc0, 0x67, 0x0b, 0xfe, 0x75, 0xe8, 0x67, 0x7b, 0x28,
	0x42, 0xdf, 0x5a, 0x80, 0x4b, 0xc4, 0x5e, 0x81, 0x6e, 0x46, 0x5e, 0xf1, 0xd4, 0x25, 0x0a, 0x58,
	0xb0, 0x72, 0x3d, 0x3a, 0xdd, 0x23, 0x2c, 0x1b, 0x0a, 0xae, 0xa9, 0x48, 0xe9, 0x28, 0xd5, 0x49,
	0x2f, 0xe5, 0x94, 0x9b, 0xc9, 0xcb, 0x00, 0xf1, 0xdf, 0xd9, 0x34, 0x90, 0x5e, 0xdc, 0xa9, 0x9e,
	0xb1, 0x9b, 0xae, 0xfa, 0x2f, 0xb5, 0x22, 0xfd, 0xb7, 0xdc, 0x39, 0xbe, 0xfc, 0x8b, 0x1a, 0xc0,
	0x16, 0x96, 0x56, 0x59, 0x85, 0x6d, 0x13, 0xea, 0x78, 0x0f, 0x62, 0x79, 0x76, 0x1b, 0x1a, 0xf1,
	0x35, 0x86, 0xf5, 0xd8, 0xb0, 0x4d, 0xa8, 0x6d, 0x45, 0x62, 0x62, 0x7d, 0x50, 0xb1, 0x01, 0xea,
	0x78, 0xfd, 0x60, 0x3d, 0xaa, 0xca, 0x67, 0x1c, 0xd7, 0xad, 0xcf, 0xab, 0x76, 0x17, 0x5a, 0xe9,
	0x14, 0x6d, 0x3d, 0xa9, 0xd9, 0x7d, 0x58, 0xd1, 0x07, 0x63, 0xeb, 0xf7, 0x75, 0x7b, 0x05, 0xcc,
	0x6c, 0x8c, 0xb5, 0x7e, 0xd9, 0xb0, 0x57, 0x01, 0xf2, 0xd9, 0xd3, 0xfa, 0xa8, 0x95, 0x03, 0xd2,
	0x2e, 0xd6, 0x87, 0xa6, 0x6d, 0x41, 0x5b, 0x19, 0xe4, 0xac, 0x77, 0x41, 0xca, 0xc8, 0x26, 0x2f,
	0xeb, 0x5f, 0x20, 0x7f, 0xc9, 0xbb, 0x7e, 0xeb, 0xaf, 0x6d, 0xdb, 0x86, 0xae, 0x36, 0x06, 0x58,
	0x7f, 0xe8, 0xc8, 0x9f, 0xb2, 0x46, 0xd6, 0xfa, 0x8d, 0x25, 0xdf, 0xb3, 0x16, 0xca, 0xfa, 0x69,
	0x4f, 0x92, 0x4f, 0x7b, 0x1f, 0xeb, 0xdf, 0x3d, 0xf9, 0x39, 0x6b, 0x60, 0xac, 0x4f, 0x6c, 0xf9,
	0x9e, 0x65, 0x25, 0xeb, 0x4f, 0x7d, 0xb9, 0x3c, 0x2d, 0xd9, 0xd6, 0xfb, 0x6b, 0x92, 0xa4, 0x52,
	0x03, 0xad, 0xf7, 0x06, 0x92, 0x83, 0x56, 0xc4, 0xac, 0x77, 0x2e, 0x4a, 0xa2, 0x79, 0x1d, 0xb2,
	0xfe, 0x71, 0x11, 0x37, 0x4d, 0x72, 0xb2, 0xf5, 0xf8, 0x45, 0xfc, 0x9e, 0x25, 0x52, 0xeb, 0x83,
	0x2f, 0x48, 0x20, 0x4f, 0x70, 0xd6, 0xa3, 0x97, 0x24, 0x90, 0xfb, 0x97, 0xf5, 0xf9, 0x4b, 0xf2,
	0x8c, 0x62, 0xc0, 0x7a, 0xf2, 0x45, 0x29, 0x2e, 0x4d, 0x5b, 0xd6, 0x4f, 0x36, 0xed, 0x0e, 0x34,
	0x93, 0x50, 0xb2, 0x3e, 0xdd, 0x44, 0x85, 0x53, 0xef, 0xb5, 0x3e, 0xba, 0x24, 0x09, 0x6a, 0x81,
	0x66, 0x7d, 0xe8, 0xd8, 0x6b, 0xb0, 0x5a, 0x88, 0x13, 0xeb, 0xdd, 0x57, 0xae, 0x7f, 0xe5, 0xe3,
	0xa7, 0xc3, 0x0b, 0x4f, 0x9e, 0x0e, 0x2f, 0x7c, 0xf6, 0x74, 0x68, 0xbc, 0x73, 0x36, 0x34, 0xde,
	0x3f, 0x1b, 0x1a, 0x8f, 0xcf, 0x86, 0xc6, 0xc7, 0x67, 0x43, 0xe3, 0x93, 0xb3, 0xa1, 0xf1, 0xe9,
	0xd9, 0xf0, 0xc2, 0x67, 0x67, 0x43, 0xe3, 0xd1, 0xdf, 0x87, 0x17, 0xfe, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x61, 0x3d, 0xf0, 0x9c, 0x57, 0x1c, 0x00, 0x00,
}
